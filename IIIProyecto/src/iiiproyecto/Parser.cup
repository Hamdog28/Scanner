package iiiproyecto;

import java_cup.runtime.*;


/* Condigo personalizado para el parser */
parser code
{:
    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("Error sintáctico en la fila " + fila + ", columna " + columna + ": Token inesperado <" + lexema + ">");
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("¡No se pudo recuperar!");
        System.out.println("Terror sintáctico en la fila " + fila + ", columna " + columna + ": Token inesperado <" + lexema + ">");
    }
    public void guardar_id(){}
:}

action code
{:
    //Esta clase contiene tablas y pilas semanticas
    private Semanter sm = new Semanter();

    private void print(String msg) {
        System.out.println("Parser: " + msg);
    }
:}

/* Declaración de terminales */
terminal String smbbreak,
            smbcase,
            smbchar,
            smbconst,
            smbcontinue,
            smbdefault,
            smbdo,
            smbelse,
            smbfor,
            smbif,
            smbint,
            smblong,
            smbreturn,
            smbshort,
            smbswitch,
            smbvoid,
            smbwhile;

terminal String smbread,
            smbwrite;

terminal String smbigualigual,
            smbmayorigual,
            smbmayor,
            smbmenorigual,
            smbmenor,
            smbdiferente,
            smbor,
            smband,
            smbadmiracion,
            smbmasmas,
            smbmenosmenos,
            smbigual,
            smbmas,
            smbmenos,
            smbmultiplicacion,
            smbdivision,
            smbdivisionentera,
            smbmasigual,
            smbmenosigual,
            smbmultiplicacionigual,
            smbdivisionigual;

terminal String smbcoma,
            smbpuntocoma,
            smbdospuntos,
            smbparentabrir,
            smbparentcerrar,
            smbcuadradoabrir,
            smbcuadradocerrar,
            smbllaveabrir,
            smbllavecerrar;

terminal String smbstring,
            smbidentificador,
            smbcharlit,
            smbdec,
            smbhex,
            smboct;

/* Declaracíon de no terminales */
nonterminal String INICIO, VAROFUNC, VAROFUNC1, VAROFUNC2;

nonterminal String PUCOMA, IDENTIF, VAR, EXP, LITERAL, STRING, ARRAYLIST, ARRAYLIST2;

nonterminal String LAMFUNC, LAMFUNCP, LAMFUNCP2;

nonterminal String VARARRAY, VARDECL, VARDECL2, VARTIPO, VARTIPO1, VARASIG;

nonterminal String FUNCDEFIN, FUNCPARAM, FUNPARAM, FUNPARAM1, FUNCBLOCK, FUNCTIPO, FUNCTIPO1, FUNVARDEC, FUNPARDEC;

nonterminal String INSTLIST, INSTRUC, GENBLOCK;

nonterminal String ASIGOEXP, ASIGN, EXPASIARR;

nonterminal String CONTINUE, BREAK, RETURN, READ, DOWHILE;

nonterminal String SWITCH, SWTHCS, SWTHBLOCK;

nonterminal String WRITE, WRTPARAM, WRTPARAM1;

nonterminal String RDPARAM, RDPARAM1;

nonterminal String IF, IFELSE;

nonterminal String WHILE, WHLPARAM;

nonterminal String FOR, FORPARAM;

/*
    Precedencia de menor a mayor
    Tomado de:
    http://en.cppreference.com/w/c/language/operator_precedence
*/
precedence right smbigual, smbmasigual, smbmenosigual, smbmultiplicacionigual, smbdivisionigual;
precedence left smbor;
precedence left smband;
precedence left smbigualigual, smbdiferente;
precedence left smbmayor, smbmayorigual, smbmenor, smbmenorigual;
precedence left smbmas, smbmenos;
precedence left smbmultiplicacion, smbdivision, smbdivisionentera;
precedence right smbmasmas, smbmenosmenos, smbmenos, smbadmiracion;
precedence left smbmasmas, smbmenosmenos;
precedence nonassoc smbelse;

/* Regla inicial */
start with INICIO;

/* Reglas semánticas */
INICIO    ::= VAROFUNC;

// Reglas básicas
PUCOMA    ::= smbpuntocoma:e {: print(e); :};

IDENTIF   ::= smbidentificador:e {: RESULT = e; print(e); :};

VAR       ::= IDENTIF
            | IDENTIF smbcuadradoabrir:e {: print(e); :} EXP smbcuadradocerrar:c {: print(c); :};

LAMFUNC   ::= IDENTIF smbparentabrir:e {: print(e); :} LAMFUNCP smbparentcerrar:c {: print(c); :};

LAMFUNCP  ::= EXP LAMFUNCP2
            | ;

LAMFUNCP2 ::= smbcoma:e {: print(e); :} EXP LAMFUNCP2
            | ;

// Inicio de codigo que define que venga al menos una funcion
VAROFUNC  ::= smbconst:e {: print(e); :} VAROFUNC1
            | VAROFUNC1;

VAROFUNC1 ::= smbchar:e {: sm.guardar_tipo(e); print(e); :} VAROFUNC2
            | smbint:e {: sm.guardar_tipo(e); print(e); :} VAROFUNC2
            | smblong:e {: sm.guardar_tipo(e); print(e); :} VAROFUNC2
            | smbshort:e {: sm.guardar_tipo(e); print(e); :} VAROFUNC2
            | smbvoid:e {: sm.guardar_tipo(e); print(e); :} IDENTIF:i {: sm.guardar_funcion(i, true); :} FUNCPARAM FUNCBLOCK FUNCDEFIN
            | error {: print("Error en la declaración"); :} VAROFUNC;

VAROFUNC2 ::= IDENTIF:i {: sm.guardar_id(i, true); :} VARARRAY VARDECL2 PUCOMA {: sm.declarar_variables(); :} VAROFUNC
            | IDENTIF:i {: sm.guardar_funcion(i, true); :} FUNCPARAM FUNCBLOCK FUNCDEFIN;

// Reglas de variables
VARDECL   ::= VARTIPO:v {: sm.guardar_tipo(v); :} IDENTIF:i {: sm.guardar_id(i, true); :} VARARRAY VARDECL2;

VARDECL2  ::= smbcoma:e {: print(e); :} IDENTIF:i {: sm.guardar_id(i, true); :} VARARRAY VARDECL2
            | ;

VARTIPO   ::= smbconst:e {: print(e); :} VARTIPO1:v {: RESULT = v; :}
            | VARTIPO1:v {: RESULT = v; :};

VARTIPO1  ::= smbchar:e {: RESULT = e; print(e); :}
            | smbint:e {: RESULT = e; print(e); :}
            | smblong:e {: RESULT = e; print(e); :}
            | smbshort:e {: RESULT = e; print(e); :};

VARARRAY  ::= smbcuadradoabrir:e {: print(e); :} LITERAL smbcuadradocerrar:c {: print(c); :} VARARRAY
            | VARASIG;

VARASIG   ::= smbigual:e {: print(e); :} EXPASIARR
            | ;

// Definicion de funciones
FUNCDEFIN ::= FUNCTIPO:v {: sm.guardar_tipo(v); :} IDENTIF:i {: sm.guardar_funcion(i, true); :} FUNCPARAM FUNCBLOCK FUNCDEFIN
            | ;

// Tipos de funcion
FUNCTIPO  ::= smbconst:e {: print(e); :} FUNCTIPO1:v {: RESULT = v; :}
            | FUNCTIPO1:v {: RESULT = v; :};

FUNCTIPO1 ::= smbchar:e {: RESULT = e; print(e); :}
            | smbint:e {: RESULT = e; print(e); :}
            | smblong:e {: RESULT = e; print(e); :}
            | smbshort:e {: RESULT = e; print(e); :}
            | smbvoid:e {: RESULT = e; print(e); :};

// Parametros de funcion
FUNCPARAM ::= smbparentabrir:e {: print(e); :} FUNPARAM smbparentcerrar:c {: sm.declarar_funcion(); print(c); :};

FUNPARAM  ::= FUNPARDEC FUNPARAM1
            | ;

FUNPARAM1 ::= smbcoma:e {: print(e); :} FUNPARDEC FUNPARAM1
            | ;

FUNPARDEC ::= VARTIPO:v {: sm.guardar_tipo(v); :} IDENTIF:i {: sm.guardar_parametros_id(i); :};

// Bloque de funcion
FUNCBLOCK ::= smbllaveabrir:e {: print(e); :} FUNVARDEC INSTLIST smbllavecerrar:c {: sm.fin_funcion(); print(c); :};

FUNVARDEC ::= VARDECL PUCOMA {: sm.declarar_variables(); :} FUNVARDEC
            | ;

// Instrucciones de uso general
INSTLIST  ::= INSTRUC INSTLIST
            | ;

INSTRUC   ::= ASIGOEXP PUCOMA
            | CONTINUE PUCOMA
            | BREAK PUCOMA
            | RETURN PUCOMA
            | READ PUCOMA
            | WRITE PUCOMA
            | FOR
            | WHILE
            | DOWHILE PUCOMA
            | SWITCH
            | IF
            | error {: print("Error en la instruccion"); :} PUCOMA;

// Instruccinoes simples
WRITE     ::= smbwrite:e {: print(e); :} WRTPARAM;

WRTPARAM  ::= smbparentabrir:e {: print(e); :} EXP WRTPARAM1 smbparentcerrar:c {: print(c); :}
            | smbparentabrir:e {: print(e); :} STRING WRTPARAM1 smbparentcerrar:c {: print(c); :}
            | error {: print("Debe venir al menos un parametro"); :} smbparentcerrar:c {: print(c); :};

WRTPARAM1 ::= smbcoma:e EXP WRTPARAM1
            | smbcoma:e STRING WRTPARAM1
            | ;

READ      ::= smbread:e {: print(e); :} RDPARAM;

RDPARAM   ::= smbparentabrir:e {: print(e); :} RDPARAM1 smbparentcerrar:c {: print(c); :}
            | error {: print("Mas parametros de los esperados"); :} smbparentcerrar:c {: print(c); :};

RDPARAM1  ::= VAR
            | ;

RETURN    ::= smbreturn:e {: print(e); :}
            | smbreturn:e {: print(e); :} EXP;

BREAK     ::= smbbreak:e {: print(e); :};

CONTINUE  ::= smbcontinue:e {: print(e); :};

// Bloque If
IF        ::= smbif:e {: print(e); :} smbparentabrir:c {: print(c); :} ASIGOEXP smbparentcerrar:o {: print(o); :} GENBLOCK IFELSE;

IFELSE    ::= smbelse:e {: print(e); :} GENBLOCK
            | ;

// Bloque Switch
SWITCH    ::= smbswitch:e {: print(e); :} smbparentabrir:c {: print(c); :} VAR smbparentcerrar:o {: print(o); :} SWTHBLOCK;

SWTHBLOCK ::= smbllaveabrir:e {: print(e); :} SWTHCS smbllavecerrar:c {: print(c); :};

SWTHCS    ::= smbcase:e {: print(e); :} LITERAL smbdospuntos:c {: print(c); :} INSTLIST SWTHCS
            | smbdefault:e {: print(e); :} smbdospuntos:c {: print(c); :} INSTLIST;

// Ciclo do while
DOWHILE   ::= smbdo:e {: print(e); :} GENBLOCK smbwhile:c {: print(c); :} WHLPARAM;

// Ciclo while
WHILE     ::= smbwhile:e {: print(e); :} WHLPARAM GENBLOCK;

WHLPARAM  ::= smbparentabrir:e {: print(e); :} ASIGOEXP smbparentcerrar:c {: print(c); :};

// Ciclo for
FOR       ::= smbfor:e {: print(e); :} FORPARAM GENBLOCK;

FORPARAM  ::= smbparentabrir:e {: print(e); :} ASIGOEXP PUCOMA ASIGOEXP PUCOMA ASIGOEXP smbparentcerrar:c {: print(c); :};

// Bloque de uso general
GENBLOCK  ::= smbllaveabrir:e {: print(e); :} INSTLIST smbllavecerrar:c {: print(c); :}
            | INSTRUC;

ASIGOEXP  ::= ASIGN
            | EXP;

// Asignacion
ASIGN     ::= VAR smbigual:e {: print(e); :} EXPASIARR
            | VAR smbmasigual:e {: print(e); :} EXPASIARR
            | VAR smbmenosigual:e {: print(e); :} EXPASIARR
            | VAR smbmultiplicacionigual:e {: print(e); :} EXPASIARR
            | VAR smbdivisionigual:e {: print(e); :} EXPASIARR;

EXPASIARR ::= ARRAYLIST
            | ASIGN
            | EXP
            | error {: print("Error en la asignacion"); :};

// Literales
LITERAL   ::= smbcharlit:e {: sm.guardar_literal(e); print(e); :}
            | smbdec:e {: sm.guardar_literal(e); print(e); :}
            | smbhex:e {: sm.guardar_literal(e); print(e); :}
            | smboct:e {: sm.guardar_literal(e); print(e); :};

// Arreglos para asignar
ARRAYLIST ::= smbllaveabrir:e {: print(e); :} LITERAL ARRAYLIST2 smbllavecerrar:c {: print(c); :};

ARRAYLIST2::= smbcoma:e {: print(e); :} LITERAL ARRAYLIST2
            | ;

STRING    ::= smbstring:e {: print(e); :};

// Operaciones
EXP       ::= smbparentabrir:e {: sm.guardar_operador(e); print(e); :} EXP smbparentcerrar:c {: sm.guardar_operador(c); print(c); :}
            | EXP smbigualigual:e {: sm.guardar_operador(e); print(e); :} EXP
            | EXP smbmayorigual:e {: sm.guardar_operador(e); print(e); :} EXP
            | EXP smbmayor:e {: sm.guardar_operador(e); print(e); :} EXP
            | EXP smbmenorigual:e {: sm.guardar_operador(e); print(e); :} EXP
            | EXP smbmenor:e {: sm.guardar_operador(e); print(e); :} EXP
            | EXP smbdiferente:e {: sm.guardar_operador(e); print(e); :} EXP
            | EXP smbor:e {: sm.guardar_operador(e); print(e); :} EXP
            | EXP smband:e {: sm.guardar_operador(e); print(e); :} EXP
            | EXP smbmas:e {: sm.guardar_operador(e); print(e); :} EXP
            | EXP smbmenos:e {: sm.guardar_operador(e); print(e); :} EXP
            | smbmenos:e {: sm.guardar_operador(e); print(e); :} EXP
            | EXP smbmultiplicacion:e {: sm.guardar_operador(e); print(e); :} EXP
            | EXP smbdivision:e {: sm.guardar_operador(e); print(e); :} EXP
            | EXP smbdivisionentera:e {: sm.guardar_operador(e); print(e); :} EXP
            | smbadmiracion:e {: sm.guardar_operador(e); print(e); :} EXP
            | EXP smbmasmas:e {: sm.guardar_operador(e); print(e); :}
            | smbmasmas:e {: sm.guardar_operador(e); print(e); :} EXP
            | EXP smbmenosmenos:e {: sm.guardar_operador(e); print(e); :}
            | smbmenosmenos:e {: sm.guardar_operador(e); print(e); :} EXP
            | VAR
            | LAMFUNC
            | LITERAL;