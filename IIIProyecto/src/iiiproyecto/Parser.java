
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Nov 29 13:18:06 CST 2017
//----------------------------------------------------

package iiiproyecto;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Nov 29 13:18:06 CST 2017
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\337\000\002\002\004\000\002\002\003\000\002\006" +
    "\003\000\002\007\003\000\002\010\003\000\002\071\002" +
    "\000\002\072\002\000\002\010\010\000\002\073\002\000" +
    "\002\074\002\000\002\016\010\000\002\017\004\000\002" +
    "\017\002\000\002\075\002\000\002\020\006\000\002\020" +
    "\002\000\002\076\002\000\002\003\005\000\002\003\003" +
    "\000\002\077\002\000\002\004\005\000\002\100\002\000" +
    "\002\004\005\000\002\101\002\000\002\004\005\000\002" +
    "\102\002\000\002\004\005\000\002\103\002\000\002\104" +
    "\002\000\002\004\011\000\002\105\002\000\002\004\005" +
    "\000\002\106\002\000\002\107\002\000\002\005\011\000" +
    "\002\110\002\000\002\005\007\000\002\111\002\000\002" +
    "\112\002\000\002\022\010\000\002\113\002\000\002\114" +
    "\002\000\002\023\010\000\002\023\002\000\002\115\002" +
    "\000\002\024\005\000\002\024\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\116\002\000\002\117\002\000\002\021\010\000\002\021" +
    "\003\000\002\120\002\000\002\026\005\000\002\026\002" +
    "\000\002\121\002\000\002\122\002\000\002\027\011\000" +
    "\002\027\002\000\002\123\002\000\002\034\005\000\002" +
    "\034\003\000\002\035\003\000\002\035\003\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\124\002" +
    "\000\002\030\006\000\002\031\004\000\002\031\002\000" +
    "\002\125\002\000\002\032\006\000\002\032\002\000\002" +
    "\126\002\000\002\037\005\000\002\127\002\000\002\033" +
    "\007\000\002\130\002\000\002\036\006\000\002\036\002" +
    "\000\002\040\004\000\002\040\002\000\002\041\004\000" +
    "\002\041\004\000\002\041\004\000\002\041\004\000\002" +
    "\041\004\000\002\041\004\000\002\041\003\000\002\041" +
    "\003\000\002\041\004\000\002\041\003\000\002\041\003" +
    "\000\002\131\002\000\002\041\005\000\002\132\002\000" +
    "\002\056\005\000\002\133\002\000\002\057\007\000\002" +
    "\134\002\000\002\057\007\000\002\135\002\000\002\057" +
    "\005\000\002\060\005\000\002\060\005\000\002\060\002" +
    "\000\002\136\002\000\002\051\005\000\002\137\002\000" +
    "\002\061\006\000\002\140\002\000\002\061\005\000\002" +
    "\062\003\000\002\062\002\000\002\050\003\000\002\141" +
    "\002\000\002\050\005\000\002\047\003\000\002\046\003" +
    "\000\002\142\002\000\002\143\002\000\002\144\002\000" +
    "\002\063\013\000\002\145\002\000\002\064\005\000\002" +
    "\064\002\000\002\146\002\000\002\147\002\000\002\150" +
    "\002\000\002\053\012\000\002\151\002\000\002\055\006" +
    "\000\002\152\002\000\002\153\002\000\002\054\011\000" +
    "\002\154\002\000\002\155\002\000\002\054\007\000\002" +
    "\156\002\000\002\157\002\000\002\052\010\000\002\160" +
    "\002\000\002\065\006\000\002\161\002\000\002\066\006" +
    "\000\002\162\002\000\002\067\006\000\002\163\002\000" +
    "\002\070\012\000\002\164\002\000\002\042\006\000\002" +
    "\042\003\000\002\043\003\000\002\043\003\000\002\165" +
    "\002\000\002\044\006\000\002\166\002\000\002\044\006" +
    "\000\002\167\002\000\002\044\006\000\002\170\002\000" +
    "\002\044\006\000\002\171\002\000\002\044\006\000\002" +
    "\045\003\000\002\045\003\000\002\045\003\000\002\045" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\172\002\000\002\014\007\000" +
    "\002\173\002\000\002\015\006\000\002\015\002\000\002" +
    "\013\003\000\002\174\002\000\002\011\006\000\002\175" +
    "\002\000\002\011\006\000\002\176\002\000\002\011\006" +
    "\000\002\177\002\000\002\011\006\000\002\200\002\000" +
    "\002\011\006\000\002\201\002\000\002\011\006\000\002" +
    "\202\002\000\002\011\006\000\002\203\002\000\002\011" +
    "\006\000\002\204\002\000\002\011\006\000\002\205\002" +
    "\000\002\011\006\000\002\206\002\000\002\011\006\000" +
    "\002\207\002\000\002\011\005\000\002\210\002\000\002" +
    "\011\006\000\002\211\002\000\002\011\006\000\002\212" +
    "\002\000\002\011\006\000\002\213\002\000\002\011\005" +
    "\000\002\011\004\000\002\214\002\000\002\011\005\000" +
    "\002\011\004\000\002\215\002\000\002\011\005\000\002" +
    "\011\003\000\002\011\003\000\002\011\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u015f\000\020\003\011\006\006\007\014\016\012\017" +
    "\010\021\013\023\015\001\002\000\004\002\000\001\002" +
    "\000\004\002\u0161\001\002\000\004\066\uffee\001\002\000" +
    "\004\002\uffef\001\002\000\004\066\uffea\001\002\000\020" +
    "\003\uffe3\006\uffe3\007\uffe3\016\uffe3\017\uffe3\021\uffe3\023" +
    "\uffe3\001\002\000\004\066\uffec\001\002\000\004\066\uffe8" +
    "\001\002\000\016\003\ufff1\006\ufff1\016\ufff1\017\ufff1\021" +
    "\ufff1\023\ufff1\001\002\000\004\066\uffe6\001\002\000\004" +
    "\066\017\001\002\000\066\027\ufffe\030\ufffe\031\ufffe\032" +
    "\ufffe\033\ufffe\034\ufffe\035\ufffe\036\ufffe\040\ufffe\041\ufffe" +
    "\042\ufffe\043\ufffe\044\ufffe\045\ufffe\046\ufffe\047\ufffe\050" +
    "\ufffe\051\ufffe\052\ufffe\053\ufffe\054\ufffe\055\ufffe\057\ufffe" +
    "\060\ufffe\061\ufffe\062\ufffe\001\002\000\004\057\uffe5\001" +
    "\002\000\004\057\022\001\002\000\016\006\uffbb\007\uffbb" +
    "\016\uffbb\017\uffbb\021\uffbb\060\uffbb\001\002\000\004\063" +
    "\024\001\002\000\070\003\uffb2\004\uffb2\006\uffb2\007\uffb2" +
    "\010\uffb2\012\uffb2\014\uffb2\015\uffb2\016\uffb2\017\uffb2\020" +
    "\uffb2\021\uffb2\022\uffb2\024\uffb2\025\uffb2\026\uffb2\037\uffb2" +
    "\040\uffb2\041\uffb2\044\uffb2\057\uffb2\064\uffb2\066\uffb2\067" +
    "\uffb2\070\uffb2\071\uffb2\072\uffb2\001\002\000\020\002\uffc4" +
    "\006\031\007\035\016\033\017\032\021\034\023\036\001" +
    "\002\000\004\066\uffc1\001\002\000\004\066\uffc7\001\002" +
    "\000\004\002\uffe4\001\002\000\004\066\uffc0\001\002\000" +
    "\004\066\uffbe\001\002\000\004\066\uffbf\001\002\000\004" +
    "\066\uffbd\001\002\000\014\006\uffc3\016\uffc3\017\uffc3\021" +
    "\uffc3\023\uffc3\001\002\000\004\066\uffbc\001\002\000\014" +
    "\006\031\016\033\017\032\021\034\023\036\001\002\000" +
    "\004\066\uffc2\001\002\000\004\066\017\001\002\000\004" +
    "\057\uffc6\001\002\000\004\057\022\001\002\000\004\063" +
    "\024\001\002\000\020\002\uffc4\006\031\007\035\016\033" +
    "\017\032\021\034\023\036\001\002\000\004\002\uffc5\001" +
    "\002\000\070\003\uffae\004\uffae\006\054\007\060\010\uffae" +
    "\012\uffae\014\uffae\015\uffae\016\056\017\055\020\uffae\021" +
    "\057\022\uffae\024\uffae\025\uffae\026\uffae\037\uffae\040\uffae" +
    "\041\uffae\044\uffae\057\uffae\064\uffae\066\uffae\067\uffae\070" +
    "\uffae\071\uffae\072\uffae\001\002\000\004\055\325\001\002" +
    "\000\004\066\uffdc\001\002\000\004\066\uffd3\001\002\000" +
    "\056\003\113\004\077\010\125\012\064\014\111\015\114" +
    "\020\117\022\126\024\107\025\066\026\131\037\063\040" +
    "\072\041\106\044\076\057\124\064\uffac\066\017\067\070" +
    "\070\067\071\105\072\100\001\002\000\004\066\uffd2\001" +
    "\002\000\004\066\uffd0\001\002\000\004\066\uffd1\001\002" +
    "\000\004\066\uffcf\001\002\000\012\006\uffd5\016\uffd5\017" +
    "\uffd5\021\uffd5\001\002\000\012\006\054\016\056\017\055" +
    "\021\057\001\002\000\004\066\uffd4\001\002\000\026\037" +
    "\uff2d\040\uff2d\041\uff2d\044\uff2d\057\uff2d\066\uff2d\067\uff2d" +
    "\070\uff2d\071\uff2d\072\uff2d\001\002\000\056\003\uff73\004" +
    "\uff73\010\uff73\012\uff73\014\uff73\015\uff73\020\uff73\022\uff73" +
    "\024\uff73\025\uff73\026\uff73\037\uff73\040\uff73\041\uff73\044" +
    "\uff73\057\uff73\063\uff73\066\uff73\067\uff73\070\uff73\071\uff73" +
    "\072\uff73\001\002\000\066\027\ufffd\030\ufffd\031\ufffd\032" +
    "\ufffd\033\ufffd\034\ufffd\035\ufffd\036\ufffd\040\ufffd\041\ufffd" +
    "\042\ufffd\043\ufffd\044\ufffd\045\ufffd\046\ufffd\047\ufffd\050" +
    "\ufffd\051\ufffd\052\ufffd\053\ufffd\054\ufffd\055\ufffd\057\ufff9" +
    "\060\ufffd\061\ufffc\062\ufffd\001\002\000\006\003\uff93\057" +
    "\uff93\001\002\000\054\027\uff54\030\uff54\031\uff54\032\uff54" +
    "\033\uff54\034\uff54\035\uff54\036\uff54\040\uff54\041\uff54\043" +
    "\uff54\044\uff54\045\uff54\046\uff54\047\uff54\054\uff54\055\uff54" +
    "\056\uff54\060\uff54\062\uff54\064\uff54\001\002\000\054\027" +
    "\uff55\030\uff55\031\uff55\032\uff55\033\uff55\034\uff55\035\uff55" +
    "\036\uff55\040\uff55\041\uff55\043\uff55\044\uff55\045\uff55\046" +
    "\uff55\047\uff55\054\uff55\055\uff55\056\uff55\060\uff55\062\uff55" +
    "\064\uff55\001\002\000\004\055\325\001\002\000\026\037" +
    "\uff2a\040\uff2a\041\uff2a\044\uff2a\057\uff2a\066\uff2a\067\uff2a" +
    "\070\uff2a\071\uff2a\072\uff2a\001\002\000\064\003\uffa5\004" +
    "\uffa5\005\uffa5\010\uffa5\011\uffa5\012\uffa5\013\uffa5\014\uffa5" +
    "\015\uffa5\020\uffa5\022\uffa5\024\uffa5\025\uffa5\026\uffa5\037" +
    "\uffa5\040\uffa5\041\uffa5\044\uffa5\057\uffa5\064\uffa5\066\uffa5" +
    "\067\uffa5\070\uffa5\071\uffa5\072\uffa5\001\002\000\004\055" +
    "\325\001\002\000\062\003\113\004\077\005\uffac\010\125" +
    "\011\uffac\012\064\014\111\015\114\020\117\022\126\024" +
    "\107\025\066\026\131\037\063\040\072\041\106\044\076" +
    "\057\124\064\uffac\066\017\067\070\070\067\071\105\072" +
    "\100\001\002\000\026\037\uff35\040\uff35\041\uff35\044\uff35" +
    "\057\uff35\066\uff35\067\uff35\070\uff35\071\uff35\072\uff35\001" +
    "\002\000\004\055\uff88\001\002\000\054\027\uff52\030\uff52" +
    "\031\uff52\032\uff52\033\uff52\034\uff52\035\uff52\036\uff52\040" +
    "\uff52\041\uff52\043\uff52\044\uff52\045\uff52\046\uff52\047\uff52" +
    "\054\uff52\055\uff52\056\uff52\060\uff52\062\uff52\064\uff52\001" +
    "\002\000\050\027\uff24\030\uff24\031\uff24\032\uff24\033\uff24" +
    "\034\uff24\035\uff24\036\uff24\040\uff24\041\uff24\043\uff24\044" +
    "\uff24\045\uff24\046\uff24\047\uff24\054\uff24\055\uff24\060\uff24" +
    "\062\uff24\001\002\000\004\055\325\001\002\000\064\003" +
    "\uffa1\004\uffa1\005\uffa1\010\uffa1\011\uffa1\012\uffa1\013\uffa1" +
    "\014\uffa1\015\uffa1\020\uffa1\022\uffa1\024\uffa1\025\uffa1\026" +
    "\uffa1\037\uffa1\040\uffa1\041\uffa1\044\uffa1\057\uffa1\064\uffa1" +
    "\066\uffa1\067\uffa1\070\uffa1\071\uffa1\072\uffa1\001\002\000" +
    "\044\027\153\030\164\031\156\032\162\033\166\034\150" +
    "\035\154\036\163\040\151\041\155\043\147\044\165\045" +
    "\161\046\160\047\157\055\uff64\060\uff64\001\002\000\054" +
    "\027\uff53\030\uff53\031\uff53\032\uff53\033\uff53\034\uff53\035" +
    "\uff53\036\uff53\040\uff53\041\uff53\043\uff53\044\uff53\045\uff53" +
    "\046\uff53\047\uff53\054\uff53\055\uff53\056\uff53\060\uff53\062" +
    "\uff53\064\uff53\001\002\000\026\037\uff27\040\uff27\041\uff27" +
    "\044\uff27\057\uff27\066\uff27\067\uff27\070\uff27\071\uff27\072" +
    "\uff27\001\002\000\004\057\uff70\001\002\000\004\055\325" +
    "\001\002\000\004\057\uff6c\001\002\000\004\064\354\001" +
    "\002\000\004\055\uffa0\001\002\000\004\057\uff86\001\002" +
    "\000\004\055\325\001\002\000\064\003\uffa2\004\uffa2\005" +
    "\uffa2\010\uffa2\011\uffa2\012\uffa2\013\uffa2\014\uffa2\015\uffa2" +
    "\020\uffa2\022\uffa2\024\uffa2\025\uffa2\026\uffa2\037\uffa2\040" +
    "\uffa2\041\uffa2\044\uffa2\057\uffa2\064\uffa2\066\uffa2\067\uffa2" +
    "\070\uffa2\071\uffa2\072\uffa2\001\002\000\030\037\uff8a\040" +
    "\uff8a\041\uff8a\044\uff8a\055\uff8b\057\uff8a\066\uff8a\067\uff8a" +
    "\070\uff8a\071\uff8a\072\uff8a\001\002\000\050\027\uff23\030" +
    "\uff23\031\uff23\032\uff23\033\uff23\034\uff23\035\uff23\036\uff23" +
    "\040\uff23\041\uff23\043\uff23\044\uff23\045\uff23\046\uff23\047" +
    "\uff23\054\uff23\055\uff23\060\uff23\062\uff23\001\002\000\004" +
    "\055\325\001\002\000\004\055\325\001\002\000\064\003" +
    "\uffa4\004\uffa4\005\uffa4\010\uffa4\011\uffa4\012\uffa4\013\uffa4" +
    "\014\uffa4\015\uffa4\020\uffa4\022\uffa4\024\uffa4\025\uffa4\026" +
    "\uffa4\037\uffa4\040\uffa4\041\uffa4\044\uffa4\057\uffa4\064\uffa4" +
    "\066\uffa4\067\uffa4\070\uffa4\071\uffa4\072\uffa4\001\002\000" +
    "\026\037\uff4b\040\uff4b\041\uff4b\044\uff4b\057\uff4b\066\uff4b" +
    "\067\uff4b\070\uff4b\071\uff4b\072\uff4b\001\002\000\004\055" +
    "\uff87\001\002\000\004\057\uff7f\001\002\000\006\055\uff65" +
    "\060\uff65\001\002\000\060\027\uff25\030\uff25\031\uff25\032" +
    "\uff25\033\uff25\034\uff25\035\uff25\036\uff25\040\uff25\041\uff25" +
    "\042\234\043\uff25\044\uff25\045\uff25\046\uff25\047\uff25\050" +
    "\230\051\233\052\232\053\231\054\uff25\055\uff25\060\uff25" +
    "\001\002\000\006\003\uff9e\057\uff9e\001\002\000\006\003" +
    "\133\057\134\001\002\000\004\060\uff98\001\002\000\030" +
    "\037\uff9c\040\uff9c\041\uff9c\044\uff9c\057\uff9c\065\uff9a\066" +
    "\uff9c\067\uff9c\070\uff9c\071\uff9c\072\uff9c\001\002\000\004" +
    "\055\uff9d\001\002\000\026\037\063\040\072\041\106\044" +
    "\076\057\124\066\017\067\070\070\067\071\105\072\100" +
    "\001\002\000\004\065\141\001\002\000\006\054\143\060" +
    "\uff94\001\002\000\006\054\uff4c\060\uff4c\001\002\000\004" +
    "\060\222\001\002\000\030\037\063\040\072\041\106\044" +
    "\076\057\124\065\141\066\017\067\070\070\067\071\105" +
    "\072\100\001\002\000\006\054\143\060\uff94\001\002\000" +
    "\050\027\uff25\030\uff25\031\uff25\032\uff25\033\uff25\034\uff25" +
    "\035\uff25\036\uff25\040\uff25\041\uff25\043\uff25\044\uff25\045" +
    "\uff25\046\uff25\047\uff25\054\uff25\055\uff25\060\uff25\062\uff25" +
    "\001\002\000\044\027\153\030\164\031\156\032\162\033" +
    "\166\034\150\035\154\036\163\040\151\041\155\043\147" +
    "\044\165\045\161\046\160\047\157\054\143\060\uff94\001" +
    "\002\000\026\037\uff39\040\uff39\041\uff39\044\uff39\057\uff39" +
    "\066\uff39\067\uff39\070\uff39\071\uff39\072\uff39\001\002\000" +
    "\026\037\uff3f\040\uff3f\041\uff3f\044\uff3f\057\uff3f\066\uff3f" +
    "\067\uff3f\070\uff3f\071\uff3f\072\uff3f\001\002\000\050\027" +
    "\uff2b\030\uff2b\031\uff2b\032\uff2b\033\uff2b\034\uff2b\035\uff2b" +
    "\036\uff2b\040\uff2b\041\uff2b\043\uff2b\044\uff2b\045\uff2b\046" +
    "\uff2b\047\uff2b\054\uff2b\055\uff2b\060\uff2b\062\uff2b\001\002" +
    "\000\004\060\uff96\001\002\000\026\037\uff49\040\uff49\041" +
    "\uff49\044\uff49\057\uff49\066\uff49\067\uff49\070\uff49\071\uff49" +
    "\072\uff49\001\002\000\026\037\uff3d\040\uff3d\041\uff3d\044" +
    "\uff3d\057\uff3d\066\uff3d\067\uff3d\070\uff3d\071\uff3d\072\uff3d" +
    "\001\002\000\050\027\uff28\030\uff28\031\uff28\032\uff28\033" +
    "\uff28\034\uff28\035\uff28\036\uff28\040\uff28\041\uff28\043\uff28" +
    "\044\uff28\045\uff28\046\uff28\047\uff28\054\uff28\055\uff28\060" +
    "\uff28\062\uff28\001\002\000\026\037\uff45\040\uff45\041\uff45" +
    "\044\uff45\057\uff45\066\uff45\067\uff45\070\uff45\071\uff45\072" +
    "\uff45\001\002\000\026\037\uff2f\040\uff2f\041\uff2f\044\uff2f" +
    "\057\uff2f\066\uff2f\067\uff2f\070\uff2f\071\uff2f\072\uff2f\001" +
    "\002\000\026\037\uff31\040\uff31\041\uff31\044\uff31\057\uff31" +
    "\066\uff31\067\uff31\070\uff31\071\uff31\072\uff31\001\002\000" +
    "\026\037\uff33\040\uff33\041\uff33\044\uff33\057\uff33\066\uff33" +
    "\067\uff33\070\uff33\071\uff33\072\uff33\001\002\000\026\037" +
    "\uff43\040\uff43\041\uff43\044\uff43\057\uff43\066\uff43\067\uff43" +
    "\070\uff43\071\uff43\072\uff43\001\002\000\026\037\uff3b\040" +
    "\uff3b\041\uff3b\044\uff3b\057\uff3b\066\uff3b\067\uff3b\070\uff3b" +
    "\071\uff3b\072\uff3b\001\002\000\026\037\uff47\040\uff47\041" +
    "\uff47\044\uff47\057\uff47\066\uff47\067\uff47\070\uff47\071\uff47" +
    "\072\uff47\001\002\000\026\037\uff37\040\uff37\041\uff37\044" +
    "\uff37\057\uff37\066\uff37\067\uff37\070\uff37\071\uff37\072\uff37" +
    "\001\002\000\026\037\uff41\040\uff41\041\uff41\044\uff41\057" +
    "\uff41\066\uff41\067\uff41\070\uff41\071\uff41\072\uff41\001\002" +
    "\000\026\037\063\040\072\041\106\044\076\057\124\066" +
    "\017\067\070\070\067\071\105\072\100\001\002\000\050" +
    "\027\uff40\030\uff40\031\uff40\032\uff40\033\uff40\034\uff40\035" +
    "\uff40\036\uff40\040\151\041\155\043\147\044\165\045\161" +
    "\046\160\047\157\054\uff40\055\uff40\060\uff40\062\uff40\001" +
    "\002\000\026\037\063\040\072\041\106\044\076\057\124" +
    "\066\017\067\070\070\067\071\105\072\100\001\002\000" +
    "\050\027\uff36\030\uff36\031\uff36\032\uff36\033\uff36\034\uff36" +
    "\035\uff36\036\uff36\040\151\041\155\043\uff36\044\165\045" +
    "\uff36\046\uff36\047\uff36\054\uff36\055\uff36\060\uff36\062\uff36" +
    "\001\002\000\026\037\063\040\072\041\106\044\076\057" +
    "\124\066\017\067\070\070\067\071\105\072\100\001\002" +
    "\000\050\027\uff46\030\uff46\031\uff46\032\uff46\033\uff46\034" +
    "\uff46\035\uff46\036\uff46\040\151\041\155\043\147\044\165" +
    "\045\161\046\160\047\157\054\uff46\055\uff46\060\uff46\062" +
    "\uff46\001\002\000\026\037\063\040\072\041\106\044\076" +
    "\057\124\066\017\067\070\070\067\071\105\072\100\001" +
    "\002\000\050\027\153\030\164\031\156\032\162\033\166" +
    "\034\150\035\uff3a\036\uff3a\040\151\041\155\043\147\044" +
    "\165\045\161\046\160\047\157\054\uff3a\055\uff3a\060\uff3a" +
    "\062\uff3a\001\002\000\026\037\063\040\072\041\106\044" +
    "\076\057\124\066\017\067\070\070\067\071\105\072\100" +
    "\001\002\000\050\027\uff42\030\uff42\031\uff42\032\uff42\033" +
    "\uff42\034\uff42\035\uff42\036\uff42\040\151\041\155\043\147" +
    "\044\165\045\161\046\160\047\157\054\uff42\055\uff42\060" +
    "\uff42\062\uff42\001\002\000\026\037\063\040\072\041\106" +
    "\044\076\057\124\066\017\067\070\070\067\071\105\072" +
    "\100\001\002\000\050\027\uff32\030\uff32\031\uff32\032\uff32" +
    "\033\uff32\034\uff32\035\uff32\036\uff32\040\151\041\155\043" +
    "\uff32\044\165\045\uff32\046\uff32\047\uff32\054\uff32\055\uff32" +
    "\060\uff32\062\uff32\001\002\000\026\037\063\040\072\041" +
    "\106\044\076\057\124\066\017\067\070\070\067\071\105" +
    "\072\100\001\002\000\050\027\uff30\030\uff30\031\uff30\032" +
    "\uff30\033\uff30\034\uff30\035\uff30\036\uff30\040\151\041\155" +
    "\043\uff30\044\165\045\uff30\046\uff30\047\uff30\054\uff30\055" +
    "\uff30\060\uff30\062\uff30\001\002\000\026\037\063\040\072" +
    "\041\106\044\076\057\124\066\017\067\070\070\067\071" +
    "\105\072\100\001\002\000\050\027\uff2e\030\uff2e\031\uff2e" +
    "\032\uff2e\033\uff2e\034\uff2e\035\uff2e\036\uff2e\040\151\041" +
    "\155\043\uff2e\044\165\045\uff2e\046\uff2e\047\uff2e\054\uff2e" +
    "\055\uff2e\060\uff2e\062\uff2e\001\002\000\026\037\063\040" +
    "\072\041\106\044\076\057\124\066\017\067\070\070\067" +
    "\071\105\072\100\001\002\000\050\027\uff44\030\uff44\031" +
    "\uff44\032\uff44\033\uff44\034\uff44\035\uff44\036\uff44\040\151" +
    "\041\155\043\147\044\165\045\161\046\160\047\157\054" +
    "\uff44\055\uff44\060\uff44\062\uff44\001\002\000\026\037\063" +
    "\040\072\041\106\044\076\057\124\066\017\067\070\070" +
    "\067\071\105\072\100\001\002\000\050\027\153\030\164" +
    "\031\156\032\162\033\166\034\150\035\uff3c\036\163\040" +
    "\151\041\155\043\147\044\165\045\161\046\160\047\157" +
    "\054\uff3c\055\uff3c\060\uff3c\062\uff3c\001\002\000\026\037" +
    "\063\040\072\041\106\044\076\057\124\066\017\067\070" +
    "\070\067\071\105\072\100\001\002\000\050\027\uff48\030" +
    "\164\031\156\032\162\033\166\034\uff48\035\uff48\036\uff48" +
    "\040\151\041\155\043\147\044\165\045\161\046\160\047" +
    "\157\054\uff48\055\uff48\060\uff48\062\uff48\001\002\000\026" +
    "\037\063\040\072\041\106\044\076\057\124\066\017\067" +
    "\070\070\067\071\105\072\100\001\002\000\050\027\uff3e" +
    "\030\164\031\156\032\162\033\166\034\uff3e\035\uff3e\036" +
    "\uff3e\040\151\041\155\043\147\044\165\045\161\046\160" +
    "\047\157\054\uff3e\055\uff3e\060\uff3e\062\uff3e\001\002\000" +
    "\026\037\063\040\072\041\106\044\076\057\124\066\017" +
    "\067\070\070\067\071\105\072\100\001\002\000\050\027" +
    "\uff38\030\uff38\031\uff38\032\uff38\033\uff38\034\uff38\035\uff38" +
    "\036\uff38\040\151\041\155\043\uff38\044\165\045\161\046" +
    "\160\047\157\054\uff38\055\uff38\060\uff38\062\uff38\001\002" +
    "\000\004\060\uff95\001\002\000\004\055\uff99\001\002\000" +
    "\044\027\153\030\164\031\156\032\162\033\166\034\150" +
    "\035\154\036\163\040\151\041\155\043\147\044\165\045" +
    "\161\046\160\047\157\054\143\060\uff94\001\002\000\004" +
    "\060\225\001\002\000\004\055\uff9b\001\002\000\004\060" +
    "\227\001\002\000\004\055\uff97\001\002\000\032\003\uff61" +
    "\037\uff61\040\uff61\041\uff61\044\uff61\057\uff61\063\uff61\066" +
    "\uff61\067\uff61\070\uff61\071\uff61\072\uff61\001\002\000\032" +
    "\003\uff5b\037\uff5b\040\uff5b\041\uff5b\044\uff5b\057\uff5b\063" +
    "\uff5b\066\uff5b\067\uff5b\070\uff5b\071\uff5b\072\uff5b\001\002" +
    "\000\032\003\uff5d\037\uff5d\040\uff5d\041\uff5d\044\uff5d\057" +
    "\uff5d\063\uff5d\066\uff5d\067\uff5d\070\uff5d\071\uff5d\072\uff5d" +
    "\001\002\000\032\003\uff5f\037\uff5f\040\uff5f\041\uff5f\044" +
    "\uff5f\057\uff5f\063\uff5f\066\uff5f\067\uff5f\070\uff5f\071\uff5f" +
    "\072\uff5f\001\002\000\032\003\uff63\037\uff63\040\uff63\041" +
    "\uff63\044\uff63\057\uff63\063\uff63\066\uff63\067\uff63\070\uff63" +
    "\071\uff63\072\uff63\001\002\000\032\003\242\037\063\040" +
    "\072\041\106\044\076\057\124\063\241\066\017\067\070" +
    "\070\067\071\105\072\100\001\002\000\010\054\uff58\055" +
    "\uff58\060\uff58\001\002\000\046\027\153\030\164\031\156" +
    "\032\162\033\166\034\150\035\154\036\163\040\151\041" +
    "\155\043\147\044\165\045\161\046\160\047\157\054\uff57" +
    "\055\uff57\060\uff57\001\002\000\010\054\uff62\055\uff62\060" +
    "\uff62\001\002\000\012\067\uff51\070\uff51\071\uff51\072\uff51" +
    "\001\002\000\010\054\uff56\055\uff56\060\uff56\001\002\000" +
    "\010\054\uff59\055\uff59\060\uff59\001\002\000\012\067\070" +
    "\070\067\071\105\072\100\001\002\000\006\054\247\064" +
    "\uff4d\001\002\000\004\064\253\001\002\000\012\067\uff4f" +
    "\070\uff4f\071\uff4f\072\uff4f\001\002\000\012\067\070\070" +
    "\067\071\105\072\100\001\002\000\006\054\247\064\uff4d" +
    "\001\002\000\004\064\uff4e\001\002\000\010\054\uff50\055" +
    "\uff50\060\uff50\001\002\000\032\003\242\037\063\040\072" +
    "\041\106\044\076\057\124\063\241\066\017\067\070\070" +
    "\067\071\105\072\100\001\002\000\010\054\uff5e\055\uff5e" +
    "\060\uff5e\001\002\000\032\003\242\037\063\040\072\041" +
    "\106\044\076\057\124\063\241\066\017\067\070\070\067" +
    "\071\105\072\100\001\002\000\010\054\uff5c\055\uff5c\060" +
    "\uff5c\001\002\000\032\003\242\037\063\040\072\041\106" +
    "\044\076\057\124\063\241\066\017\067\070\070\067\071" +
    "\105\072\100\001\002\000\010\054\uff5a\055\uff5a\060\uff5a" +
    "\001\002\000\032\003\242\037\063\040\072\041\106\044" +
    "\076\057\124\063\241\066\017\067\070\070\067\071\105" +
    "\072\100\001\002\000\010\054\uff60\055\uff60\060\uff60\001" +
    "\002\000\004\057\265\001\002\000\004\066\uff7e\001\002" +
    "\000\004\066\017\001\002\000\004\060\276\001\002\000" +
    "\006\060\ufffd\061\ufffc\001\002\000\004\061\272\001\002" +
    "\000\026\037\ufffb\040\ufffb\041\ufffb\044\ufffb\057\ufffb\066" +
    "\ufffb\067\ufffb\070\ufffb\071\ufffb\072\ufffb\001\002\000\026" +
    "\037\063\040\072\041\106\044\076\057\124\066\017\067" +
    "\070\070\067\071\105\072\100\001\002\000\042\027\153" +
    "\030\164\031\156\032\162\033\166\034\150\035\154\036" +
    "\163\040\151\041\155\043\147\044\165\045\161\046\160" +
    "\047\157\062\275\001\002\000\062\027\ufffa\030\ufffa\031" +
    "\ufffa\032\ufffa\033\ufffa\034\ufffa\035\ufffa\036\ufffa\040\ufffa" +
    "\041\ufffa\042\ufffa\043\ufffa\044\ufffa\045\ufffa\046\ufffa\047" +
    "\ufffa\050\ufffa\051\ufffa\052\ufffa\053\ufffa\054\ufffa\055\ufffa" +
    "\060\ufffa\062\ufffa\001\002\000\004\063\uff7d\001\002\000" +
    "\004\063\300\001\002\000\006\005\uff7b\011\uff7b\001\002" +
    "\000\064\003\uff7c\004\uff7c\005\uff7c\010\uff7c\011\uff7c\012" +
    "\uff7c\013\uff7c\014\uff7c\015\uff7c\020\uff7c\022\uff7c\024\uff7c" +
    "\025\uff7c\026\uff7c\037\uff7c\040\uff7c\041\uff7c\044\uff7c\057" +
    "\uff7c\064\uff7c\066\uff7c\067\uff7c\070\uff7c\071\uff7c\072\uff7c" +
    "\001\002\000\006\005\305\011\304\001\002\000\004\064" +
    "\320\001\002\000\004\056\uff76\001\002\000\012\067\uff79" +
    "\070\uff79\071\uff79\072\uff79\001\002\000\012\067\070\070" +
    "\067\071\105\072\100\001\002\000\004\056\310\001\002" +
    "\000\060\003\uff78\004\uff78\005\uff78\010\uff78\011\uff78\012" +
    "\uff78\014\uff78\015\uff78\020\uff78\022\uff78\024\uff78\025\uff78" +
    "\026\uff78\037\uff78\040\uff78\041\uff78\044\uff78\057\uff78\066" +
    "\uff78\067\uff78\070\uff78\071\uff78\072\uff78\001\002\000\060" +
    "\003\113\004\077\005\uffac\010\125\011\uffac\012\064\014" +
    "\111\015\114\020\117\022\126\024\107\025\066\026\131" +
    "\037\063\040\072\041\106\044\076\057\124\066\017\067" +
    "\070\070\067\071\105\072\100\001\002\000\006\005\305" +
    "\011\304\001\002\000\004\064\uff77\001\002\000\004\056" +
    "\315\001\002\000\056\003\uff75\004\uff75\010\uff75\012\uff75" +
    "\014\uff75\015\uff75\020\uff75\022\uff75\024\uff75\025\uff75\026" +
    "\uff75\037\uff75\040\uff75\041\uff75\044\uff75\057\uff75\064\uff75" +
    "\066\uff75\067\uff75\070\uff75\071\uff75\072\uff75\001\002\000" +
    "\056\003\113\004\077\010\125\012\064\014\111\015\114" +
    "\020\117\022\126\024\107\025\066\026\131\037\063\040" +
    "\072\041\106\044\076\057\124\064\uffac\066\017\067\070" +
    "\070\067\071\105\072\100\001\002\000\004\064\uff74\001" +
    "\002\000\064\003\uff7a\004\uff7a\005\uff7a\010\uff7a\011\uff7a" +
    "\012\uff7a\013\uff7a\014\uff7a\015\uff7a\020\uff7a\022\uff7a\024" +
    "\uff7a\025\uff7a\026\uff7a\037\uff7a\040\uff7a\041\uff7a\044\uff7a" +
    "\057\uff7a\064\uff7a\066\uff7a\067\uff7a\070\uff7a\071\uff7a\072" +
    "\uff7a\001\002\000\026\037\063\040\072\041\106\044\076" +
    "\057\124\066\017\067\070\070\067\071\105\072\100\001" +
    "\002\000\042\027\153\030\164\031\156\032\162\033\166" +
    "\034\150\035\154\036\163\040\151\041\155\043\147\044" +
    "\165\045\161\046\160\047\157\060\323\001\002\000\050" +
    "\027\uff4a\030\uff4a\031\uff4a\032\uff4a\033\uff4a\034\uff4a\035" +
    "\uff4a\036\uff4a\040\uff4a\041\uff4a\043\uff4a\044\uff4a\045\uff4a" +
    "\046\uff4a\047\uff4a\054\uff4a\055\uff4a\060\uff4a\062\uff4a\001" +
    "\002\000\064\003\uffa7\004\uffa7\005\uffa7\010\uffa7\011\uffa7" +
    "\012\uffa7\013\uffa7\014\uffa7\015\uffa7\020\uffa7\022\uffa7\024" +
    "\uffa7\025\uffa7\026\uffa7\037\uffa7\040\uffa7\041\uffa7\044\uffa7" +
    "\057\uffa7\064\uffa7\066\uffa7\067\uffa7\070\uffa7\071\uffa7\072" +
    "\uffa7\001\002\000\100\003\uffff\004\uffff\005\uffff\006\uffff" +
    "\007\uffff\010\uffff\011\uffff\012\uffff\013\uffff\014\uffff\015" +
    "\uffff\016\uffff\017\uffff\020\uffff\021\uffff\022\uffff\023\uffff" +
    "\024\uffff\025\uffff\026\uffff\037\uffff\040\uffff\041\uffff\044" +
    "\uffff\057\uffff\064\uffff\066\uffff\067\uffff\070\uffff\071\uffff" +
    "\072\uffff\001\002\000\064\003\uffa3\004\uffa3\005\uffa3\010" +
    "\uffa3\011\uffa3\012\uffa3\013\uffa3\014\uffa3\015\uffa3\020\uffa3" +
    "\022\uffa3\024\uffa3\025\uffa3\026\uffa3\037\uffa3\040\uffa3\041" +
    "\uffa3\044\uffa3\057\uffa3\064\uffa3\066\uffa3\067\uffa3\070\uffa3" +
    "\071\uffa3\072\uffa3\001\002\000\026\037\063\040\072\041" +
    "\106\044\076\057\124\066\017\067\070\070\067\071\105" +
    "\072\100\001\002\000\042\027\153\030\164\031\156\032" +
    "\162\033\166\034\150\035\154\036\163\040\151\041\155" +
    "\043\147\044\165\045\161\046\160\047\157\055\uff89\001" +
    "\002\000\064\003\uffa9\004\uffa9\005\uffa9\010\uffa9\011\uffa9" +
    "\012\uffa9\013\uffa9\014\uffa9\015\uffa9\020\uffa9\022\uffa9\024" +
    "\uffa9\025\uffa9\026\uffa9\037\uffa9\040\uffa9\041\uffa9\044\uffa9" +
    "\057\uffa9\064\uffa9\066\uffa9\067\uffa9\070\uffa9\071\uffa9\072" +
    "\uffa9\001\002\000\004\057\333\001\002\000\026\037\uff85" +
    "\040\uff85\041\uff85\044\uff85\057\uff85\066\uff85\067\uff85\070" +
    "\uff85\071\uff85\072\uff85\001\002\000\026\037\063\040\072" +
    "\041\106\044\076\057\124\066\017\067\070\070\067\071" +
    "\105\072\100\001\002\000\004\060\336\001\002\000\056" +
    "\003\uff84\004\uff84\010\uff84\012\uff84\014\uff84\015\uff84\020" +
    "\uff84\022\uff84\024\uff84\025\uff84\026\uff84\037\uff84\040\uff84" +
    "\041\uff84\044\uff84\057\uff84\063\uff84\066\uff84\067\uff84\070" +
    "\uff84\071\uff84\072\uff84\001\002\000\056\003\113\004\077" +
    "\010\125\012\064\014\111\015\114\020\117\022\126\024" +
    "\107\025\066\026\131\037\063\040\072\041\106\044\076" +
    "\057\124\063\342\066\017\067\070\070\067\071\105\072" +
    "\100\001\002\000\064\003\uff66\004\uff66\005\uff66\010\uff66" +
    "\011\uff66\012\uff66\013\uff66\014\uff66\015\uff66\020\uff66\022" +
    "\uff66\024\uff66\025\uff66\026\uff66\037\uff66\040\uff66\041\uff66" +
    "\044\uff66\057\uff66\064\uff66\066\uff66\067\uff66\070\uff66\071" +
    "\uff66\072\uff66\001\002\000\064\003\uff80\004\uff80\005\uff80" +
    "\010\uff80\011\uff80\012\uff80\013\347\014\uff80\015\uff80\020" +
    "\uff80\022\uff80\024\uff80\025\uff80\026\uff80\037\uff80\040\uff80" +
    "\041\uff80\044\uff80\057\uff80\064\uff80\066\uff80\067\uff80\070" +
    "\uff80\071\uff80\072\uff80\001\002\000\056\003\uff68\004\uff68" +
    "\010\uff68\012\uff68\014\uff68\015\uff68\020\uff68\022\uff68\024" +
    "\uff68\025\uff68\026\uff68\037\uff68\040\uff68\041\uff68\044\uff68" +
    "\057\uff68\064\uff68\066\uff68\067\uff68\070\uff68\071\uff68\072" +
    "\uff68\001\002\000\056\003\113\004\077\010\125\012\064" +
    "\014\111\015\114\020\117\022\126\024\107\025\066\026" +
    "\131\037\063\040\072\041\106\044\076\057\124\064\uffac" +
    "\066\017\067\070\070\067\071\105\072\100\001\002\000" +
    "\004\064\345\001\002\000\064\003\uff67\004\uff67\005\uff67" +
    "\010\uff67\011\uff67\012\uff67\013\uff67\014\uff67\015\uff67\020" +
    "\uff67\022\uff67\024\uff67\025\uff67\026\uff67\037\uff67\040\uff67" +
    "\041\uff67\044\uff67\057\uff67\064\uff67\066\uff67\067\uff67\070" +
    "\uff67\071\uff67\072\uff67\001\002\000\064\003\uff83\004\uff83" +
    "\005\uff83\010\uff83\011\uff83\012\uff83\013\uff83\014\uff83\015" +
    "\uff83\020\uff83\022\uff83\024\uff83\025\uff83\026\uff83\037\uff83" +
    "\040\uff83\041\uff83\044\uff83\057\uff83\064\uff83\066\uff83\067" +
    "\uff83\070\uff83\071\uff83\072\uff83\001\002\000\056\003\uff82" +
    "\004\uff82\010\uff82\012\uff82\014\uff82\015\uff82\020\uff82\022" +
    "\uff82\024\uff82\025\uff82\026\uff82\037\uff82\040\uff82\041\uff82" +
    "\044\uff82\057\uff82\063\uff82\066\uff82\067\uff82\070\uff82\071" +
    "\uff82\072\uff82\001\002\000\056\003\113\004\077\010\125" +
    "\012\064\014\111\015\114\020\117\022\126\024\107\025" +
    "\066\026\131\037\063\040\072\041\106\044\076\057\124" +
    "\063\342\066\017\067\070\070\067\071\105\072\100\001" +
    "\002\000\064\003\uff81\004\uff81\005\uff81\010\uff81\011\uff81" +
    "\012\uff81\013\uff81\014\uff81\015\uff81\020\uff81\022\uff81\024" +
    "\uff81\025\uff81\026\uff81\037\uff81\040\uff81\041\uff81\044\uff81" +
    "\057\uff81\064\uff81\066\uff81\067\uff81\070\uff81\071\uff81\072" +
    "\uff81\001\002\000\004\055\325\001\002\000\064\003\uff9f" +
    "\004\uff9f\005\uff9f\010\uff9f\011\uff9f\012\uff9f\013\uff9f\014" +
    "\uff9f\015\uff9f\020\uff9f\022\uff9f\024\uff9f\025\uff9f\026\uff9f" +
    "\037\uff9f\040\uff9f\041\uff9f\044\uff9f\057\uff9f\064\uff9f\066" +
    "\uff9f\067\uff9f\070\uff9f\071\uff9f\072\uff9f\001\002\000\020" +
    "\002\uffb1\006\uffb1\007\uffb1\016\uffb1\017\uffb1\021\uffb1\023" +
    "\uffb1\001\002\000\004\057\356\001\002\000\026\037\uff6a" +
    "\040\uff6a\041\uff6a\044\uff6a\057\uff6a\066\uff6a\067\uff6a\070" +
    "\uff6a\071\uff6a\072\uff6a\001\002\000\056\003\113\004\077" +
    "\010\125\012\064\014\111\015\114\020\117\022\126\024" +
    "\107\025\066\026\131\037\063\040\072\041\106\044\076" +
    "\057\124\063\342\066\017\067\070\070\067\071\105\072" +
    "\100\001\002\000\064\003\uff6b\004\uff6b\005\uff6b\010\uff6b" +
    "\011\uff6b\012\uff6b\013\uff6b\014\uff6b\015\uff6b\020\uff6b\022" +
    "\uff6b\024\uff6b\025\uff6b\026\uff6b\037\uff6b\040\uff6b\041\uff6b" +
    "\044\uff6b\057\uff6b\064\uff6b\066\uff6b\067\uff6b\070\uff6b\071" +
    "\uff6b\072\uff6b\001\002\000\026\037\063\040\072\041\106" +
    "\044\076\057\124\066\017\067\070\070\067\071\105\072" +
    "\100\001\002\000\004\055\325\001\002\000\026\037\063" +
    "\040\072\041\106\044\076\057\124\066\017\067\070\070" +
    "\067\071\105\072\100\001\002\000\004\055\325\001\002" +
    "\000\026\037\063\040\072\041\106\044\076\057\124\066" +
    "\017\067\070\070\067\071\105\072\100\001\002\000\004" +
    "\060\367\001\002\000\056\003\uff69\004\uff69\010\uff69\012" +
    "\uff69\014\uff69\015\uff69\020\uff69\022\uff69\024\uff69\025\uff69" +
    "\026\uff69\037\uff69\040\uff69\041\uff69\044\uff69\057\uff69\063" +
    "\uff69\066\uff69\067\uff69\070\uff69\071\uff69\072\uff69\001\002" +
    "\000\064\003\uffa8\004\uffa8\005\uffa8\010\uffa8\011\uffa8\012" +
    "\uffa8\013\uffa8\014\uffa8\015\uffa8\020\uffa8\022\uffa8\024\uffa8" +
    "\025\uffa8\026\uffa8\037\uffa8\040\uffa8\041\uffa8\044\uffa8\057" +
    "\uffa8\064\uffa8\066\uffa8\067\uffa8\070\uffa8\071\uffa8\072\uffa8" +
    "\001\002\000\004\057\372\001\002\000\026\037\uff6e\040" +
    "\uff6e\041\uff6e\044\uff6e\057\uff6e\066\uff6e\067\uff6e\070\uff6e" +
    "\071\uff6e\072\uff6e\001\002\000\056\003\113\004\077\010" +
    "\125\012\064\014\111\015\114\020\117\022\126\024\107" +
    "\025\066\026\131\037\063\040\072\041\106\044\076\057" +
    "\124\063\342\066\017\067\070\070\067\071\105\072\100" +
    "\001\002\000\064\003\uff6f\004\uff6f\005\uff6f\010\uff6f\011" +
    "\uff6f\012\uff6f\013\uff6f\014\uff6f\015\uff6f\020\uff6f\022\uff6f" +
    "\024\uff6f\025\uff6f\026\uff6f\037\uff6f\040\uff6f\041\uff6f\044" +
    "\uff6f\057\uff6f\064\uff6f\066\uff6f\067\uff6f\070\uff6f\071\uff6f" +
    "\072\uff6f\001\002\000\026\037\063\040\072\041\106\044" +
    "\076\057\124\066\017\067\070\070\067\071\105\072\100" +
    "\001\002\000\004\060\377\001\002\000\060\003\uff6d\004" +
    "\uff6d\010\uff6d\012\uff6d\014\uff6d\015\uff6d\020\uff6d\022\uff6d" +
    "\024\uff6d\025\uff6d\026\uff6d\037\uff6d\040\uff6d\041\uff6d\044" +
    "\uff6d\055\uff6d\057\uff6d\063\uff6d\066\uff6d\067\uff6d\070\uff6d" +
    "\071\uff6d\072\uff6d\001\002\000\026\037\063\040\072\041" +
    "\106\044\076\057\124\066\017\067\070\070\067\071\105" +
    "\072\100\001\002\000\050\027\uff26\030\uff26\031\uff26\032" +
    "\uff26\033\uff26\034\uff26\035\uff26\036\uff26\040\uff26\041\uff26" +
    "\043\uff26\044\uff26\045\uff26\046\uff26\047\uff26\054\uff26\055" +
    "\uff26\060\uff26\062\uff26\001\002\000\064\003\uffab\004\uffab" +
    "\005\uffab\010\uffab\011\uffab\012\uffab\013\uffab\014\uffab\015" +
    "\uffab\020\uffab\022\uffab\024\uffab\025\uffab\026\uffab\037\uffab" +
    "\040\uffab\041\uffab\044\uffab\057\uffab\064\uffab\066\uffab\067" +
    "\uffab\070\uffab\071\uffab\072\uffab\001\002\000\026\037\063" +
    "\040\072\041\106\044\076\057\124\066\017\067\070\070" +
    "\067\071\105\072\100\001\002\000\050\027\uff34\030\uff34" +
    "\031\uff34\032\uff34\033\uff34\034\uff34\035\uff34\036\uff34\040" +
    "\151\041\155\043\uff34\044\165\045\uff34\046\uff34\047\uff34" +
    "\054\uff34\055\uff34\060\uff34\062\uff34\001\002\000\010\005" +
    "\uffad\011\uffad\064\uffad\001\002\000\064\003\uffa6\004\uffa6" +
    "\005\uffa6\010\uffa6\011\uffa6\012\uffa6\013\uffa6\014\uffa6\015" +
    "\uffa6\020\uffa6\022\uffa6\024\uffa6\025\uffa6\026\uffa6\037\uffa6" +
    "\040\uffa6\041\uffa6\044\uffa6\057\uffa6\064\uffa6\066\uffa6\067" +
    "\uffa6\070\uffa6\071\uffa6\072\uffa6\001\002\000\026\037\063" +
    "\040\072\041\106\044\076\057\124\066\017\067\070\070" +
    "\067\071\105\072\100\001\002\000\050\027\uff29\030\uff29" +
    "\031\uff29\032\uff29\033\uff29\034\uff29\035\uff29\036\uff29\040" +
    "\uff29\041\uff29\043\uff29\044\uff29\045\uff29\046\uff29\047\uff29" +
    "\054\uff29\055\uff29\060\uff29\062\uff29\001\002\000\064\003" +
    "\uffaa\004\uffaa\005\uffaa\010\uffaa\011\uffaa\012\uffaa\013\uffaa" +
    "\014\uffaa\015\uffaa\020\uffaa\022\uffaa\024\uffaa\025\uffaa\026" +
    "\uffaa\037\uffaa\040\uffaa\041\uffaa\044\uffaa\057\uffaa\064\uffaa" +
    "\066\uffaa\067\uffaa\070\uffaa\071\uffaa\072\uffaa\001\002\000" +
    "\006\003\u010c\057\u010b\001\002\000\006\060\uff91\066\uff91" +
    "\001\002\000\004\060\uff8f\001\002\000\004\055\uff92\001" +
    "\002\000\004\060\u010f\001\002\000\004\055\uff8e\001\002" +
    "\000\006\060\uff8c\066\017\001\002\000\004\060\uff8d\001" +
    "\002\000\004\060\u0113\001\002\000\004\055\uff90\001\002" +
    "\000\004\057\u0115\001\002\000\030\037\ufff8\040\ufff8\041" +
    "\ufff8\044\ufff8\057\ufff8\060\ufff8\066\ufff8\067\ufff8\070\ufff8" +
    "\071\ufff8\072\ufff8\001\002\000\030\037\063\040\072\041" +
    "\106\044\076\057\124\060\ufff5\066\017\067\070\070\067" +
    "\071\105\072\100\001\002\000\004\060\u011e\001\002\000" +
    "\044\027\153\030\164\031\156\032\162\033\166\034\150" +
    "\035\154\036\163\040\151\041\155\043\147\044\165\045" +
    "\161\046\160\047\157\054\u011a\060\ufff2\001\002\000\004" +
    "\060\ufff6\001\002\000\026\037\ufff4\040\ufff4\041\ufff4\044" +
    "\ufff4\057\ufff4\066\ufff4\067\ufff4\070\ufff4\071\ufff4\072\ufff4" +
    "\001\002\000\026\037\063\040\072\041\106\044\076\057" +
    "\124\066\017\067\070\070\067\071\105\072\100\001\002" +
    "\000\044\027\153\030\164\031\156\032\162\033\166\034" +
    "\150\035\154\036\163\040\151\041\155\043\147\044\165" +
    "\045\161\046\160\047\157\054\u011a\060\ufff2\001\002\000" +
    "\004\060\ufff3\001\002\000\050\027\ufff7\030\ufff7\031\ufff7" +
    "\032\ufff7\033\ufff7\034\ufff7\035\ufff7\036\ufff7\040\ufff7\041" +
    "\ufff7\043\ufff7\044\ufff7\045\ufff7\046\ufff7\047\ufff7\054\ufff7" +
    "\055\ufff7\060\ufff7\062\ufff7\001\002\000\056\003\113\004" +
    "\077\010\125\012\064\014\111\015\114\020\117\022\126" +
    "\024\107\025\066\026\131\037\063\040\072\041\106\044" +
    "\076\057\124\063\342\066\017\067\070\070\067\071\105" +
    "\072\100\001\002\000\004\024\u0121\001\002\000\004\057" +
    "\uff72\001\002\000\004\057\372\001\002\000\004\055\uff71" +
    "\001\002\000\026\037\063\040\072\041\106\044\076\057" +
    "\124\066\017\067\070\070\067\071\105\072\100\001\002" +
    "\000\050\027\uff2c\030\uff2c\031\uff2c\032\uff2c\033\uff2c\034" +
    "\uff2c\035\uff2c\036\uff2c\040\151\041\155\043\uff2c\044\165" +
    "\045\uff2c\046\uff2c\047\uff2c\054\uff2c\055\uff2c\060\uff2c\062" +
    "\uff2c\001\002\000\004\066\017\001\002\000\012\042\uffdb" +
    "\054\uffdb\055\uffdb\061\uffdb\001\002\000\012\042\u012b\054" +
    "\uffc8\055\uffc8\061\u012a\001\002\000\006\054\u0135\055\uffd6" +
    "\001\002\000\012\067\uffce\070\uffce\071\uffce\072\uffce\001" +
    "\002\000\032\003\uffca\037\uffca\040\uffca\041\uffca\044\uffca" +
    "\057\uffca\063\uffca\066\uffca\067\uffca\070\uffca\071\uffca\072" +
    "\uffca\001\002\000\006\054\uffcb\055\uffcb\001\002\000\032" +
    "\003\242\037\063\040\072\041\106\044\076\057\124\063" +
    "\241\066\017\067\070\070\067\071\105\072\100\001\002" +
    "\000\006\054\uffc9\055\uffc9\001\002\000\012\067\070\070" +
    "\067\071\105\072\100\001\002\000\004\062\u0131\001\002" +
    "\000\012\042\uffcd\054\uffcd\055\uffcd\061\uffcd\001\002\000" +
    "\012\042\u012b\054\uffc8\055\uffc8\061\u012a\001\002\000\006" +
    "\054\uffcc\055\uffcc\001\002\000\004\055\uffda\001\002\000" +
    "\004\066\uffd9\001\002\000\004\066\017\001\002\000\012" +
    "\042\uffd8\054\uffd8\055\uffd8\061\uffd8\001\002\000\012\042" +
    "\u012b\054\uffc8\055\uffc8\061\u012a\001\002\000\006\054\u0135" +
    "\055\uffd6\001\002\000\004\055\uffd7\001\002\000\070\003" +
    "\uffb0\004\uffb0\006\uffb0\007\uffb0\010\uffb0\012\uffb0\014\uffb0" +
    "\015\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0\024" +
    "\uffb0\025\uffb0\026\uffb0\037\uffb0\040\uffb0\041\uffb0\044\uffb0" +
    "\057\uffb0\064\uffb0\066\uffb0\067\uffb0\070\uffb0\071\uffb0\072" +
    "\uffb0\001\002\000\070\003\uffae\004\uffae\006\054\007\060" +
    "\010\uffae\012\uffae\014\uffae\015\uffae\016\056\017\055\020" +
    "\uffae\021\057\022\uffae\024\uffae\025\uffae\026\uffae\037\uffae" +
    "\040\uffae\041\uffae\044\uffae\057\uffae\064\uffae\066\uffae\067" +
    "\uffae\070\uffae\071\uffae\072\uffae\001\002\000\056\003\uffaf" +
    "\004\uffaf\010\uffaf\012\uffaf\014\uffaf\015\uffaf\020\uffaf\022" +
    "\uffaf\024\uffaf\025\uffaf\026\uffaf\037\uffaf\040\uffaf\041\uffaf" +
    "\044\uffaf\057\uffaf\064\uffaf\066\uffaf\067\uffaf\070\uffaf\071" +
    "\uffaf\072\uffaf\001\002\000\016\006\054\007\060\016\056" +
    "\017\055\021\057\060\uffb8\001\002\000\004\066\uffb4\001" +
    "\002\000\004\060\u0147\001\002\000\006\054\u0143\060\uffb5" +
    "\001\002\000\004\060\uffb9\001\002\000\014\006\uffb7\007" +
    "\uffb7\016\uffb7\017\uffb7\021\uffb7\001\002\000\014\006\054" +
    "\007\060\016\056\017\055\021\057\001\002\000\006\054" +
    "\u0143\060\uffb5\001\002\000\004\060\uffb6\001\002\000\004" +
    "\063\uffba\001\002\000\004\066\017\001\002\000\006\054" +
    "\uffb3\060\uffb3\001\002\000\016\003\011\006\006\016\012" +
    "\017\010\021\013\023\015\001\002\000\004\002\ufff0\001" +
    "\002\000\004\066\017\001\002\000\014\042\uffe1\054\uffe1" +
    "\055\uffe1\057\uffde\061\uffe1\001\002\000\004\002\uffe7\001" +
    "\002\000\004\057\022\001\002\000\012\042\u012b\054\uffc8" +
    "\055\uffc8\061\u012a\001\002\000\006\054\u0135\055\uffd6\001" +
    "\002\000\004\055\325\001\002\000\020\003\uffe0\006\uffe0" +
    "\007\uffe0\016\uffe0\017\uffe0\021\uffe0\023\uffe0\001\002\000" +
    "\020\003\011\006\006\007\014\016\012\017\010\021\013" +
    "\023\015\001\002\000\004\002\uffdf\001\002\000\004\063" +
    "\024\001\002\000\020\002\uffc4\006\031\007\035\016\033" +
    "\017\032\021\034\023\036\001\002\000\004\002\uffdd\001" +
    "\002\000\004\066\017\001\002\000\004\002\uffeb\001\002" +
    "\000\020\003\011\006\006\007\014\016\012\017\010\021" +
    "\013\023\015\001\002\000\004\002\uffe2\001\002\000\004" +
    "\066\017\001\002\000\004\002\uffe9\001\002\000\004\066" +
    "\017\001\002\000\004\002\uffed\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u015f\000\010\002\004\003\003\004\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\077\u015e\001\001" +
    "\000\002\001\001\000\004\101\u015c\001\001\000\004\105" +
    "\u015a\001\001\000\004\100\u0158\001\001\000\004\102\u014b" +
    "\001\001\000\004\076\u0149\001\001\000\004\103\015\001" +
    "\001\000\004\007\017\001\001\000\002\001\001\000\004" +
    "\104\020\001\001\000\004\030\022\001\001\000\004\124" +
    "\u013d\001\001\000\004\033\024\001\001\000\004\127\046" +
    "\001\001\000\010\027\027\034\026\035\025\001\001\000" +
    "\002\001\001\000\004\121\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\123\036\001\001\000\002\001\001" +
    "\000\004\035\037\001\001\000\002\001\001\000\004\007" +
    "\041\001\001\000\004\122\042\001\001\000\004\030\043" +
    "\001\001\000\004\033\044\001\001\000\010\027\045\034" +
    "\026\035\025\001\001\000\002\001\001\000\012\022\047" +
    "\024\050\025\051\036\052\001\001\000\004\006\u013a\001" +
    "\001\000\004\111\u0125\001\001\000\002\001\001\000\050" +
    "\007\064\010\127\011\103\012\117\016\100\040\111\041" +
    "\074\043\101\044\126\046\070\047\114\050\107\051\121" +
    "\052\120\053\115\056\073\063\102\065\122\067\072\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\115\060\001\001\000\004\025" +
    "\061\001\001\000\002\001\001\000\004\213\u0123\001\001" +
    "\000\004\156\u011e\001\001\000\006\071\270\073\u0113\001" +
    "\001\000\004\136\u0109\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\u0108\001\001\000\004\214\u0106\001" +
    "\001\000\002\001\001\000\004\006\u0105\001\001\000\050" +
    "\007\064\010\127\011\103\012\117\016\100\040\u0104\041" +
    "\074\043\101\044\126\046\070\047\114\050\107\051\121" +
    "\052\120\053\115\056\073\063\102\065\122\067\072\001" +
    "\001\000\004\207\u0102\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\u0101\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\215\377\001\001\000\004\160\370\001\001\000\004\006" +
    "\367\001\001\000\004\162\354\001\001\000\002\001\001" +
    "\000\004\131\351\001\001\000\004\142\331\001\001\000" +
    "\004\006\330\001\001\000\002\001\001\000\004\141\326" +
    "\001\001\000\002\001\001\000\004\006\325\001\001\000" +
    "\004\006\323\001\001\000\002\001\001\000\004\174\320" +
    "\001\001\000\002\001\001\000\004\146\263\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\132\131\001\001" +
    "\000\004\057\134\001\001\000\004\135\225\001\001\000" +
    "\006\133\135\134\136\001\001\000\002\001\001\000\014" +
    "\007\064\010\144\011\222\012\117\016\100\001\001\000" +
    "\004\013\137\001\001\000\004\060\141\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\007\064\010\144\011" +
    "\145\012\117\013\143\016\100\001\001\000\004\060\220" +
    "\001\001\000\002\001\001\000\004\060\151\001\001\000" +
    "\004\205\216\001\001\000\004\202\214\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\175\212\001\001\000" +
    "\004\203\210\001\001\000\002\001\001\000\004\177\206" +
    "\001\001\000\004\212\204\001\001\000\004\211\202\001" +
    "\001\000\004\210\200\001\001\000\004\200\176\001\001" +
    "\000\004\204\174\001\001\000\004\176\172\001\001\000" +
    "\004\206\170\001\001\000\004\201\166\001\001\000\014" +
    "\007\064\010\144\011\167\012\117\016\100\001\001\000" +
    "\002\001\001\000\014\007\064\010\144\011\171\012\117" +
    "\016\100\001\001\000\002\001\001\000\014\007\064\010" +
    "\144\011\173\012\117\016\100\001\001\000\002\001\001" +
    "\000\014\007\064\010\144\011\175\012\117\016\100\001" +
    "\001\000\002\001\001\000\014\007\064\010\144\011\177" +
    "\012\117\016\100\001\001\000\002\001\001\000\014\007" +
    "\064\010\144\011\201\012\117\016\100\001\001\000\002" +
    "\001\001\000\014\007\064\010\144\011\203\012\117\016" +
    "\100\001\001\000\002\001\001\000\014\007\064\010\144" +
    "\011\205\012\117\016\100\001\001\000\002\001\001\000" +
    "\014\007\064\010\144\011\207\012\117\016\100\001\001" +
    "\000\002\001\001\000\014\007\064\010\144\011\211\012" +
    "\117\016\100\001\001\000\002\001\001\000\014\007\064" +
    "\010\144\011\213\012\117\016\100\001\001\000\002\001" +
    "\001\000\014\007\064\010\144\011\215\012\117\016\100" +
    "\001\001\000\002\001\001\000\014\007\064\010\144\011" +
    "\217\012\117\016\100\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\060\223\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\166\261\001\001\000\004\171\257\001" +
    "\001\000\004\170\255\001\001\000\004\167\253\001\001" +
    "\000\004\165\234\001\001\000\022\007\064\010\127\011" +
    "\236\012\117\014\242\016\100\044\235\045\237\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\172\243\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\244\001\001\000\004\015\245\001\001\000" +
    "\002\001\001\000\004\173\247\001\001\000\004\012\250" +
    "\001\001\000\004\015\251\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\007\064\010\127\011\236\012\117" +
    "\014\242\016\100\044\235\045\254\001\001\000\002\001" +
    "\001\000\022\007\064\010\127\011\236\012\117\014\242" +
    "\016\100\044\235\045\256\001\001\000\002\001\001\000" +
    "\022\007\064\010\127\011\236\012\117\014\242\016\100" +
    "\044\235\045\260\001\001\000\002\001\001\000\022\007" +
    "\064\010\127\011\236\012\117\014\242\016\100\044\235" +
    "\045\262\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\147\265\001\001\000\006\007\267\010\266\001\001" +
    "\000\002\001\001\000\004\071\270\001\001\000\002\001" +
    "\001\000\004\072\272\001\001\000\014\007\064\010\144" +
    "\011\273\012\117\016\100\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\150\276\001\001\000\004\055\300" +
    "\001\001\000\004\151\301\001\001\000\002\001\001\000" +
    "\004\054\302\001\001\000\002\001\001\000\004\154\313" +
    "\001\001\000\004\152\305\001\001\000\004\012\306\001" +
    "\001\000\002\001\001\000\004\153\310\001\001\000\050" +
    "\007\064\010\127\011\103\012\117\016\100\040\311\041" +
    "\074\043\101\044\126\046\070\047\114\050\107\051\121" +
    "\052\120\053\115\056\073\063\102\065\122\067\072\001" +
    "\001\000\004\054\312\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\155\315\001\001\000\050\007\064\010" +
    "\127\011\103\012\117\016\100\040\316\041\074\043\101" +
    "\044\126\046\070\047\114\050\107\051\121\052\120\053" +
    "\115\056\073\063\102\065\122\067\072\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\007\064\010\144\011" +
    "\321\012\117\016\100\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\007\064\010\144\011\327\012\117\016\100" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\143\333\001\001\000\020\007\064\010\127" +
    "\011\103\012\117\016\100\043\334\044\126\001\001\000" +
    "\002\001\001\000\004\144\336\001\001\000\050\007\064" +
    "\010\127\011\103\012\117\016\100\041\337\042\340\043" +
    "\101\044\126\046\070\047\114\050\107\051\121\052\120" +
    "\053\115\056\073\063\102\065\122\067\072\001\001\000" +
    "\002\001\001\000\004\064\345\001\001\000\004\164\342" +
    "\001\001\000\050\007\064\010\127\011\103\012\117\016" +
    "\100\040\343\041\074\043\101\044\126\046\070\047\114" +
    "\050\107\051\121\052\120\053\115\056\073\063\102\065" +
    "\122\067\072\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\145\347\001\001\000\050\007" +
    "\064\010\127\011\103\012\117\016\100\041\337\042\350" +
    "\043\101\044\126\046\070\047\114\050\107\051\121\052" +
    "\120\053\115\056\073\063\102\065\122\067\072\001\001" +
    "\000\002\001\001\000\004\006\352\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\070\356\001\001\000\004" +
    "\163\360\001\001\000\050\007\064\010\127\011\103\012" +
    "\117\016\100\041\337\042\357\043\101\044\126\046\070" +
    "\047\114\050\107\051\121\052\120\053\115\056\073\063" +
    "\102\065\122\067\072\001\001\000\002\001\001\000\020" +
    "\007\064\010\127\011\103\012\117\016\100\043\361\044" +
    "\126\001\001\000\004\006\362\001\001\000\020\007\064" +
    "\010\127\011\103\012\117\016\100\043\363\044\126\001" +
    "\001\000\004\006\364\001\001\000\020\007\064\010\127" +
    "\011\103\012\117\016\100\043\365\044\126\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\066\372\001\001\000\004\161\374\001\001\000\050\007" +
    "\064\010\127\011\103\012\117\016\100\041\337\042\373" +
    "\043\101\044\126\046\070\047\114\050\107\051\121\052" +
    "\120\053\115\056\073\063\102\065\122\067\072\001\001" +
    "\000\002\001\001\000\020\007\064\010\127\011\103\012" +
    "\117\016\100\043\375\044\126\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\007\064\010\144\011\u0100\012" +
    "\117\016\100\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\007\064\010\144\011\u0103\012\117\016\100\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\007\064\010\144\011\u0107\012\117\016\100\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\061\u010c" +
    "\001\001\000\004\137\u010f\001\001\000\004\140\u010d\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\007\267\010\u0110\062\u0111\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\074\u0115\001\001\000\016\007\064\010\144\011" +
    "\u0117\012\117\016\100\017\u0116\001\001\000\002\001\001" +
    "\000\004\020\u0118\001\001\000\002\001\001\000\004\075" +
    "\u011a\001\001\000\014\007\064\010\144\011\u011b\012\117" +
    "\016\100\001\001\000\004\020\u011c\001\001\000\002\001" +
    "\001\000\002\001\001\000\050\007\064\010\127\011\103" +
    "\012\117\016\100\041\337\042\u011f\043\101\044\126\046" +
    "\070\047\114\050\107\051\121\052\120\053\115\056\073" +
    "\063\102\065\122\067\072\001\001\000\002\001\001\000" +
    "\004\157\u0121\001\001\000\004\066\u0122\001\001\000\002" +
    "\001\001\000\014\007\064\010\144\011\u0124\012\117\016" +
    "\100\001\001\000\002\001\001\000\004\007\u0126\001\001" +
    "\000\004\112\u0127\001\001\000\006\021\u0128\026\u012b\001" +
    "\001\000\004\023\u0133\001\001\000\004\116\u012e\001\001" +
    "\000\004\120\u012c\001\001\000\002\001\001\000\022\007" +
    "\064\010\127\011\236\012\117\014\242\016\100\044\235" +
    "\045\u012d\001\001\000\002\001\001\000\004\012\u012f\001" +
    "\001\000\002\001\001\000\004\117\u0131\001\001\000\006" +
    "\021\u0132\026\u012b\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\113\u0135\001\001\000\004\007\u0136\001\001" +
    "\000\004\114\u0137\001\001\000\006\021\u0138\026\u012b\001" +
    "\001\000\004\023\u0139\001\001\000\002\001\001\000\004" +
    "\130\u013b\001\001\000\012\022\047\024\050\025\051\036" +
    "\u013c\001\001\000\002\001\001\000\012\024\u013e\025\051" +
    "\031\u013f\037\u0140\001\001\000\004\126\u0147\001\001\000" +
    "\002\001\001\000\004\032\u0141\001\001\000\002\001\001" +
    "\000\004\125\u0143\001\001\000\010\024\u013e\025\051\037" +
    "\u0144\001\001\000\004\032\u0145\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\u0148\001\001\000\002\001" +
    "\001\000\004\004\u014a\001\001\000\002\001\001\000\006" +
    "\005\u014d\007\u014c\001\001\000\006\106\u014f\110\u014e\001" +
    "\001\000\002\001\001\000\004\030\u0155\001\001\000\006" +
    "\021\u0150\026\u012b\001\001\000\004\023\u0151\001\001\000" +
    "\004\006\u0152\001\001\000\004\107\u0153\001\001\000\006" +
    "\003\u0154\004\006\001\001\000\002\001\001\000\004\033" +
    "\u0156\001\001\000\010\027\u0157\034\026\035\025\001\001" +
    "\000\002\001\001\000\006\005\u0159\007\u014c\001\001\000" +
    "\002\001\001\000\006\003\u015b\004\006\001\001\000\002" +
    "\001\001\000\006\005\u015d\007\u014c\001\001\000\002\001" +
    "\001\000\006\005\u015f\007\u014c\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("Error sintáctico en la fila " + fila + ", columna " + columna + ": Token inesperado <" + lexema + ">");
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("¡No se pudo recuperar!");
        System.out.println("Terror sintáctico en la fila " + fila + ", columna " + columna + ": Token inesperado <" + lexema + ">");
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {


    //Esta clase contiene tablas y pilas semanticas
    private Semanter sm = new Semanter();

    private void print(String msg) {
        //System.out.println("Parser: " + msg);
    }

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // EXP ::= LITERAL 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // EXP ::= LAMFUNC 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // EXP ::= VAR 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // EXP ::= smbmenosmenos NT$84 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$84
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // NT$84 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 sm.guardar_operador(e); print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$84",139, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // EXP ::= EXP smbmenosmenos 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 sm.guardar_operador(e); print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // EXP ::= smbmasmas NT$83 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$83
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // NT$83 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 sm.guardar_operador(e); print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$83",138, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // EXP ::= EXP smbmasmas 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 sm.guardar_operador(e); print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // EXP ::= smbadmiracion NT$82 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$82
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // NT$82 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 sm.guardar_operador(e); print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$82",137, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // EXP ::= EXP smbdivisionentera NT$81 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$81
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // NT$81 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 sm.guardar_operador(e); print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$81",136, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // EXP ::= EXP smbdivision NT$80 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$80
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // NT$80 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 sm.guardar_operador(e); print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$80",135, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // EXP ::= EXP smbmultiplicacion NT$79 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$79
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // NT$79 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 sm.guardar_operador(e); print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$79",134, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // EXP ::= smbmenos NT$78 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$78
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // NT$78 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 sm.guardar_operador(e); print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$78",133, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // EXP ::= EXP smbmenos NT$77 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$77
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // NT$77 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 sm.guardar_operador(e); print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$77",132, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // EXP ::= EXP smbmas NT$76 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$76
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // NT$76 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 sm.guardar_operador(e); print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$76",131, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // EXP ::= EXP smband NT$75 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$75
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // NT$75 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 sm.guardar_operador(e); print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$75",130, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // EXP ::= EXP smbor NT$74 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$74
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // NT$74 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 sm.guardar_operador(e); print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$74",129, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // EXP ::= EXP smbdiferente NT$73 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$73
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // NT$73 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 sm.guardar_operador(e); print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$73",128, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // EXP ::= EXP smbmenor NT$72 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$72
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // NT$72 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 sm.guardar_operador(e); print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$72",127, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // EXP ::= EXP smbmenorigual NT$71 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$71
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // NT$71 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 sm.guardar_operador(e); print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$71",126, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // EXP ::= EXP smbmayor NT$70 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$70
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // NT$70 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 sm.guardar_operador(e); print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$70",125, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // EXP ::= EXP smbmayorigual NT$69 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$69
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // NT$69 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 sm.guardar_operador(e); print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$69",124, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // EXP ::= EXP smbigualigual NT$68 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$68
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // NT$68 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 sm.guardar_operador(e); print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$68",123, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // EXP ::= smbparentabrir NT$67 EXP smbparentcerrar 
            {
              String RESULT =null;
              // propagate RESULT from NT$67
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 sm.guardar_operador(c); print(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // NT$67 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 sm.guardar_operador(e); print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$67",122, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // STRING ::= smbstring 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STRING",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // ARRAYLIST2 ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARRAYLIST2",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // ARRAYLIST2 ::= smbcoma NT$66 LITERAL ARRAYLIST2 
            {
              String RESULT =null;
              // propagate RESULT from NT$66
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARRAYLIST2",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // NT$66 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$66",121, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // ARRAYLIST ::= smbllaveabrir NT$65 LITERAL ARRAYLIST2 smbllavecerrar 
            {
              String RESULT =null;
              // propagate RESULT from NT$65
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARRAYLIST",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // NT$65 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$65",120, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // LITERAL ::= smboct 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 sm.guardar_literal(e); print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // LITERAL ::= smbhex 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 sm.guardar_literal(e); print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // LITERAL ::= smbdec 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 sm.guardar_literal(e); print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // LITERAL ::= smbcharlit 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 sm.guardar_literal(e); print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // EXPASIARR ::= error 
            {
              String RESULT =null;
		 print("Error en la asignacion"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPASIARR",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // EXPASIARR ::= EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPASIARR",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // EXPASIARR ::= ASIGN 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPASIARR",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // EXPASIARR ::= ARRAYLIST 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPASIARR",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // ASIGN ::= VAR smbdivisionigual NT$64 EXPASIARR 
            {
              String RESULT =null;
              // propagate RESULT from NT$64
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGN",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // NT$64 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$64",119, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // ASIGN ::= VAR smbmultiplicacionigual NT$63 EXPASIARR 
            {
              String RESULT =null;
              // propagate RESULT from NT$63
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGN",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // NT$63 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$63",118, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // ASIGN ::= VAR smbmenosigual NT$62 EXPASIARR 
            {
              String RESULT =null;
              // propagate RESULT from NT$62
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGN",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // NT$62 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$62",117, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // ASIGN ::= VAR smbmasigual NT$61 EXPASIARR 
            {
              String RESULT =null;
              // propagate RESULT from NT$61
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGN",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // NT$61 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$61",116, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // ASIGN ::= VAR smbigual NT$60 EXPASIARR 
            {
              String RESULT =null;
              // propagate RESULT from NT$60
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGN",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // NT$60 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$60",115, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // ASIGOEXP ::= EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGOEXP",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // ASIGOEXP ::= ASIGN 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGOEXP",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // GENBLOCK ::= INSTRUC 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GENBLOCK",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // GENBLOCK ::= smbllaveabrir NT$59 INSTLIST smbllavecerrar 
            {
              String RESULT =null;
              // propagate RESULT from NT$59
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GENBLOCK",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // NT$59 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$59",114, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // FORPARAM ::= smbparentabrir NT$58 ASIGOEXP PUCOMA ASIGOEXP PUCOMA ASIGOEXP smbparentcerrar 
            {
              String RESULT =null;
              // propagate RESULT from NT$58
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FORPARAM",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // NT$58 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$58",113, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // FOR ::= smbfor NT$57 FORPARAM GENBLOCK 
            {
              String RESULT =null;
              // propagate RESULT from NT$57
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // NT$57 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$57",112, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // WHLPARAM ::= smbparentabrir NT$56 ASIGOEXP smbparentcerrar 
            {
              String RESULT =null;
              // propagate RESULT from NT$56
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 sm.evaluarWhile(); print(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WHLPARAM",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // NT$56 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$56",111, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // WHILE ::= smbwhile NT$55 WHLPARAM GENBLOCK 
            {
              String RESULT =null;
              // propagate RESULT from NT$55
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WHILE",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // NT$55 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 sm.inicioWhile(); print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$55",110, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // DOWHILE ::= smbdo NT$53 GENBLOCK smbwhile NT$54 WHLPARAM 
            {
              String RESULT =null;
              // propagate RESULT from NT$54
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DOWHILE",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // NT$54 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$54",109, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // NT$53 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$53",108, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // SWTHCS ::= smbdefault NT$51 smbdospuntos NT$52 INSTLIST 
            {
              String RESULT =null;
              // propagate RESULT from NT$52
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWTHCS",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // NT$52 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$52",107, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // NT$51 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$51",106, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // SWTHCS ::= smbcase NT$49 LITERAL smbdospuntos NT$50 INSTLIST SWTHCS 
            {
              String RESULT =null;
              // propagate RESULT from NT$50
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWTHCS",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // NT$50 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$50",105, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // NT$49 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$49",104, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // SWTHBLOCK ::= smbllaveabrir NT$48 SWTHCS smbllavecerrar 
            {
              String RESULT =null;
              // propagate RESULT from NT$48
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWTHBLOCK",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // NT$48 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$48",103, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // SWITCH ::= smbswitch NT$45 smbparentabrir NT$46 VAR smbparentcerrar NT$47 SWTHBLOCK 
            {
              String RESULT =null;
              // propagate RESULT from NT$47
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCH",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // NT$47 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$47",102, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // NT$46 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$46",101, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // NT$45 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$45",100, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // IFELSE ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IFELSE",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // IFELSE ::= smbelse NT$44 GENBLOCK 
            {
              String RESULT =null;
              // propagate RESULT from NT$44
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IFELSE",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // NT$44 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 sm.inicioElse(); print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$44",99, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // IF ::= smbif NT$41 smbparentabrir NT$42 ASIGOEXP smbparentcerrar NT$43 GENBLOCK IFELSE 
            {
              String RESULT =null;
              // propagate RESULT from NT$43
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // NT$43 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 sm.evaluarIF(); print(o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$43",98, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // NT$42 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$42",97, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // NT$41 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 sm.inicioIF(); print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$41",96, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // CONTINUE ::= smbcontinue 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTINUE",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // BREAK ::= smbbreak 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BREAK",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // RETURN ::= smbreturn NT$40 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$40
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // NT$40 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$40",95, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // RETURN ::= smbreturn 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // RDPARAM1 ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RDPARAM1",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // RDPARAM1 ::= VAR 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RDPARAM1",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // RDPARAM ::= error NT$39 smbparentcerrar 
            {
              String RESULT =null;
              // propagate RESULT from NT$39
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RDPARAM",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // NT$39 ::= 
            {
              String RESULT =null;
 print("Mas parametros de los esperados"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$39",94, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // RDPARAM ::= smbparentabrir NT$38 RDPARAM1 smbparentcerrar 
            {
              String RESULT =null;
              // propagate RESULT from NT$38
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RDPARAM",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // NT$38 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$38",93, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // READ ::= smbread NT$37 RDPARAM 
            {
              String RESULT =null;
              // propagate RESULT from NT$37
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // NT$37 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$37",92, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // WRTPARAM1 ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WRTPARAM1",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // WRTPARAM1 ::= smbcoma STRING WRTPARAM1 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WRTPARAM1",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // WRTPARAM1 ::= smbcoma EXP WRTPARAM1 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WRTPARAM1",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // WRTPARAM ::= error NT$36 smbparentcerrar 
            {
              String RESULT =null;
              // propagate RESULT from NT$36
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WRTPARAM",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // NT$36 ::= 
            {
              String RESULT =null;
 print("Debe venir al menos un parametro"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$36",91, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // WRTPARAM ::= smbparentabrir NT$35 STRING WRTPARAM1 smbparentcerrar 
            {
              String RESULT =null;
              // propagate RESULT from NT$35
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WRTPARAM",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // NT$35 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$35",90, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // WRTPARAM ::= smbparentabrir NT$34 EXP WRTPARAM1 smbparentcerrar 
            {
              String RESULT =null;
              // propagate RESULT from NT$34
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WRTPARAM",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // NT$34 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$34",89, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // WRITE ::= smbwrite NT$33 WRTPARAM 
            {
              String RESULT =null;
              // propagate RESULT from NT$33
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WRITE",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // NT$33 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$33",88, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // INSTRUC ::= error NT$32 PUCOMA 
            {
              String RESULT =null;
              // propagate RESULT from NT$32
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUC",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // NT$32 ::= 
            {
              String RESULT =null;
 print("Error en la instruccion"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$32",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // INSTRUC ::= IF 
            {
              String RESULT =null;
		 sm.finIF(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUC",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // INSTRUC ::= SWITCH 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUC",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // INSTRUC ::= DOWHILE PUCOMA 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUC",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // INSTRUC ::= WHILE 
            {
              String RESULT =null;
		 sm.finWhile(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUC",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // INSTRUC ::= FOR 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUC",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // INSTRUC ::= WRITE PUCOMA 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUC",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // INSTRUC ::= READ PUCOMA 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUC",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // INSTRUC ::= RETURN PUCOMA 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUC",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // INSTRUC ::= BREAK PUCOMA 
            {
              String RESULT =null;
		 sm.guardar_break("Bonjour break"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUC",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // INSTRUC ::= CONTINUE PUCOMA 
            {
              String RESULT =null;
		 sm.guardar_continue("Bonjour contiene"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUC",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // INSTRUC ::= ASIGOEXP PUCOMA 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUC",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // INSTLIST ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTLIST",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // INSTLIST ::= INSTRUC INSTLIST 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTLIST",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // FUNVARDEC ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNVARDEC",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // FUNVARDEC ::= VARDECL PUCOMA NT$31 FUNVARDEC 
            {
              String RESULT =null;
              // propagate RESULT from NT$31
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNVARDEC",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NT$31 ::= 
            {
              String RESULT =null;
 sm.declarar_variables(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$31",86, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // FUNCBLOCK ::= smbllaveabrir NT$30 FUNVARDEC INSTLIST smbllavecerrar 
            {
              String RESULT =null;
              // propagate RESULT from NT$30
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 sm.fin_funcion(); print(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCBLOCK",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$30 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$30",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // FUNPARDEC ::= VARTIPO NT$29 IDENTIF 
            {
              String RESULT =null;
              // propagate RESULT from NT$29
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 sm.guardar_parametros_id(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNPARDEC",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$29 ::= 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 sm.guardar_tipo(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$29",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // FUNPARAM1 ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNPARAM1",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // FUNPARAM1 ::= smbcoma NT$28 FUNPARDEC FUNPARAM1 
            {
              String RESULT =null;
              // propagate RESULT from NT$28
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNPARAM1",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // NT$28 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$28",83, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // FUNPARAM ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNPARAM",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // FUNPARAM ::= FUNPARDEC FUNPARAM1 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNPARAM",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // FUNCPARAM ::= smbparentabrir NT$27 FUNPARAM smbparentcerrar 
            {
              String RESULT =null;
              // propagate RESULT from NT$27
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 sm.declarar_funcion(); print(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCPARAM",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NT$27 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$27",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // FUNCTIPO1 ::= smbvoid 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTIPO1",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // FUNCTIPO1 ::= smbshort 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTIPO1",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // FUNCTIPO1 ::= smblong 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTIPO1",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // FUNCTIPO1 ::= smbint 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTIPO1",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // FUNCTIPO1 ::= smbchar 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTIPO1",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // FUNCTIPO ::= FUNCTIPO1 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTIPO",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // FUNCTIPO ::= smbconst NT$26 FUNCTIPO1 
            {
              String RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTIPO",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // NT$26 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$26",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FUNCDEFIN ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCDEFIN",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // FUNCDEFIN ::= FUNCTIPO NT$24 IDENTIF NT$25 FUNCPARAM FUNCBLOCK FUNCDEFIN 
            {
              String RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCDEFIN",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NT$25 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 sm.guardar_funcion(i, true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$25",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NT$24 ::= 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 sm.guardar_tipo(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$24",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // VARASIG ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARASIG",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // VARASIG ::= smbigual NT$23 EXPASIARR 
            {
              String RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARASIG",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$23 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$23",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // VARARRAY ::= VARASIG 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARARRAY",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // VARARRAY ::= smbcuadradoabrir NT$21 LITERAL smbcuadradocerrar NT$22 VARARRAY 
            {
              String RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARARRAY",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$22 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$22",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$21 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$21",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // VARTIPO1 ::= smbshort 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARTIPO1",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // VARTIPO1 ::= smblong 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARTIPO1",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // VARTIPO1 ::= smbint 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARTIPO1",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // VARTIPO1 ::= smbchar 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARTIPO1",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // VARTIPO ::= VARTIPO1 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARTIPO",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // VARTIPO ::= smbconst NT$20 VARTIPO1 
            {
              String RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARTIPO",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$20 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$20",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // VARDECL2 ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARDECL2",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // VARDECL2 ::= smbcoma NT$18 IDENTIF NT$19 VARARRAY VARDECL2 
            {
              String RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARDECL2",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$19 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 sm.guardar_id(i, true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$19",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$18 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$18",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // VARDECL ::= VARTIPO NT$16 IDENTIF NT$17 VARARRAY VARDECL2 
            {
              String RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARDECL",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$17 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 sm.guardar_id(i, true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$17",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$16 ::= 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 sm.guardar_tipo(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$16",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // VAROFUNC2 ::= IDENTIF NT$15 FUNCPARAM FUNCBLOCK FUNCDEFIN 
            {
              String RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAROFUNC2",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$15 ::= 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 sm.guardar_funcion(i, true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$15",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // VAROFUNC2 ::= IDENTIF NT$13 VARARRAY VARDECL2 PUCOMA NT$14 VAROFUNC 
            {
              String RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAROFUNC2",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$14 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
 sm.declarar_variables(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$14",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$13 ::= 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 sm.guardar_id(i, true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$13",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // VAROFUNC1 ::= error NT$12 VAROFUNC 
            {
              String RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAROFUNC1",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$12 ::= 
            {
              String RESULT =null;
 print("Error en la declaración"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$12",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // VAROFUNC1 ::= smbvoid NT$10 IDENTIF NT$11 FUNCPARAM FUNCBLOCK FUNCDEFIN 
            {
              String RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAROFUNC1",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$11 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 sm.guardar_funcion(i, true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$11",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$10 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 sm.guardar_tipo(e); print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$10",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VAROFUNC1 ::= smbshort NT$9 VAROFUNC2 
            {
              String RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAROFUNC1",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$9 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 sm.guardar_tipo(e); print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$9",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VAROFUNC1 ::= smblong NT$8 VAROFUNC2 
            {
              String RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAROFUNC1",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$8 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 sm.guardar_tipo(e); print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$8",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VAROFUNC1 ::= smbint NT$7 VAROFUNC2 
            {
              String RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAROFUNC1",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$7 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 sm.guardar_tipo(e); print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$7",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VAROFUNC1 ::= smbchar NT$6 VAROFUNC2 
            {
              String RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAROFUNC1",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$6 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 sm.guardar_tipo(e); print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$6",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VAROFUNC ::= VAROFUNC1 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAROFUNC",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VAROFUNC ::= smbconst NT$5 VAROFUNC1 
            {
              String RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAROFUNC",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$5 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$5",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // LAMFUNCP2 ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LAMFUNCP2",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // LAMFUNCP2 ::= smbcoma NT$4 EXP LAMFUNCP2 
            {
              String RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LAMFUNCP2",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$4 ::= 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LAMFUNCP ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LAMFUNCP",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LAMFUNCP ::= EXP LAMFUNCP2 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LAMFUNCP",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LAMFUNC ::= IDENTIF NT$2 smbparentabrir NT$3 LAMFUNCP smbparentcerrar 
            {
              String RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 sm.evaluar_funcion(); print(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LAMFUNC",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$3 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$2 ::= 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 sm.guardar_funcion(i, false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VAR ::= IDENTIF NT$0 smbcuadradoabrir NT$1 EXP smbcuadradocerrar 
            {
              String RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$1 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$0 ::= 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 sm.guardar_id(i, false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // VAR ::= IDENTIF 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 sm.guardar_id(i, false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // IDENTIF ::= smbidentificador 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDENTIF",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PUCOMA ::= smbpuntocoma 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PUCOMA",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= VAROFUNC 
            {
              String RESULT =null;
		 sm.printTablaSimbolos(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

