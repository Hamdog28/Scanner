
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Nov 28 14:48:45 CST 2017
//----------------------------------------------------

package iiiproyecto;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Nov 28 14:48:45 CST 2017
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\326\000\002\002\004\000\002\002\003\000\002\006" +
    "\003\000\002\007\003\000\002\010\003\000\002\071\002" +
    "\000\002\010\007\000\002\072\002\000\002\016\007\000" +
    "\002\017\004\000\002\017\002\000\002\073\002\000\002" +
    "\020\006\000\002\020\002\000\002\074\002\000\002\003" +
    "\005\000\002\003\003\000\002\075\002\000\002\004\006" +
    "\000\002\076\002\000\002\004\006\000\002\077\002\000" +
    "\002\004\006\000\002\100\002\000\002\004\006\000\002" +
    "\101\002\000\002\004\010\000\002\102\002\000\002\004" +
    "\005\000\002\005\006\000\002\005\005\000\002\103\002" +
    "\000\002\104\002\000\002\022\010\000\002\105\002\000" +
    "\002\106\002\000\002\023\010\000\002\023\002\000\002" +
    "\107\002\000\002\024\005\000\002\024\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\110\002\000\002\111\002\000\002\021\010\000" +
    "\002\021\003\000\002\112\002\000\002\026\005\000\002" +
    "\026\002\000\002\027\007\000\002\027\002\000\002\113" +
    "\002\000\002\034\005\000\002\034\003\000\002\035\003" +
    "\000\002\035\003\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\114\002\000\002\030\006\000\002" +
    "\031\004\000\002\031\002\000\002\115\002\000\002\032" +
    "\006\000\002\032\002\000\002\037\004\000\002\116\002" +
    "\000\002\033\007\000\002\117\002\000\002\036\006\000" +
    "\002\036\002\000\002\040\004\000\002\040\002\000\002" +
    "\041\004\000\002\041\004\000\002\041\004\000\002\041" +
    "\004\000\002\041\004\000\002\041\004\000\002\041\003" +
    "\000\002\041\003\000\002\041\004\000\002\041\003\000" +
    "\002\041\003\000\002\120\002\000\002\041\005\000\002" +
    "\121\002\000\002\056\005\000\002\122\002\000\002\057" +
    "\007\000\002\123\002\000\002\057\007\000\002\124\002" +
    "\000\002\057\005\000\002\060\005\000\002\060\005\000" +
    "\002\060\002\000\002\125\002\000\002\051\005\000\002" +
    "\126\002\000\002\061\006\000\002\127\002\000\002\061" +
    "\005\000\002\062\003\000\002\062\002\000\002\050\003" +
    "\000\002\130\002\000\002\050\005\000\002\047\003\000" +
    "\002\046\003\000\002\131\002\000\002\132\002\000\002" +
    "\133\002\000\002\063\013\000\002\134\002\000\002\064" +
    "\005\000\002\064\002\000\002\135\002\000\002\136\002" +
    "\000\002\137\002\000\002\053\012\000\002\140\002\000" +
    "\002\055\006\000\002\141\002\000\002\142\002\000\002" +
    "\054\011\000\002\143\002\000\002\144\002\000\002\054" +
    "\007\000\002\145\002\000\002\146\002\000\002\052\010" +
    "\000\002\147\002\000\002\065\006\000\002\150\002\000" +
    "\002\066\006\000\002\151\002\000\002\067\006\000\002" +
    "\152\002\000\002\070\012\000\002\153\002\000\002\042" +
    "\006\000\002\042\003\000\002\043\003\000\002\043\003" +
    "\000\002\154\002\000\002\044\006\000\002\155\002\000" +
    "\002\044\006\000\002\156\002\000\002\044\006\000\002" +
    "\157\002\000\002\044\006\000\002\160\002\000\002\044" +
    "\006\000\002\045\003\000\002\045\003\000\002\045\003" +
    "\000\002\045\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\161\002\000\002" +
    "\014\007\000\002\162\002\000\002\015\006\000\002\015" +
    "\002\000\002\013\003\000\002\163\002\000\002\011\006" +
    "\000\002\164\002\000\002\011\006\000\002\165\002\000" +
    "\002\011\006\000\002\166\002\000\002\011\006\000\002" +
    "\167\002\000\002\011\006\000\002\170\002\000\002\011" +
    "\006\000\002\171\002\000\002\011\006\000\002\172\002" +
    "\000\002\011\006\000\002\173\002\000\002\011\006\000" +
    "\002\174\002\000\002\011\006\000\002\175\002\000\002" +
    "\011\006\000\002\176\002\000\002\011\005\000\002\177" +
    "\002\000\002\011\006\000\002\200\002\000\002\011\006" +
    "\000\002\201\002\000\002\011\006\000\002\202\002\000" +
    "\002\011\005\000\002\011\004\000\002\203\002\000\002" +
    "\011\005\000\002\011\004\000\002\204\002\000\002\011" +
    "\005\000\002\011\003\000\002\011\003\000\002\011\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0159\000\020\003\011\006\007\007\014\016\012\017" +
    "\010\021\013\023\015\001\002\000\004\002\000\001\002" +
    "\000\004\002\u015b\001\002\000\004\002\ufff1\001\002\000" +
    "\004\066\ufff0\001\002\000\004\066\uffec\001\002\000\020" +
    "\003\uffe6\006\uffe6\007\uffe6\016\uffe6\017\uffe6\021\uffe6\023" +
    "\uffe6\001\002\000\004\066\uffee\001\002\000\004\066\uffea" +
    "\001\002\000\016\003\ufff3\006\ufff3\016\ufff3\017\ufff3\021" +
    "\ufff3\023\ufff3\001\002\000\004\066\uffe8\001\002\000\004" +
    "\066\017\001\002\000\066\027\ufffe\030\ufffe\031\ufffe\032" +
    "\ufffe\033\ufffe\034\ufffe\035\ufffe\036\ufffe\040\ufffe\041\ufffe" +
    "\042\ufffe\043\ufffe\044\ufffe\045\ufffe\046\ufffe\047\ufffe\050" +
    "\ufffe\051\ufffe\052\ufffe\053\ufffe\054\ufffe\055\ufffe\057\ufffe" +
    "\060\ufffe\061\ufffe\062\ufffe\001\002\000\004\057\021\001" +
    "\002\000\016\006\uffc3\007\uffc3\016\uffc3\017\uffc3\021\uffc3" +
    "\060\uffc3\001\002\000\004\063\023\001\002\000\070\003" +
    "\uffbb\004\uffbb\006\uffbb\007\uffbb\010\uffbb\012\uffbb\014\uffbb" +
    "\015\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb\024" +
    "\uffbb\025\uffbb\026\uffbb\037\uffbb\040\uffbb\041\uffbb\044\uffbb" +
    "\057\uffbb\064\uffbb\066\uffbb\067\uffbb\070\uffbb\071\uffbb\072" +
    "\uffbb\001\002\000\020\002\uffcc\006\030\007\034\016\032" +
    "\017\031\021\033\023\035\001\002\000\004\066\uffc9\001" +
    "\002\000\004\066\017\001\002\000\004\002\uffe7\001\002" +
    "\000\004\066\uffc8\001\002\000\004\066\uffc6\001\002\000" +
    "\004\066\uffc7\001\002\000\004\066\uffc5\001\002\000\014" +
    "\006\uffcb\016\uffcb\017\uffcb\021\uffcb\023\uffcb\001\002\000" +
    "\004\066\uffc4\001\002\000\014\006\030\016\032\017\031" +
    "\021\033\023\035\001\002\000\004\066\uffca\001\002\000" +
    "\004\057\021\001\002\000\004\063\023\001\002\000\020" +
    "\002\uffcc\006\030\007\034\016\032\017\031\021\033\023" +
    "\035\001\002\000\004\002\uffcd\001\002\000\070\003\uffb7" +
    "\004\uffb7\006\050\007\055\010\uffb7\012\uffb7\014\uffb7\015" +
    "\uffb7\016\053\017\052\020\uffb7\021\054\022\uffb7\024\uffb7" +
    "\025\uffb7\026\uffb7\037\uffb7\040\uffb7\041\uffb7\044\uffb7\057" +
    "\uffb7\064\uffb7\066\uffb7\067\uffb7\070\uffb7\071\uffb7\072\uffb7" +
    "\001\002\000\004\055\321\001\002\000\004\066\uffe2\001" +
    "\002\000\004\066\uffd9\001\002\000\004\066\uffd8\001\002" +
    "\000\056\003\110\004\074\010\122\012\061\014\106\015" +
    "\111\020\114\022\123\024\104\025\063\026\126\037\060" +
    "\040\067\041\103\044\073\057\121\064\uffb5\066\017\067" +
    "\065\070\064\071\102\072\075\001\002\000\004\066\uffd6" +
    "\001\002\000\004\066\uffd7\001\002\000\004\066\uffd5\001" +
    "\002\000\012\006\uffdb\016\uffdb\017\uffdb\021\uffdb\001\002" +
    "\000\012\006\050\016\053\017\052\021\054\001\002\000" +
    "\004\066\uffda\001\002\000\026\037\uff36\040\uff36\041\uff36" +
    "\044\uff36\057\uff36\066\uff36\067\uff36\070\uff36\071\uff36\072" +
    "\uff36\001\002\000\056\003\uff7c\004\uff7c\010\uff7c\012\uff7c" +
    "\014\uff7c\015\uff7c\020\uff7c\022\uff7c\024\uff7c\025\uff7c\026" +
    "\uff7c\037\uff7c\040\uff7c\041\uff7c\044\uff7c\057\uff7c\063\uff7c" +
    "\066\uff7c\067\uff7c\070\uff7c\071\uff7c\072\uff7c\001\002\000" +
    "\066\027\ufffd\030\ufffd\031\ufffd\032\ufffd\033\ufffd\034\ufffd" +
    "\035\ufffd\036\ufffd\040\ufffd\041\ufffd\042\ufffd\043\ufffd\044" +
    "\ufffd\045\ufffd\046\ufffd\047\ufffd\050\ufffd\051\ufffd\052\ufffd" +
    "\053\ufffd\054\ufffd\055\ufffd\057\u0110\060\ufffd\061\266\062" +
    "\ufffd\001\002\000\006\003\uff9c\057\uff9c\001\002\000\054" +
    "\027\uff5d\030\uff5d\031\uff5d\032\uff5d\033\uff5d\034\uff5d\035" +
    "\uff5d\036\uff5d\040\uff5d\041\uff5d\043\uff5d\044\uff5d\045\uff5d" +
    "\046\uff5d\047\uff5d\054\uff5d\055\uff5d\056\uff5d\060\uff5d\062" +
    "\uff5d\064\uff5d\001\002\000\054\027\uff5e\030\uff5e\031\uff5e" +
    "\032\uff5e\033\uff5e\034\uff5e\035\uff5e\036\uff5e\040\uff5e\041" +
    "\uff5e\043\uff5e\044\uff5e\045\uff5e\046\uff5e\047\uff5e\054\uff5e" +
    "\055\uff5e\056\uff5e\060\uff5e\062\uff5e\064\uff5e\001\002\000" +
    "\004\055\321\001\002\000\026\037\uff33\040\uff33\041\uff33" +
    "\044\uff33\057\uff33\066\uff33\067\uff33\070\uff33\071\uff33\072" +
    "\uff33\001\002\000\064\003\uffae\004\uffae\005\uffae\010\uffae" +
    "\011\uffae\012\uffae\013\uffae\014\uffae\015\uffae\020\uffae\022" +
    "\uffae\024\uffae\025\uffae\026\uffae\037\uffae\040\uffae\041\uffae" +
    "\044\uffae\057\uffae\064\uffae\066\uffae\067\uffae\070\uffae\071" +
    "\uffae\072\uffae\001\002\000\004\055\321\001\002\000\062" +
    "\003\110\004\074\005\uffb5\010\122\011\uffb5\012\061\014" +
    "\106\015\111\020\114\022\123\024\104\025\063\026\126" +
    "\037\060\040\067\041\103\044\073\057\121\064\uffb5\066" +
    "\017\067\065\070\064\071\102\072\075\001\002\000\026" +
    "\037\uff3e\040\uff3e\041\uff3e\044\uff3e\057\uff3e\066\uff3e\067" +
    "\uff3e\070\uff3e\071\uff3e\072\uff3e\001\002\000\004\055\uff91" +
    "\001\002\000\054\027\uff5b\030\uff5b\031\uff5b\032\uff5b\033" +
    "\uff5b\034\uff5b\035\uff5b\036\uff5b\040\uff5b\041\uff5b\043\uff5b" +
    "\044\uff5b\045\uff5b\046\uff5b\047\uff5b\054\uff5b\055\uff5b\056" +
    "\uff5b\060\uff5b\062\uff5b\064\uff5b\001\002\000\050\027\uff2d" +
    "\030\uff2d\031\uff2d\032\uff2d\033\uff2d\034\uff2d\035\uff2d\036" +
    "\uff2d\040\uff2d\041\uff2d\043\uff2d\044\uff2d\045\uff2d\046\uff2d" +
    "\047\uff2d\054\uff2d\055\uff2d\060\uff2d\062\uff2d\001\002\000" +
    "\004\055\321\001\002\000\064\003\uffaa\004\uffaa\005\uffaa" +
    "\010\uffaa\011\uffaa\012\uffaa\013\uffaa\014\uffaa\015\uffaa\020" +
    "\uffaa\022\uffaa\024\uffaa\025\uffaa\026\uffaa\037\uffaa\040\uffaa" +
    "\041\uffaa\044\uffaa\057\uffaa\064\uffaa\066\uffaa\067\uffaa\070" +
    "\uffaa\071\uffaa\072\uffaa\001\002\000\044\027\144\030\155" +
    "\031\145\032\152\033\157\034\140\035\143\036\154\040" +
    "\141\041\146\043\137\044\156\045\153\046\150\047\147" +
    "\055\uff6d\060\uff6d\001\002\000\054\027\uff5c\030\uff5c\031" +
    "\uff5c\032\uff5c\033\uff5c\034\uff5c\035\uff5c\036\uff5c\040\uff5c" +
    "\041\uff5c\043\uff5c\044\uff5c\045\uff5c\046\uff5c\047\uff5c\054" +
    "\uff5c\055\uff5c\056\uff5c\060\uff5c\062\uff5c\064\uff5c\001\002" +
    "\000\026\037\uff30\040\uff30\041\uff30\044\uff30\057\uff30\066" +
    "\uff30\067\uff30\070\uff30\071\uff30\072\uff30\001\002\000\004" +
    "\057\uff79\001\002\000\004\055\321\001\002\000\004\057" +
    "\uff75\001\002\000\004\064\350\001\002\000\004\055\uffa9" +
    "\001\002\000\004\057\uff8f\001\002\000\004\055\321\001" +
    "\002\000\064\003\uffab\004\uffab\005\uffab\010\uffab\011\uffab" +
    "\012\uffab\013\uffab\014\uffab\015\uffab\020\uffab\022\uffab\024" +
    "\uffab\025\uffab\026\uffab\037\uffab\040\uffab\041\uffab\044\uffab" +
    "\057\uffab\064\uffab\066\uffab\067\uffab\070\uffab\071\uffab\072" +
    "\uffab\001\002\000\030\037\uff93\040\uff93\041\uff93\044\uff93" +
    "\055\uff94\057\uff93\066\uff93\067\uff93\070\uff93\071\uff93\072" +
    "\uff93\001\002\000\050\027\uff2c\030\uff2c\031\uff2c\032\uff2c" +
    "\033\uff2c\034\uff2c\035\uff2c\036\uff2c\040\uff2c\041\uff2c\043" +
    "\uff2c\044\uff2c\045\uff2c\046\uff2c\047\uff2c\054\uff2c\055\uff2c" +
    "\060\uff2c\062\uff2c\001\002\000\004\055\321\001\002\000" +
    "\004\055\321\001\002\000\064\003\uffad\004\uffad\005\uffad" +
    "\010\uffad\011\uffad\012\uffad\013\uffad\014\uffad\015\uffad\020" +
    "\uffad\022\uffad\024\uffad\025\uffad\026\uffad\037\uffad\040\uffad" +
    "\041\uffad\044\uffad\057\uffad\064\uffad\066\uffad\067\uffad\070" +
    "\uffad\071\uffad\072\uffad\001\002\000\026\037\uff54\040\uff54" +
    "\041\uff54\044\uff54\057\uff54\066\uff54\067\uff54\070\uff54\071" +
    "\uff54\072\uff54\001\002\000\004\055\uff90\001\002\000\004" +
    "\057\uff88\001\002\000\006\055\uff6e\060\uff6e\001\002\000" +
    "\060\027\uff2e\030\uff2e\031\uff2e\032\uff2e\033\uff2e\034\uff2e" +
    "\035\uff2e\036\uff2e\040\uff2e\041\uff2e\042\231\043\uff2e\044" +
    "\uff2e\045\uff2e\046\uff2e\047\uff2e\050\225\051\230\052\227" +
    "\053\226\054\uff2e\055\uff2e\060\uff2e\001\002\000\006\003" +
    "\uffa7\057\uffa7\001\002\000\006\003\130\057\131\001\002" +
    "\000\004\060\uffa1\001\002\000\030\037\uffa5\040\uffa5\041" +
    "\uffa5\044\uffa5\057\uffa5\065\uffa3\066\uffa5\067\uffa5\070\uffa5" +
    "\071\uffa5\072\uffa5\001\002\000\004\055\uffa6\001\002\000" +
    "\004\065\175\001\002\000\026\037\060\040\067\041\103" +
    "\044\073\057\121\066\017\067\065\070\064\071\102\072" +
    "\075\001\002\000\050\027\uff2e\030\uff2e\031\uff2e\032\uff2e" +
    "\033\uff2e\034\uff2e\035\uff2e\036\uff2e\040\uff2e\041\uff2e\043" +
    "\uff2e\044\uff2e\045\uff2e\046\uff2e\047\uff2e\054\uff2e\055\uff2e" +
    "\060\uff2e\062\uff2e\001\002\000\044\027\144\030\155\031" +
    "\145\032\152\033\157\034\140\035\143\036\154\040\141" +
    "\041\146\043\137\044\156\045\153\046\150\047\147\054" +
    "\151\060\uff9d\001\002\000\026\037\uff42\040\uff42\041\uff42" +
    "\044\uff42\057\uff42\066\uff42\067\uff42\070\uff42\071\uff42\072" +
    "\uff42\001\002\000\026\037\uff48\040\uff48\041\uff48\044\uff48" +
    "\057\uff48\066\uff48\067\uff48\070\uff48\071\uff48\072\uff48\001" +
    "\002\000\050\027\uff34\030\uff34\031\uff34\032\uff34\033\uff34" +
    "\034\uff34\035\uff34\036\uff34\040\uff34\041\uff34\043\uff34\044" +
    "\uff34\045\uff34\046\uff34\047\uff34\054\uff34\055\uff34\060\uff34" +
    "\062\uff34\001\002\000\004\060\213\001\002\000\026\037" +
    "\uff46\040\uff46\041\uff46\044\uff46\057\uff46\066\uff46\067\uff46" +
    "\070\uff46\071\uff46\072\uff46\001\002\000\026\037\uff52\040" +
    "\uff52\041\uff52\044\uff52\057\uff52\066\uff52\067\uff52\070\uff52" +
    "\071\uff52\072\uff52\001\002\000\026\037\uff4e\040\uff4e\041" +
    "\uff4e\044\uff4e\057\uff4e\066\uff4e\067\uff4e\070\uff4e\071\uff4e" +
    "\072\uff4e\001\002\000\050\027\uff31\030\uff31\031\uff31\032" +
    "\uff31\033\uff31\034\uff31\035\uff31\036\uff31\040\uff31\041\uff31" +
    "\043\uff31\044\uff31\045\uff31\046\uff31\047\uff31\054\uff31\055" +
    "\uff31\060\uff31\062\uff31\001\002\000\026\037\uff38\040\uff38" +
    "\041\uff38\044\uff38\057\uff38\066\uff38\067\uff38\070\uff38\071" +
    "\uff38\072\uff38\001\002\000\026\037\uff3a\040\uff3a\041\uff3a" +
    "\044\uff3a\057\uff3a\066\uff3a\067\uff3a\070\uff3a\071\uff3a\072" +
    "\uff3a\001\002\000\030\037\060\040\067\041\103\044\073" +
    "\057\121\065\175\066\017\067\065\070\064\071\102\072" +
    "\075\001\002\000\026\037\uff4c\040\uff4c\041\uff4c\044\uff4c" +
    "\057\uff4c\066\uff4c\067\uff4c\070\uff4c\071\uff4c\072\uff4c\001" +
    "\002\000\026\037\uff3c\040\uff3c\041\uff3c\044\uff3c\057\uff3c" +
    "\066\uff3c\067\uff3c\070\uff3c\071\uff3c\072\uff3c\001\002\000" +
    "\026\037\uff44\040\uff44\041\uff44\044\uff44\057\uff44\066\uff44" +
    "\067\uff44\070\uff44\071\uff44\072\uff44\001\002\000\026\037" +
    "\uff50\040\uff50\041\uff50\044\uff50\057\uff50\066\uff50\067\uff50" +
    "\070\uff50\071\uff50\072\uff50\001\002\000\026\037\uff40\040" +
    "\uff40\041\uff40\044\uff40\057\uff40\066\uff40\067\uff40\070\uff40" +
    "\071\uff40\072\uff40\001\002\000\026\037\uff4a\040\uff4a\041" +
    "\uff4a\044\uff4a\057\uff4a\066\uff4a\067\uff4a\070\uff4a\071\uff4a" +
    "\072\uff4a\001\002\000\026\037\060\040\067\041\103\044" +
    "\073\057\121\066\017\067\065\070\064\071\102\072\075" +
    "\001\002\000\050\027\uff49\030\uff49\031\uff49\032\uff49\033" +
    "\uff49\034\uff49\035\uff49\036\uff49\040\141\041\146\043\137" +
    "\044\156\045\153\046\150\047\147\054\uff49\055\uff49\060" +
    "\uff49\062\uff49\001\002\000\026\037\060\040\067\041\103" +
    "\044\073\057\121\066\017\067\065\070\064\071\102\072" +
    "\075\001\002\000\050\027\uff3f\030\uff3f\031\uff3f\032\uff3f" +
    "\033\uff3f\034\uff3f\035\uff3f\036\uff3f\040\141\041\146\043" +
    "\uff3f\044\156\045\uff3f\046\uff3f\047\uff3f\054\uff3f\055\uff3f" +
    "\060\uff3f\062\uff3f\001\002\000\026\037\060\040\067\041" +
    "\103\044\073\057\121\066\017\067\065\070\064\071\102" +
    "\072\075\001\002\000\050\027\uff4f\030\uff4f\031\uff4f\032" +
    "\uff4f\033\uff4f\034\uff4f\035\uff4f\036\uff4f\040\141\041\146" +
    "\043\137\044\156\045\153\046\150\047\147\054\uff4f\055" +
    "\uff4f\060\uff4f\062\uff4f\001\002\000\026\037\060\040\067" +
    "\041\103\044\073\057\121\066\017\067\065\070\064\071" +
    "\102\072\075\001\002\000\050\027\144\030\155\031\145" +
    "\032\152\033\157\034\140\035\uff43\036\uff43\040\141\041" +
    "\146\043\137\044\156\045\153\046\150\047\147\054\uff43" +
    "\055\uff43\060\uff43\062\uff43\001\002\000\026\037\060\040" +
    "\067\041\103\044\073\057\121\066\017\067\065\070\064" +
    "\071\102\072\075\001\002\000\050\027\uff3b\030\uff3b\031" +
    "\uff3b\032\uff3b\033\uff3b\034\uff3b\035\uff3b\036\uff3b\040\141" +
    "\041\146\043\uff3b\044\156\045\uff3b\046\uff3b\047\uff3b\054" +
    "\uff3b\055\uff3b\060\uff3b\062\uff3b\001\002\000\026\037\060" +
    "\040\067\041\103\044\073\057\121\066\017\067\065\070" +
    "\064\071\102\072\075\001\002\000\050\027\uff4b\030\uff4b" +
    "\031\uff4b\032\uff4b\033\uff4b\034\uff4b\035\uff4b\036\uff4b\040" +
    "\141\041\146\043\137\044\156\045\153\046\150\047\147" +
    "\054\uff4b\055\uff4b\060\uff4b\062\uff4b\001\002\000\006\054" +
    "\151\060\uff9d\001\002\000\006\054\uff55\060\uff55\001\002" +
    "\000\044\027\144\030\155\031\145\032\152\033\157\034" +
    "\140\035\143\036\154\040\141\041\146\043\137\044\156" +
    "\045\153\046\150\047\147\054\151\060\uff9d\001\002\000" +
    "\004\060\uff9f\001\002\000\004\060\uff9e\001\002\000\026" +
    "\037\060\040\067\041\103\044\073\057\121\066\017\067" +
    "\065\070\064\071\102\072\075\001\002\000\050\027\uff39" +
    "\030\uff39\031\uff39\032\uff39\033\uff39\034\uff39\035\uff39\036" +
    "\uff39\040\141\041\146\043\uff39\044\156\045\uff39\046\uff39" +
    "\047\uff39\054\uff39\055\uff39\060\uff39\062\uff39\001\002\000" +
    "\026\037\060\040\067\041\103\044\073\057\121\066\017" +
    "\067\065\070\064\071\102\072\075\001\002\000\050\027" +
    "\uff37\030\uff37\031\uff37\032\uff37\033\uff37\034\uff37\035\uff37" +
    "\036\uff37\040\141\041\146\043\uff37\044\156\045\uff37\046" +
    "\uff37\047\uff37\054\uff37\055\uff37\060\uff37\062\uff37\001\002" +
    "\000\026\037\060\040\067\041\103\044\073\057\121\066" +
    "\017\067\065\070\064\071\102\072\075\001\002\000\050" +
    "\027\uff4d\030\uff4d\031\uff4d\032\uff4d\033\uff4d\034\uff4d\035" +
    "\uff4d\036\uff4d\040\141\041\146\043\137\044\156\045\153" +
    "\046\150\047\147\054\uff4d\055\uff4d\060\uff4d\062\uff4d\001" +
    "\002\000\026\037\060\040\067\041\103\044\073\057\121" +
    "\066\017\067\065\070\064\071\102\072\075\001\002\000" +
    "\050\027\uff51\030\155\031\145\032\152\033\157\034\uff51" +
    "\035\uff51\036\uff51\040\141\041\146\043\137\044\156\045" +
    "\153\046\150\047\147\054\uff51\055\uff51\060\uff51\062\uff51" +
    "\001\002\000\026\037\060\040\067\041\103\044\073\057" +
    "\121\066\017\067\065\070\064\071\102\072\075\001\002" +
    "\000\050\027\144\030\155\031\145\032\152\033\157\034" +
    "\140\035\uff45\036\154\040\141\041\146\043\137\044\156" +
    "\045\153\046\150\047\147\054\uff45\055\uff45\060\uff45\062" +
    "\uff45\001\002\000\004\055\uffa4\001\002\000\026\037\060" +
    "\040\067\041\103\044\073\057\121\066\017\067\065\070" +
    "\064\071\102\072\075\001\002\000\050\027\uff47\030\155" +
    "\031\145\032\152\033\157\034\uff47\035\uff47\036\uff47\040" +
    "\141\041\146\043\137\044\156\045\153\046\150\047\147" +
    "\054\uff47\055\uff47\060\uff47\062\uff47\001\002\000\026\037" +
    "\060\040\067\041\103\044\073\057\121\066\017\067\065" +
    "\070\064\071\102\072\075\001\002\000\050\027\uff41\030" +
    "\uff41\031\uff41\032\uff41\033\uff41\034\uff41\035\uff41\036\uff41" +
    "\040\141\041\146\043\uff41\044\156\045\153\046\150\047" +
    "\147\054\uff41\055\uff41\060\uff41\062\uff41\001\002\000\006" +
    "\054\151\060\uff9d\001\002\000\004\060\222\001\002\000" +
    "\004\055\uffa2\001\002\000\004\060\224\001\002\000\004" +
    "\055\uffa0\001\002\000\032\003\uff6a\037\uff6a\040\uff6a\041" +
    "\uff6a\044\uff6a\057\uff6a\063\uff6a\066\uff6a\067\uff6a\070\uff6a" +
    "\071\uff6a\072\uff6a\001\002\000\032\003\uff64\037\uff64\040" +
    "\uff64\041\uff64\044\uff64\057\uff64\063\uff64\066\uff64\067\uff64" +
    "\070\uff64\071\uff64\072\uff64\001\002\000\032\003\uff66\037" +
    "\uff66\040\uff66\041\uff66\044\uff66\057\uff66\063\uff66\066\uff66" +
    "\067\uff66\070\uff66\071\uff66\072\uff66\001\002\000\032\003" +
    "\uff68\037\uff68\040\uff68\041\uff68\044\uff68\057\uff68\063\uff68" +
    "\066\uff68\067\uff68\070\uff68\071\uff68\072\uff68\001\002\000" +
    "\032\003\uff6c\037\uff6c\040\uff6c\041\uff6c\044\uff6c\057\uff6c" +
    "\063\uff6c\066\uff6c\067\uff6c\070\uff6c\071\uff6c\072\uff6c\001" +
    "\002\000\032\003\237\037\060\040\067\041\103\044\073" +
    "\057\121\063\236\066\017\067\065\070\064\071\102\072" +
    "\075\001\002\000\010\054\uff61\055\uff61\060\uff61\001\002" +
    "\000\046\027\144\030\155\031\145\032\152\033\157\034" +
    "\140\035\143\036\154\040\141\041\146\043\137\044\156" +
    "\045\153\046\150\047\147\054\uff60\055\uff60\060\uff60\001" +
    "\002\000\010\054\uff6b\055\uff6b\060\uff6b\001\002\000\012" +
    "\067\uff5a\070\uff5a\071\uff5a\072\uff5a\001\002\000\010\054" +
    "\uff5f\055\uff5f\060\uff5f\001\002\000\010\054\uff62\055\uff62" +
    "\060\uff62\001\002\000\012\067\065\070\064\071\102\072" +
    "\075\001\002\000\006\054\244\064\uff56\001\002\000\004" +
    "\064\250\001\002\000\012\067\uff58\070\uff58\071\uff58\072" +
    "\uff58\001\002\000\012\067\065\070\064\071\102\072\075" +
    "\001\002\000\006\054\244\064\uff56\001\002\000\004\064" +
    "\uff57\001\002\000\010\054\uff59\055\uff59\060\uff59\001\002" +
    "\000\032\003\237\037\060\040\067\041\103\044\073\057" +
    "\121\063\236\066\017\067\065\070\064\071\102\072\075" +
    "\001\002\000\010\054\uff67\055\uff67\060\uff67\001\002\000" +
    "\032\003\237\037\060\040\067\041\103\044\073\057\121" +
    "\063\236\066\017\067\065\070\064\071\102\072\075\001" +
    "\002\000\010\054\uff65\055\uff65\060\uff65\001\002\000\032" +
    "\003\237\037\060\040\067\041\103\044\073\057\121\063" +
    "\236\066\017\067\065\070\064\071\102\072\075\001\002" +
    "\000\010\054\uff63\055\uff63\060\uff63\001\002\000\032\003" +
    "\237\037\060\040\067\041\103\044\073\057\121\063\236" +
    "\066\017\067\065\070\064\071\102\072\075\001\002\000" +
    "\010\054\uff69\055\uff69\060\uff69\001\002\000\004\057\262" +
    "\001\002\000\004\066\uff87\001\002\000\004\066\017\001" +
    "\002\000\004\060\272\001\002\000\006\060\ufffd\061\266" +
    "\001\002\000\026\037\ufffc\040\ufffc\041\ufffc\044\ufffc\057" +
    "\ufffc\066\ufffc\067\ufffc\070\ufffc\071\ufffc\072\ufffc\001\002" +
    "\000\026\037\060\040\067\041\103\044\073\057\121\066" +
    "\017\067\065\070\064\071\102\072\075\001\002\000\042" +
    "\027\144\030\155\031\145\032\152\033\157\034\140\035" +
    "\143\036\154\040\141\041\146\043\137\044\156\045\153" +
    "\046\150\047\147\062\271\001\002\000\062\027\ufffb\030" +
    "\ufffb\031\ufffb\032\ufffb\033\ufffb\034\ufffb\035\ufffb\036\ufffb" +
    "\040\ufffb\041\ufffb\042\ufffb\043\ufffb\044\ufffb\045\ufffb\046" +
    "\ufffb\047\ufffb\050\ufffb\051\ufffb\052\ufffb\053\ufffb\054\ufffb" +
    "\055\ufffb\060\ufffb\062\ufffb\001\002\000\004\063\uff86\001" +
    "\002\000\004\063\274\001\002\000\006\005\uff84\011\uff84" +
    "\001\002\000\064\003\uff85\004\uff85\005\uff85\010\uff85\011" +
    "\uff85\012\uff85\013\uff85\014\uff85\015\uff85\020\uff85\022\uff85" +
    "\024\uff85\025\uff85\026\uff85\037\uff85\040\uff85\041\uff85\044" +
    "\uff85\057\uff85\064\uff85\066\uff85\067\uff85\070\uff85\071\uff85" +
    "\072\uff85\001\002\000\006\005\301\011\300\001\002\000" +
    "\004\064\314\001\002\000\004\056\uff7f\001\002\000\012" +
    "\067\uff82\070\uff82\071\uff82\072\uff82\001\002\000\012\067" +
    "\065\070\064\071\102\072\075\001\002\000\004\056\304" +
    "\001\002\000\060\003\uff81\004\uff81\005\uff81\010\uff81\011" +
    "\uff81\012\uff81\014\uff81\015\uff81\020\uff81\022\uff81\024\uff81" +
    "\025\uff81\026\uff81\037\uff81\040\uff81\041\uff81\044\uff81\057" +
    "\uff81\066\uff81\067\uff81\070\uff81\071\uff81\072\uff81\001\002" +
    "\000\060\003\110\004\074\005\uffb5\010\122\011\uffb5\012" +
    "\061\014\106\015\111\020\114\022\123\024\104\025\063" +
    "\026\126\037\060\040\067\041\103\044\073\057\121\066" +
    "\017\067\065\070\064\071\102\072\075\001\002\000\006" +
    "\005\301\011\300\001\002\000\004\064\uff80\001\002\000" +
    "\004\056\311\001\002\000\056\003\uff7e\004\uff7e\010\uff7e" +
    "\012\uff7e\014\uff7e\015\uff7e\020\uff7e\022\uff7e\024\uff7e\025" +
    "\uff7e\026\uff7e\037\uff7e\040\uff7e\041\uff7e\044\uff7e\057\uff7e" +
    "\064\uff7e\066\uff7e\067\uff7e\070\uff7e\071\uff7e\072\uff7e\001" +
    "\002\000\056\003\110\004\074\010\122\012\061\014\106" +
    "\015\111\020\114\022\123\024\104\025\063\026\126\037" +
    "\060\040\067\041\103\044\073\057\121\064\uffb5\066\017" +
    "\067\065\070\064\071\102\072\075\001\002\000\004\064" +
    "\uff7d\001\002\000\064\003\uff83\004\uff83\005\uff83\010\uff83" +
    "\011\uff83\012\uff83\013\uff83\014\uff83\015\uff83\020\uff83\022" +
    "\uff83\024\uff83\025\uff83\026\uff83\037\uff83\040\uff83\041\uff83" +
    "\044\uff83\057\uff83\064\uff83\066\uff83\067\uff83\070\uff83\071" +
    "\uff83\072\uff83\001\002\000\026\037\060\040\067\041\103" +
    "\044\073\057\121\066\017\067\065\070\064\071\102\072" +
    "\075\001\002\000\042\027\144\030\155\031\145\032\152" +
    "\033\157\034\140\035\143\036\154\040\141\041\146\043" +
    "\137\044\156\045\153\046\150\047\147\060\317\001\002" +
    "\000\050\027\uff53\030\uff53\031\uff53\032\uff53\033\uff53\034" +
    "\uff53\035\uff53\036\uff53\040\uff53\041\uff53\043\uff53\044\uff53" +
    "\045\uff53\046\uff53\047\uff53\054\uff53\055\uff53\060\uff53\062" +
    "\uff53\001\002\000\064\003\uffb0\004\uffb0\005\uffb0\010\uffb0" +
    "\011\uffb0\012\uffb0\013\uffb0\014\uffb0\015\uffb0\020\uffb0\022" +
    "\uffb0\024\uffb0\025\uffb0\026\uffb0\037\uffb0\040\uffb0\041\uffb0" +
    "\044\uffb0\057\uffb0\064\uffb0\066\uffb0\067\uffb0\070\uffb0\071" +
    "\uffb0\072\uffb0\001\002\000\100\003\uffff\004\uffff\005\uffff" +
    "\006\uffff\007\uffff\010\uffff\011\uffff\012\uffff\013\uffff\014" +
    "\uffff\015\uffff\016\uffff\017\uffff\020\uffff\021\uffff\022\uffff" +
    "\023\uffff\024\uffff\025\uffff\026\uffff\037\uffff\040\uffff\041" +
    "\uffff\044\uffff\057\uffff\064\uffff\066\uffff\067\uffff\070\uffff" +
    "\071\uffff\072\uffff\001\002\000\064\003\uffac\004\uffac\005" +
    "\uffac\010\uffac\011\uffac\012\uffac\013\uffac\014\uffac\015\uffac" +
    "\020\uffac\022\uffac\024\uffac\025\uffac\026\uffac\037\uffac\040" +
    "\uffac\041\uffac\044\uffac\057\uffac\064\uffac\066\uffac\067\uffac" +
    "\070\uffac\071\uffac\072\uffac\001\002\000\026\037\060\040" +
    "\067\041\103\044\073\057\121\066\017\067\065\070\064" +
    "\071\102\072\075\001\002\000\042\027\144\030\155\031" +
    "\145\032\152\033\157\034\140\035\143\036\154\040\141" +
    "\041\146\043\137\044\156\045\153\046\150\047\147\055" +
    "\uff92\001\002\000\064\003\uffb2\004\uffb2\005\uffb2\010\uffb2" +
    "\011\uffb2\012\uffb2\013\uffb2\014\uffb2\015\uffb2\020\uffb2\022" +
    "\uffb2\024\uffb2\025\uffb2\026\uffb2\037\uffb2\040\uffb2\041\uffb2" +
    "\044\uffb2\057\uffb2\064\uffb2\066\uffb2\067\uffb2\070\uffb2\071" +
    "\uffb2\072\uffb2\001\002\000\004\057\327\001\002\000\026" +
    "\037\uff8e\040\uff8e\041\uff8e\044\uff8e\057\uff8e\066\uff8e\067" +
    "\uff8e\070\uff8e\071\uff8e\072\uff8e\001\002\000\026\037\060" +
    "\040\067\041\103\044\073\057\121\066\017\067\065\070" +
    "\064\071\102\072\075\001\002\000\004\060\332\001\002" +
    "\000\056\003\uff8d\004\uff8d\010\uff8d\012\uff8d\014\uff8d\015" +
    "\uff8d\020\uff8d\022\uff8d\024\uff8d\025\uff8d\026\uff8d\037\uff8d" +
    "\040\uff8d\041\uff8d\044\uff8d\057\uff8d\063\uff8d\066\uff8d\067" +
    "\uff8d\070\uff8d\071\uff8d\072\uff8d\001\002\000\056\003\110" +
    "\004\074\010\122\012\061\014\106\015\111\020\114\022" +
    "\123\024\104\025\063\026\126\037\060\040\067\041\103" +
    "\044\073\057\121\063\336\066\017\067\065\070\064\071" +
    "\102\072\075\001\002\000\064\003\uff6f\004\uff6f\005\uff6f" +
    "\010\uff6f\011\uff6f\012\uff6f\013\uff6f\014\uff6f\015\uff6f\020" +
    "\uff6f\022\uff6f\024\uff6f\025\uff6f\026\uff6f\037\uff6f\040\uff6f" +
    "\041\uff6f\044\uff6f\057\uff6f\064\uff6f\066\uff6f\067\uff6f\070" +
    "\uff6f\071\uff6f\072\uff6f\001\002\000\064\003\uff89\004\uff89" +
    "\005\uff89\010\uff89\011\uff89\012\uff89\013\343\014\uff89\015" +
    "\uff89\020\uff89\022\uff89\024\uff89\025\uff89\026\uff89\037\uff89" +
    "\040\uff89\041\uff89\044\uff89\057\uff89\064\uff89\066\uff89\067" +
    "\uff89\070\uff89\071\uff89\072\uff89\001\002\000\056\003\uff71" +
    "\004\uff71\010\uff71\012\uff71\014\uff71\015\uff71\020\uff71\022" +
    "\uff71\024\uff71\025\uff71\026\uff71\037\uff71\040\uff71\041\uff71" +
    "\044\uff71\057\uff71\064\uff71\066\uff71\067\uff71\070\uff71\071" +
    "\uff71\072\uff71\001\002\000\056\003\110\004\074\010\122" +
    "\012\061\014\106\015\111\020\114\022\123\024\104\025" +
    "\063\026\126\037\060\040\067\041\103\044\073\057\121" +
    "\064\uffb5\066\017\067\065\070\064\071\102\072\075\001" +
    "\002\000\004\064\341\001\002\000\064\003\uff70\004\uff70" +
    "\005\uff70\010\uff70\011\uff70\012\uff70\013\uff70\014\uff70\015" +
    "\uff70\020\uff70\022\uff70\024\uff70\025\uff70\026\uff70\037\uff70" +
    "\040\uff70\041\uff70\044\uff70\057\uff70\064\uff70\066\uff70\067" +
    "\uff70\070\uff70\071\uff70\072\uff70\001\002\000\064\003\uff8c" +
    "\004\uff8c\005\uff8c\010\uff8c\011\uff8c\012\uff8c\013\uff8c\014" +
    "\uff8c\015\uff8c\020\uff8c\022\uff8c\024\uff8c\025\uff8c\026\uff8c" +
    "\037\uff8c\040\uff8c\041\uff8c\044\uff8c\057\uff8c\064\uff8c\066" +
    "\uff8c\067\uff8c\070\uff8c\071\uff8c\072\uff8c\001\002\000\056" +
    "\003\uff8b\004\uff8b\010\uff8b\012\uff8b\014\uff8b\015\uff8b\020" +
    "\uff8b\022\uff8b\024\uff8b\025\uff8b\026\uff8b\037\uff8b\040\uff8b" +
    "\041\uff8b\044\uff8b\057\uff8b\063\uff8b\066\uff8b\067\uff8b\070" +
    "\uff8b\071\uff8b\072\uff8b\001\002\000\056\003\110\004\074" +
    "\010\122\012\061\014\106\015\111\020\114\022\123\024" +
    "\104\025\063\026\126\037\060\040\067\041\103\044\073" +
    "\057\121\063\336\066\017\067\065\070\064\071\102\072" +
    "\075\001\002\000\064\003\uff8a\004\uff8a\005\uff8a\010\uff8a" +
    "\011\uff8a\012\uff8a\013\uff8a\014\uff8a\015\uff8a\020\uff8a\022" +
    "\uff8a\024\uff8a\025\uff8a\026\uff8a\037\uff8a\040\uff8a\041\uff8a" +
    "\044\uff8a\057\uff8a\064\uff8a\066\uff8a\067\uff8a\070\uff8a\071" +
    "\uff8a\072\uff8a\001\002\000\004\055\321\001\002\000\064" +
    "\003\uffa8\004\uffa8\005\uffa8\010\uffa8\011\uffa8\012\uffa8\013" +
    "\uffa8\014\uffa8\015\uffa8\020\uffa8\022\uffa8\024\uffa8\025\uffa8" +
    "\026\uffa8\037\uffa8\040\uffa8\041\uffa8\044\uffa8\057\uffa8\064" +
    "\uffa8\066\uffa8\067\uffa8\070\uffa8\071\uffa8\072\uffa8\001\002" +
    "\000\020\002\uffba\006\uffba\007\uffba\016\uffba\017\uffba\021" +
    "\uffba\023\uffba\001\002\000\004\057\352\001\002\000\026" +
    "\037\uff73\040\uff73\041\uff73\044\uff73\057\uff73\066\uff73\067" +
    "\uff73\070\uff73\071\uff73\072\uff73\001\002\000\056\003\110" +
    "\004\074\010\122\012\061\014\106\015\111\020\114\022" +
    "\123\024\104\025\063\026\126\037\060\040\067\041\103" +
    "\044\073\057\121\063\336\066\017\067\065\070\064\071" +
    "\102\072\075\001\002\000\064\003\uff74\004\uff74\005\uff74" +
    "\010\uff74\011\uff74\012\uff74\013\uff74\014\uff74\015\uff74\020" +
    "\uff74\022\uff74\024\uff74\025\uff74\026\uff74\037\uff74\040\uff74" +
    "\041\uff74\044\uff74\057\uff74\064\uff74\066\uff74\067\uff74\070" +
    "\uff74\071\uff74\072\uff74\001\002\000\026\037\060\040\067" +
    "\041\103\044\073\057\121\066\017\067\065\070\064\071" +
    "\102\072\075\001\002\000\004\055\321\001\002\000\026" +
    "\037\060\040\067\041\103\044\073\057\121\066\017\067" +
    "\065\070\064\071\102\072\075\001\002\000\004\055\321" +
    "\001\002\000\026\037\060\040\067\041\103\044\073\057" +
    "\121\066\017\067\065\070\064\071\102\072\075\001\002" +
    "\000\004\060\363\001\002\000\056\003\uff72\004\uff72\010" +
    "\uff72\012\uff72\014\uff72\015\uff72\020\uff72\022\uff72\024\uff72" +
    "\025\uff72\026\uff72\037\uff72\040\uff72\041\uff72\044\uff72\057" +
    "\uff72\063\uff72\066\uff72\067\uff72\070\uff72\071\uff72\072\uff72" +
    "\001\002\000\064\003\uffb1\004\uffb1\005\uffb1\010\uffb1\011" +
    "\uffb1\012\uffb1\013\uffb1\014\uffb1\015\uffb1\020\uffb1\022\uffb1" +
    "\024\uffb1\025\uffb1\026\uffb1\037\uffb1\040\uffb1\041\uffb1\044" +
    "\uffb1\057\uffb1\064\uffb1\066\uffb1\067\uffb1\070\uffb1\071\uffb1" +
    "\072\uffb1\001\002\000\004\057\366\001\002\000\026\037" +
    "\uff77\040\uff77\041\uff77\044\uff77\057\uff77\066\uff77\067\uff77" +
    "\070\uff77\071\uff77\072\uff77\001\002\000\056\003\110\004" +
    "\074\010\122\012\061\014\106\015\111\020\114\022\123" +
    "\024\104\025\063\026\126\037\060\040\067\041\103\044" +
    "\073\057\121\063\336\066\017\067\065\070\064\071\102" +
    "\072\075\001\002\000\064\003\uff78\004\uff78\005\uff78\010" +
    "\uff78\011\uff78\012\uff78\013\uff78\014\uff78\015\uff78\020\uff78" +
    "\022\uff78\024\uff78\025\uff78\026\uff78\037\uff78\040\uff78\041" +
    "\uff78\044\uff78\057\uff78\064\uff78\066\uff78\067\uff78\070\uff78" +
    "\071\uff78\072\uff78\001\002\000\026\037\060\040\067\041" +
    "\103\044\073\057\121\066\017\067\065\070\064\071\102" +
    "\072\075\001\002\000\004\060\373\001\002\000\060\003" +
    "\uff76\004\uff76\010\uff76\012\uff76\014\uff76\015\uff76\020\uff76" +
    "\022\uff76\024\uff76\025\uff76\026\uff76\037\uff76\040\uff76\041" +
    "\uff76\044\uff76\055\uff76\057\uff76\063\uff76\066\uff76\067\uff76" +
    "\070\uff76\071\uff76\072\uff76\001\002\000\026\037\060\040" +
    "\067\041\103\044\073\057\121\066\017\067\065\070\064" +
    "\071\102\072\075\001\002\000\050\027\uff2f\030\uff2f\031" +
    "\uff2f\032\uff2f\033\uff2f\034\uff2f\035\uff2f\036\uff2f\040\uff2f" +
    "\041\uff2f\043\uff2f\044\uff2f\045\uff2f\046\uff2f\047\uff2f\054" +
    "\uff2f\055\uff2f\060\uff2f\062\uff2f\001\002\000\064\003\uffb4" +
    "\004\uffb4\005\uffb4\010\uffb4\011\uffb4\012\uffb4\013\uffb4\014" +
    "\uffb4\015\uffb4\020\uffb4\022\uffb4\024\uffb4\025\uffb4\026\uffb4" +
    "\037\uffb4\040\uffb4\041\uffb4\044\uffb4\057\uffb4\064\uffb4\066" +
    "\uffb4\067\uffb4\070\uffb4\071\uffb4\072\uffb4\001\002\000\026" +
    "\037\060\040\067\041\103\044\073\057\121\066\017\067" +
    "\065\070\064\071\102\072\075\001\002\000\050\027\uff3d" +
    "\030\uff3d\031\uff3d\032\uff3d\033\uff3d\034\uff3d\035\uff3d\036" +
    "\uff3d\040\141\041\146\043\uff3d\044\156\045\uff3d\046\uff3d" +
    "\047\uff3d\054\uff3d\055\uff3d\060\uff3d\062\uff3d\001\002\000" +
    "\010\005\uffb6\011\uffb6\064\uffb6\001\002\000\064\003\uffaf" +
    "\004\uffaf\005\uffaf\010\uffaf\011\uffaf\012\uffaf\013\uffaf\014" +
    "\uffaf\015\uffaf\020\uffaf\022\uffaf\024\uffaf\025\uffaf\026\uffaf" +
    "\037\uffaf\040\uffaf\041\uffaf\044\uffaf\057\uffaf\064\uffaf\066" +
    "\uffaf\067\uffaf\070\uffaf\071\uffaf\072\uffaf\001\002\000\026" +
    "\037\060\040\067\041\103\044\073\057\121\066\017\067" +
    "\065\070\064\071\102\072\075\001\002\000\050\027\uff32" +
    "\030\uff32\031\uff32\032\uff32\033\uff32\034\uff32\035\uff32\036" +
    "\uff32\040\uff32\041\uff32\043\uff32\044\uff32\045\uff32\046\uff32" +
    "\047\uff32\054\uff32\055\uff32\060\uff32\062\uff32\001\002\000" +
    "\064\003\uffb3\004\uffb3\005\uffb3\010\uffb3\011\uffb3\012\uffb3" +
    "\013\uffb3\014\uffb3\015\uffb3\020\uffb3\022\uffb3\024\uffb3\025" +
    "\uffb3\026\uffb3\037\uffb3\040\uffb3\041\uffb3\044\uffb3\057\uffb3" +
    "\064\uffb3\066\uffb3\067\uffb3\070\uffb3\071\uffb3\072\uffb3\001" +
    "\002\000\006\003\u0107\057\u0108\001\002\000\004\060\uff98" +
    "\001\002\000\006\060\uff9a\066\uff9a\001\002\000\004\055" +
    "\uff9b\001\002\000\006\060\uff95\066\017\001\002\000\004" +
    "\060\uff96\001\002\000\004\060\u010d\001\002\000\004\055" +
    "\uff99\001\002\000\004\060\u010f\001\002\000\004\055\uff97" +
    "\001\002\000\030\037\ufffa\040\ufffa\041\ufffa\044\ufffa\057" +
    "\ufffa\060\ufffa\066\ufffa\067\ufffa\070\ufffa\071\ufffa\072\ufffa" +
    "\001\002\000\030\037\060\040\067\041\103\044\073\057" +
    "\121\060\ufff7\066\017\067\065\070\064\071\102\072\075" +
    "\001\002\000\004\060\u0119\001\002\000\044\027\144\030" +
    "\155\031\145\032\152\033\157\034\140\035\143\036\154" +
    "\040\141\041\146\043\137\044\156\045\153\046\150\047" +
    "\147\054\u0115\060\ufff4\001\002\000\004\060\ufff8\001\002" +
    "\000\026\037\ufff6\040\ufff6\041\ufff6\044\ufff6\057\ufff6\066" +
    "\ufff6\067\ufff6\070\ufff6\071\ufff6\072\ufff6\001\002\000\026" +
    "\037\060\040\067\041\103\044\073\057\121\066\017\067" +
    "\065\070\064\071\102\072\075\001\002\000\044\027\144" +
    "\030\155\031\145\032\152\033\157\034\140\035\143\036" +
    "\154\040\141\041\146\043\137\044\156\045\153\046\150" +
    "\047\147\054\u0115\060\ufff4\001\002\000\004\060\ufff5\001" +
    "\002\000\050\027\ufff9\030\ufff9\031\ufff9\032\ufff9\033\ufff9" +
    "\034\ufff9\035\ufff9\036\ufff9\040\ufff9\041\ufff9\043\ufff9\044" +
    "\ufff9\045\ufff9\046\ufff9\047\ufff9\054\ufff9\055\ufff9\060\ufff9" +
    "\062\ufff9\001\002\000\056\003\110\004\074\010\122\012" +
    "\061\014\106\015\111\020\114\022\123\024\104\025\063" +
    "\026\126\037\060\040\067\041\103\044\073\057\121\063" +
    "\336\066\017\067\065\070\064\071\102\072\075\001\002" +
    "\000\004\024\u011c\001\002\000\004\057\uff7b\001\002\000" +
    "\004\057\366\001\002\000\004\055\uff7a\001\002\000\026" +
    "\037\060\040\067\041\103\044\073\057\121\066\017\067" +
    "\065\070\064\071\102\072\075\001\002\000\050\027\uff35" +
    "\030\uff35\031\uff35\032\uff35\033\uff35\034\uff35\035\uff35\036" +
    "\uff35\040\141\041\146\043\uff35\044\156\045\uff35\046\uff35" +
    "\047\uff35\054\uff35\055\uff35\060\uff35\062\uff35\001\002\000" +
    "\004\066\017\001\002\000\012\042\uffe1\054\uffe1\055\uffe1" +
    "\061\uffe1\001\002\000\012\042\u0126\054\uffce\055\uffce\061" +
    "\u0125\001\002\000\006\054\u0130\055\uffdc\001\002\000\012" +
    "\067\uffd4\070\uffd4\071\uffd4\072\uffd4\001\002\000\032\003" +
    "\uffd0\037\uffd0\040\uffd0\041\uffd0\044\uffd0\057\uffd0\063\uffd0" +
    "\066\uffd0\067\uffd0\070\uffd0\071\uffd0\072\uffd0\001\002\000" +
    "\006\054\uffd1\055\uffd1\001\002\000\032\003\237\037\060" +
    "\040\067\041\103\044\073\057\121\063\236\066\017\067" +
    "\065\070\064\071\102\072\075\001\002\000\006\054\uffcf" +
    "\055\uffcf\001\002\000\012\067\065\070\064\071\102\072" +
    "\075\001\002\000\004\062\u012c\001\002\000\012\042\uffd3" +
    "\054\uffd3\055\uffd3\061\uffd3\001\002\000\012\042\u0126\054" +
    "\uffce\055\uffce\061\u0125\001\002\000\006\054\uffd2\055\uffd2" +
    "\001\002\000\004\055\uffe0\001\002\000\004\066\uffdf\001" +
    "\002\000\004\066\017\001\002\000\012\042\uffde\054\uffde" +
    "\055\uffde\061\uffde\001\002\000\012\042\u0126\054\uffce\055" +
    "\uffce\061\u0125\001\002\000\006\054\u0130\055\uffdc\001\002" +
    "\000\004\055\uffdd\001\002\000\070\003\uffb9\004\uffb9\006" +
    "\uffb9\007\uffb9\010\uffb9\012\uffb9\014\uffb9\015\uffb9\016\uffb9" +
    "\017\uffb9\020\uffb9\021\uffb9\022\uffb9\024\uffb9\025\uffb9\026" +
    "\uffb9\037\uffb9\040\uffb9\041\uffb9\044\uffb9\057\uffb9\064\uffb9" +
    "\066\uffb9\067\uffb9\070\uffb9\071\uffb9\072\uffb9\001\002\000" +
    "\070\003\uffb7\004\uffb7\006\050\007\055\010\uffb7\012\uffb7" +
    "\014\uffb7\015\uffb7\016\053\017\052\020\uffb7\021\054\022" +
    "\uffb7\024\uffb7\025\uffb7\026\uffb7\037\uffb7\040\uffb7\041\uffb7" +
    "\044\uffb7\057\uffb7\064\uffb7\066\uffb7\067\uffb7\070\uffb7\071" +
    "\uffb7\072\uffb7\001\002\000\056\003\uffb8\004\uffb8\010\uffb8" +
    "\012\uffb8\014\uffb8\015\uffb8\020\uffb8\022\uffb8\024\uffb8\025" +
    "\uffb8\026\uffb8\037\uffb8\040\uffb8\041\uffb8\044\uffb8\057\uffb8" +
    "\064\uffb8\066\uffb8\067\uffb8\070\uffb8\071\uffb8\072\uffb8\001" +
    "\002\000\016\006\050\007\055\016\053\017\052\021\054" +
    "\060\uffc0\001\002\000\004\066\017\001\002\000\004\060" +
    "\u0142\001\002\000\006\054\u013e\060\uffbd\001\002\000\004" +
    "\060\uffc1\001\002\000\014\006\uffbf\007\uffbf\016\uffbf\017" +
    "\uffbf\021\uffbf\001\002\000\014\006\050\007\055\016\053" +
    "\017\052\021\054\001\002\000\006\054\u013e\060\uffbd\001" +
    "\002\000\004\060\uffbe\001\002\000\004\063\uffc2\001\002" +
    "\000\006\054\uffbc\060\uffbc\001\002\000\016\003\011\006" +
    "\007\016\012\017\010\021\013\023\015\001\002\000\004" +
    "\002\ufff2\001\002\000\004\066\017\001\002\000\014\042" +
    "\u0126\054\uffce\055\uffce\057\021\061\u0125\001\002\000\006" +
    "\054\u0130\055\uffdc\001\002\000\004\002\uffe9\001\002\000" +
    "\004\063\023\001\002\000\020\002\uffcc\006\030\007\034" +
    "\016\032\017\031\021\033\023\035\001\002\000\004\002" +
    "\uffe3\001\002\000\004\055\321\001\002\000\020\003\011" +
    "\006\007\007\014\016\012\017\010\021\013\023\015\001" +
    "\002\000\004\002\uffe4\001\002\000\004\066\017\001\002" +
    "\000\014\042\u0126\054\uffce\055\uffce\057\021\061\u0125\001" +
    "\002\000\004\002\uffed\001\002\000\020\003\011\006\007" +
    "\007\014\016\012\017\010\021\013\023\015\001\002\000" +
    "\004\002\uffe5\001\002\000\004\066\017\001\002\000\014" +
    "\042\u0126\054\uffce\055\uffce\057\021\061\u0125\001\002\000" +
    "\004\002\uffeb\001\002\000\004\066\017\001\002\000\014" +
    "\042\u0126\054\uffce\055\uffce\057\021\061\u0125\001\002\000" +
    "\004\002\uffef\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0159\000\010\002\004\003\003\004\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\075\u0157\001\001\000\004\077\u0154\001\001\000\004\102" +
    "\u0152\001\001\000\004\076\u014f\001\001\000\004\100\u0145" +
    "\001\001\000\004\074\u0143\001\001\000\004\101\015\001" +
    "\001\000\004\007\017\001\001\000\002\001\001\000\004" +
    "\030\021\001\001\000\004\114\u0138\001\001\000\004\033" +
    "\023\001\001\000\004\116\043\001\001\000\010\027\026" +
    "\034\025\035\024\001\001\000\002\001\001\000\004\007" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\113" +
    "\035\001\001\000\002\001\001\000\004\035\036\001\001" +
    "\000\002\001\001\000\004\030\040\001\001\000\004\033" +
    "\041\001\001\000\010\027\042\034\025\035\024\001\001" +
    "\000\002\001\001\000\012\022\044\024\045\025\046\036" +
    "\050\001\001\000\004\006\u0135\001\001\000\004\103\u0120" +
    "\001\001\000\002\001\001\000\002\001\001\000\050\007" +
    "\061\010\124\011\100\012\114\016\075\040\106\041\071" +
    "\043\076\044\123\046\065\047\111\050\104\051\116\052" +
    "\115\053\112\056\070\063\077\065\117\067\067\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\107\055\001\001\000\004\025\056\001\001\000\002" +
    "\001\001\000\004\202\u011e\001\001\000\004\145\u0119\001" +
    "\001\000\002\001\001\000\004\125\u0105\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\u0104\001\001\000" +
    "\004\203\u0102\001\001\000\002\001\001\000\004\006\u0101" +
    "\001\001\000\050\007\061\010\124\011\100\012\114\016" +
    "\075\040\u0100\041\071\043\076\044\123\046\065\047\111" +
    "\050\104\051\116\052\115\053\112\056\070\063\077\065" +
    "\117\067\067\001\001\000\004\176\376\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\375\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\204\373\001\001\000\004\147\364\001" +
    "\001\000\004\006\363\001\001\000\004\151\350\001\001" +
    "\000\002\001\001\000\004\120\345\001\001\000\004\131" +
    "\325\001\001\000\004\006\324\001\001\000\002\001\001" +
    "\000\004\130\322\001\001\000\002\001\001\000\004\006" +
    "\321\001\001\000\004\006\317\001\001\000\002\001\001" +
    "\000\004\163\314\001\001\000\002\001\001\000\004\135" +
    "\260\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\121\126\001\001\000\004\057\131\001\001\000\004\124" +
    "\222\001\001\000\006\122\133\123\132\001\001\000\002" +
    "\001\001\000\004\013\217\001\001\000\014\007\061\010" +
    "\134\011\135\012\114\016\075\001\001\000\002\001\001" +
    "\000\004\060\141\001\001\000\004\174\215\001\001\000" +
    "\004\171\213\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\172\210\001\001\000\004\164\206\001\001\000" +
    "\004\166\204\001\001\000\002\001\001\000\004\201\202" +
    "\001\001\000\004\200\200\001\001\000\016\007\061\010" +
    "\134\011\175\012\114\013\173\016\075\001\001\000\004" +
    "\167\171\001\001\000\004\177\167\001\001\000\004\173" +
    "\165\001\001\000\004\165\163\001\001\000\004\175\161" +
    "\001\001\000\004\170\157\001\001\000\014\007\061\010" +
    "\134\011\160\012\114\016\075\001\001\000\002\001\001" +
    "\000\014\007\061\010\134\011\162\012\114\016\075\001" +
    "\001\000\002\001\001\000\014\007\061\010\134\011\164" +
    "\012\114\016\075\001\001\000\002\001\001\000\014\007" +
    "\061\010\134\011\166\012\114\016\075\001\001\000\002" +
    "\001\001\000\014\007\061\010\134\011\170\012\114\016" +
    "\075\001\001\000\002\001\001\000\014\007\061\010\134" +
    "\011\172\012\114\016\075\001\001\000\002\001\001\000" +
    "\004\060\177\001\001\000\002\001\001\000\004\060\176" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\007" +
    "\061\010\134\011\201\012\114\016\075\001\001\000\002" +
    "\001\001\000\014\007\061\010\134\011\203\012\114\016" +
    "\075\001\001\000\002\001\001\000\014\007\061\010\134" +
    "\011\205\012\114\016\075\001\001\000\002\001\001\000" +
    "\014\007\061\010\134\011\207\012\114\016\075\001\001" +
    "\000\002\001\001\000\014\007\061\010\134\011\211\012" +
    "\114\016\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\007\061\010\134\011\214\012\114\016\075\001" +
    "\001\000\002\001\001\000\014\007\061\010\134\011\216" +
    "\012\114\016\075\001\001\000\002\001\001\000\004\060" +
    "\220\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\155\256\001\001\000" +
    "\004\160\254\001\001\000\004\157\252\001\001\000\004" +
    "\156\250\001\001\000\004\154\231\001\001\000\022\007" +
    "\061\010\124\011\233\012\114\014\237\016\075\044\232" +
    "\045\234\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\161\240\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\241\001\001\000\004\015" +
    "\242\001\001\000\002\001\001\000\004\162\244\001\001" +
    "\000\004\012\245\001\001\000\004\015\246\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\007\061\010\124" +
    "\011\233\012\114\014\237\016\075\044\232\045\251\001" +
    "\001\000\002\001\001\000\022\007\061\010\124\011\233" +
    "\012\114\014\237\016\075\044\232\045\253\001\001\000" +
    "\002\001\001\000\022\007\061\010\124\011\233\012\114" +
    "\014\237\016\075\044\232\045\255\001\001\000\002\001" +
    "\001\000\022\007\061\010\124\011\233\012\114\014\237" +
    "\016\075\044\232\045\257\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\136\262\001\001\000\006\007\264" +
    "\010\263\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\071\266\001\001\000\014\007\061\010\134\011\267" +
    "\012\114\016\075\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\137\272\001\001\000\004\055\274\001\001" +
    "\000\004\140\275\001\001\000\002\001\001\000\004\054" +
    "\276\001\001\000\002\001\001\000\004\143\307\001\001" +
    "\000\004\141\301\001\001\000\004\012\302\001\001\000" +
    "\002\001\001\000\004\142\304\001\001\000\050\007\061" +
    "\010\124\011\100\012\114\016\075\040\305\041\071\043" +
    "\076\044\123\046\065\047\111\050\104\051\116\052\115" +
    "\053\112\056\070\063\077\065\117\067\067\001\001\000" +
    "\004\054\306\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\144\311\001\001\000\050\007\061\010\124\011" +
    "\100\012\114\016\075\040\312\041\071\043\076\044\123" +
    "\046\065\047\111\050\104\051\116\052\115\053\112\056" +
    "\070\063\077\065\117\067\067\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\007\061\010\134\011\315\012" +
    "\114\016\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\007\061\010\134\011\323\012\114\016\075\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\132\327\001\001\000\020\007\061\010\124\011\100" +
    "\012\114\016\075\043\330\044\123\001\001\000\002\001" +
    "\001\000\004\133\332\001\001\000\050\007\061\010\124" +
    "\011\100\012\114\016\075\041\333\042\334\043\076\044" +
    "\123\046\065\047\111\050\104\051\116\052\115\053\112" +
    "\056\070\063\077\065\117\067\067\001\001\000\002\001" +
    "\001\000\004\064\341\001\001\000\004\153\336\001\001" +
    "\000\050\007\061\010\124\011\100\012\114\016\075\040" +
    "\337\041\071\043\076\044\123\046\065\047\111\050\104" +
    "\051\116\052\115\053\112\056\070\063\077\065\117\067" +
    "\067\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\134\343\001\001\000\050\007\061\010" +
    "\124\011\100\012\114\016\075\041\333\042\344\043\076" +
    "\044\123\046\065\047\111\050\104\051\116\052\115\053" +
    "\112\056\070\063\077\065\117\067\067\001\001\000\002" +
    "\001\001\000\004\006\346\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\070\352\001\001\000\004\152\354" +
    "\001\001\000\050\007\061\010\124\011\100\012\114\016" +
    "\075\041\333\042\353\043\076\044\123\046\065\047\111" +
    "\050\104\051\116\052\115\053\112\056\070\063\077\065" +
    "\117\067\067\001\001\000\002\001\001\000\020\007\061" +
    "\010\124\011\100\012\114\016\075\043\355\044\123\001" +
    "\001\000\004\006\356\001\001\000\020\007\061\010\124" +
    "\011\100\012\114\016\075\043\357\044\123\001\001\000" +
    "\004\006\360\001\001\000\020\007\061\010\124\011\100" +
    "\012\114\016\075\043\361\044\123\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\066\366" +
    "\001\001\000\004\150\370\001\001\000\050\007\061\010" +
    "\124\011\100\012\114\016\075\041\333\042\367\043\076" +
    "\044\123\046\065\047\111\050\104\051\116\052\115\053" +
    "\112\056\070\063\077\065\117\067\067\001\001\000\002" +
    "\001\001\000\020\007\061\010\124\011\100\012\114\016" +
    "\075\043\371\044\123\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\007\061\010\134\011\374\012\114\016" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\007\061\010\134\011\377\012\114\016\075\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\007\061\010\134\011\u0103\012\114\016\075\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\061\u0108\001\001" +
    "\000\004\127\u010d\001\001\000\004\126\u0109\001\001\000" +
    "\002\001\001\000\010\007\264\010\u010a\062\u010b\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\072\u0110\001\001" +
    "\000\016\007\061\010\134\011\u0112\012\114\016\075\017" +
    "\u0111\001\001\000\002\001\001\000\004\020\u0113\001\001" +
    "\000\002\001\001\000\004\073\u0115\001\001\000\014\007" +
    "\061\010\134\011\u0116\012\114\016\075\001\001\000\004" +
    "\020\u0117\001\001\000\002\001\001\000\002\001\001\000" +
    "\050\007\061\010\124\011\100\012\114\016\075\041\333" +
    "\042\u011a\043\076\044\123\046\065\047\111\050\104\051" +
    "\116\052\115\053\112\056\070\063\077\065\117\067\067" +
    "\001\001\000\002\001\001\000\004\146\u011c\001\001\000" +
    "\004\066\u011d\001\001\000\002\001\001\000\014\007\061" +
    "\010\134\011\u011f\012\114\016\075\001\001\000\002\001" +
    "\001\000\004\007\u0121\001\001\000\004\104\u0122\001\001" +
    "\000\006\021\u0123\026\u0126\001\001\000\004\023\u012e\001" +
    "\001\000\004\110\u0129\001\001\000\004\112\u0127\001\001" +
    "\000\002\001\001\000\022\007\061\010\124\011\233\012" +
    "\114\014\237\016\075\044\232\045\u0128\001\001\000\002" +
    "\001\001\000\004\012\u012a\001\001\000\002\001\001\000" +
    "\004\111\u012c\001\001\000\006\021\u012d\026\u0126\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\105\u0130\001" +
    "\001\000\004\007\u0131\001\001\000\004\106\u0132\001\001" +
    "\000\006\021\u0133\026\u0126\001\001\000\004\023\u0134\001" +
    "\001\000\002\001\001\000\004\117\u0136\001\001\000\012" +
    "\022\044\024\045\025\046\036\u0137\001\001\000\002\001" +
    "\001\000\012\024\u0139\025\046\031\u013a\037\u013b\001\001" +
    "\000\004\007\u0142\001\001\000\002\001\001\000\004\032" +
    "\u013c\001\001\000\002\001\001\000\004\115\u013e\001\001" +
    "\000\010\024\u0139\025\046\037\u013f\001\001\000\004\032" +
    "\u0140\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\u0144\001\001\000\002\001\001\000" +
    "\004\007\u0146\001\001\000\012\005\u0148\021\u0147\026\u0126" +
    "\030\u0149\001\001\000\004\023\u014c\001\001\000\002\001" +
    "\001\000\004\033\u014a\001\001\000\010\027\u014b\034\025" +
    "\035\024\001\001\000\002\001\001\000\004\006\u014d\001" +
    "\001\000\006\003\u014e\004\005\001\001\000\002\001\001" +
    "\000\004\007\u0150\001\001\000\012\005\u0151\021\u0147\026" +
    "\u0126\030\u0149\001\001\000\002\001\001\000\006\003\u0153" +
    "\004\005\001\001\000\002\001\001\000\004\007\u0155\001" +
    "\001\000\012\005\u0156\021\u0147\026\u0126\030\u0149\001\001" +
    "\000\002\001\001\000\004\007\u0158\001\001\000\012\005" +
    "\u0159\021\u0147\026\u0126\030\u0149\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("Error sintáctico en la fila " + fila + ", columna " + columna + ": Token inesperado <" + lexema + ">");
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("¡No se pudo recuperar!");
        System.out.println("Terror sintáctico en la fila " + fila + ", columna " + columna + ": Token inesperado <" + lexema + ">");
    }
    public void guardar_id(){}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {


    //Esta clase contiene tablas y pilas semanticas
    private Semanter sm = new Semanter();

    private void print(String msg) {
        //System.out.println("Parser: " + msg);
    }

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // EXP ::= LITERAL 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // EXP ::= LAMFUNC 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // EXP ::= VAR 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // EXP ::= smbmenosmenos NT$75 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$75
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // NT$75 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$75",130, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // EXP ::= EXP smbmenosmenos 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // EXP ::= smbmasmas NT$74 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$74
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // NT$74 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$74",129, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // EXP ::= EXP smbmasmas 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // EXP ::= smbadmiracion NT$73 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$73
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // NT$73 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$73",128, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // EXP ::= EXP smbdivisionentera NT$72 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$72
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // NT$72 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$72",127, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // EXP ::= EXP smbdivision NT$71 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$71
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // NT$71 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$71",126, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // EXP ::= EXP smbmultiplicacion NT$70 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$70
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // NT$70 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$70",125, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // EXP ::= smbmenos NT$69 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$69
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // NT$69 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$69",124, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // EXP ::= EXP smbmenos NT$68 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$68
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // NT$68 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$68",123, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // EXP ::= EXP smbmas NT$67 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$67
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // NT$67 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$67",122, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // EXP ::= EXP smband NT$66 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$66
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // NT$66 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$66",121, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // EXP ::= EXP smbor NT$65 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$65
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // NT$65 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$65",120, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // EXP ::= EXP smbdiferente NT$64 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$64
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // NT$64 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$64",119, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // EXP ::= EXP smbmenor NT$63 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$63
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // NT$63 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$63",118, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // EXP ::= EXP smbmenorigual NT$62 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$62
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // NT$62 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$62",117, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // EXP ::= EXP smbmayor NT$61 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$61
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // NT$61 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$61",116, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // EXP ::= EXP smbmayorigual NT$60 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$60
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // NT$60 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$60",115, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // EXP ::= EXP smbigualigual NT$59 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$59
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // NT$59 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$59",114, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // EXP ::= smbparentabrir NT$58 EXP smbparentcerrar 
            {
              String RESULT =null;
              // propagate RESULT from NT$58
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // NT$58 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$58",113, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // STRING ::= smbstring 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STRING",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // ARRAYLIST2 ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARRAYLIST2",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // ARRAYLIST2 ::= smbcoma NT$57 LITERAL ARRAYLIST2 
            {
              String RESULT =null;
              // propagate RESULT from NT$57
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARRAYLIST2",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // NT$57 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$57",112, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // ARRAYLIST ::= smbllaveabrir NT$56 LITERAL ARRAYLIST2 smbllavecerrar 
            {
              String RESULT =null;
              // propagate RESULT from NT$56
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARRAYLIST",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // NT$56 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$56",111, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // LITERAL ::= smboct 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // LITERAL ::= smbhex 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // LITERAL ::= smbdec 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // LITERAL ::= smbcharlit 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // EXPASIARR ::= error 
            {
              String RESULT =null;
		 print("Error en la asignacion"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPASIARR",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // EXPASIARR ::= EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPASIARR",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // EXPASIARR ::= ASIGN 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPASIARR",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // EXPASIARR ::= ARRAYLIST 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPASIARR",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // ASIGN ::= VAR smbdivisionigual NT$55 EXPASIARR 
            {
              String RESULT =null;
              // propagate RESULT from NT$55
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGN",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // NT$55 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$55",110, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // ASIGN ::= VAR smbmultiplicacionigual NT$54 EXPASIARR 
            {
              String RESULT =null;
              // propagate RESULT from NT$54
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGN",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // NT$54 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$54",109, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // ASIGN ::= VAR smbmenosigual NT$53 EXPASIARR 
            {
              String RESULT =null;
              // propagate RESULT from NT$53
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGN",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // NT$53 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$53",108, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // ASIGN ::= VAR smbmasigual NT$52 EXPASIARR 
            {
              String RESULT =null;
              // propagate RESULT from NT$52
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGN",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // NT$52 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$52",107, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // ASIGN ::= VAR smbigual NT$51 EXPASIARR 
            {
              String RESULT =null;
              // propagate RESULT from NT$51
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGN",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // NT$51 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$51",106, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // ASIGOEXP ::= EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGOEXP",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // ASIGOEXP ::= ASIGN 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGOEXP",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // GENBLOCK ::= INSTRUC 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GENBLOCK",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // GENBLOCK ::= smbllaveabrir NT$50 INSTLIST smbllavecerrar 
            {
              String RESULT =null;
              // propagate RESULT from NT$50
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GENBLOCK",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // NT$50 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$50",105, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // FORPARAM ::= smbparentabrir NT$49 ASIGOEXP PUCOMA ASIGOEXP PUCOMA ASIGOEXP smbparentcerrar 
            {
              String RESULT =null;
              // propagate RESULT from NT$49
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FORPARAM",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // NT$49 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$49",104, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // FOR ::= smbfor NT$48 FORPARAM GENBLOCK 
            {
              String RESULT =null;
              // propagate RESULT from NT$48
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // NT$48 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$48",103, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // WHLPARAM ::= smbparentabrir NT$47 ASIGOEXP smbparentcerrar 
            {
              String RESULT =null;
              // propagate RESULT from NT$47
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WHLPARAM",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // NT$47 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$47",102, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // WHILE ::= smbwhile NT$46 WHLPARAM GENBLOCK 
            {
              String RESULT =null;
              // propagate RESULT from NT$46
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WHILE",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // NT$46 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$46",101, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // DOWHILE ::= smbdo NT$44 GENBLOCK smbwhile NT$45 WHLPARAM 
            {
              String RESULT =null;
              // propagate RESULT from NT$45
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DOWHILE",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // NT$45 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$45",100, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // NT$44 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$44",99, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // SWTHCS ::= smbdefault NT$42 smbdospuntos NT$43 INSTLIST 
            {
              String RESULT =null;
              // propagate RESULT from NT$43
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWTHCS",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // NT$43 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$43",98, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // NT$42 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$42",97, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // SWTHCS ::= smbcase NT$40 LITERAL smbdospuntos NT$41 INSTLIST SWTHCS 
            {
              String RESULT =null;
              // propagate RESULT from NT$41
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWTHCS",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // NT$41 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$41",96, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // NT$40 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$40",95, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // SWTHBLOCK ::= smbllaveabrir NT$39 SWTHCS smbllavecerrar 
            {
              String RESULT =null;
              // propagate RESULT from NT$39
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWTHBLOCK",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // NT$39 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$39",94, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // SWITCH ::= smbswitch NT$36 smbparentabrir NT$37 VAR smbparentcerrar NT$38 SWTHBLOCK 
            {
              String RESULT =null;
              // propagate RESULT from NT$38
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCH",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // NT$38 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$38",93, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // NT$37 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$37",92, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // NT$36 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$36",91, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // IFELSE ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IFELSE",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // IFELSE ::= smbelse NT$35 GENBLOCK 
            {
              String RESULT =null;
              // propagate RESULT from NT$35
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IFELSE",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // NT$35 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$35",90, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // IF ::= smbif NT$32 smbparentabrir NT$33 ASIGOEXP smbparentcerrar NT$34 GENBLOCK IFELSE 
            {
              String RESULT =null;
              // propagate RESULT from NT$34
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // NT$34 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$34",89, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // NT$33 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$33",88, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // NT$32 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$32",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // CONTINUE ::= smbcontinue 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTINUE",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // BREAK ::= smbbreak 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BREAK",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // RETURN ::= smbreturn NT$31 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$31
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // NT$31 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$31",86, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // RETURN ::= smbreturn 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // RDPARAM1 ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RDPARAM1",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // RDPARAM1 ::= VAR 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RDPARAM1",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // RDPARAM ::= error NT$30 smbparentcerrar 
            {
              String RESULT =null;
              // propagate RESULT from NT$30
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RDPARAM",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // NT$30 ::= 
            {
              String RESULT =null;
 print("Mas parametros de los esperados"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$30",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // RDPARAM ::= smbparentabrir NT$29 RDPARAM1 smbparentcerrar 
            {
              String RESULT =null;
              // propagate RESULT from NT$29
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RDPARAM",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // NT$29 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$29",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // READ ::= smbread NT$28 RDPARAM 
            {
              String RESULT =null;
              // propagate RESULT from NT$28
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // NT$28 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$28",83, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // WRTPARAM1 ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WRTPARAM1",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // WRTPARAM1 ::= smbcoma STRING WRTPARAM1 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WRTPARAM1",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // WRTPARAM1 ::= smbcoma EXP WRTPARAM1 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WRTPARAM1",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // WRTPARAM ::= error NT$27 smbparentcerrar 
            {
              String RESULT =null;
              // propagate RESULT from NT$27
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WRTPARAM",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // NT$27 ::= 
            {
              String RESULT =null;
 print("Debe venir al menos un parametro"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$27",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // WRTPARAM ::= smbparentabrir NT$26 STRING WRTPARAM1 smbparentcerrar 
            {
              String RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WRTPARAM",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // NT$26 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$26",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // WRTPARAM ::= smbparentabrir NT$25 EXP WRTPARAM1 smbparentcerrar 
            {
              String RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WRTPARAM",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // NT$25 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$25",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // WRITE ::= smbwrite NT$24 WRTPARAM 
            {
              String RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WRITE",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // NT$24 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$24",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // INSTRUC ::= error NT$23 PUCOMA 
            {
              String RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUC",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // NT$23 ::= 
            {
              String RESULT =null;
 print("Error en la instruccion"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$23",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // INSTRUC ::= IF 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUC",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // INSTRUC ::= SWITCH 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUC",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // INSTRUC ::= DOWHILE PUCOMA 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUC",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // INSTRUC ::= WHILE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUC",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // INSTRUC ::= FOR 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUC",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // INSTRUC ::= WRITE PUCOMA 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUC",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // INSTRUC ::= READ PUCOMA 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUC",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // INSTRUC ::= RETURN PUCOMA 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUC",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // INSTRUC ::= BREAK PUCOMA 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUC",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // INSTRUC ::= CONTINUE PUCOMA 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUC",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // INSTRUC ::= ASIGOEXP PUCOMA 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUC",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // INSTLIST ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTLIST",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // INSTLIST ::= INSTRUC INSTLIST 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTLIST",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // FUNVARDEC ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNVARDEC",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // FUNVARDEC ::= VARDECL PUCOMA NT$22 FUNVARDEC 
            {
              String RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNVARDEC",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // NT$22 ::= 
            {
              String RESULT =null;
 sm.declarar_variables(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$22",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // FUNCBLOCK ::= smbllaveabrir NT$21 FUNVARDEC INSTLIST smbllavecerrar 
            {
              String RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCBLOCK",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NT$21 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$21",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // FUNPARDEC ::= VARTIPO IDENTIF 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNPARDEC",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // FUNPARAM1 ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNPARAM1",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // FUNPARAM1 ::= smbcoma NT$20 FUNPARDEC FUNPARAM1 
            {
              String RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNPARAM1",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NT$20 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$20",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // FUNPARAM ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNPARAM",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // FUNPARAM ::= FUNPARDEC FUNPARAM1 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNPARAM",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // FUNCPARAM ::= smbparentabrir NT$19 FUNPARAM smbparentcerrar 
            {
              String RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCPARAM",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // NT$19 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$19",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FUNCTIPO1 ::= smbvoid 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTIPO1",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // FUNCTIPO1 ::= smbshort 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTIPO1",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // FUNCTIPO1 ::= smblong 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTIPO1",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // FUNCTIPO1 ::= smbint 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTIPO1",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // FUNCTIPO1 ::= smbchar 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTIPO1",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // FUNCTIPO ::= FUNCTIPO1 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTIPO",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // FUNCTIPO ::= smbconst NT$18 FUNCTIPO1 
            {
              String RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTIPO",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$18 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$18",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FUNCDEFIN ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCDEFIN",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FUNCDEFIN ::= FUNCTIPO IDENTIF FUNCPARAM FUNCBLOCK FUNCDEFIN 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCDEFIN",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // VARASIG ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARASIG",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // VARASIG ::= smbigual NT$17 EXPASIARR 
            {
              String RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARASIG",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$17 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$17",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // VARARRAY ::= VARASIG 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARARRAY",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // VARARRAY ::= smbcuadradoabrir NT$15 LITERAL smbcuadradocerrar NT$16 VARARRAY 
            {
              String RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARARRAY",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$16 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$16",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$15 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$15",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // VARTIPO1 ::= smbshort 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARTIPO1",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // VARTIPO1 ::= smblong 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARTIPO1",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // VARTIPO1 ::= smbint 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARTIPO1",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // VARTIPO1 ::= smbchar 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARTIPO1",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // VARTIPO ::= VARTIPO1 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARTIPO",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // VARTIPO ::= smbconst NT$14 VARTIPO1 
            {
              String RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARTIPO",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$14 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$14",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // VARDECL2 ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARDECL2",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // VARDECL2 ::= smbcoma NT$12 IDENTIF NT$13 VARARRAY VARDECL2 
            {
              String RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARDECL2",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$13 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 sm.guardar_id(i, true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$13",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$12 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$12",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // VARDECL ::= VARTIPO NT$10 IDENTIF NT$11 VARARRAY VARDECL2 
            {
              String RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARDECL",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$11 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 sm.guardar_id(i, true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$11",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$10 ::= 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 sm.guardar_tipo(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$10",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // VAROFUNC2 ::= FUNCPARAM FUNCBLOCK FUNCDEFIN 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAROFUNC2",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // VAROFUNC2 ::= VARARRAY VARDECL2 PUCOMA VAROFUNC 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAROFUNC2",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // VAROFUNC1 ::= error NT$9 VAROFUNC 
            {
              String RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAROFUNC1",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$9 ::= 
            {
              String RESULT =null;
 print("Error en la declaración"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$9",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VAROFUNC1 ::= smbvoid NT$8 IDENTIF FUNCPARAM FUNCBLOCK FUNCDEFIN 
            {
              String RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAROFUNC1",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$8 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$8",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VAROFUNC1 ::= smbshort NT$7 IDENTIF VAROFUNC2 
            {
              String RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAROFUNC1",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$7 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$7",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VAROFUNC1 ::= smblong NT$6 IDENTIF VAROFUNC2 
            {
              String RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAROFUNC1",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$6 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$6",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VAROFUNC1 ::= smbint NT$5 IDENTIF VAROFUNC2 
            {
              String RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAROFUNC1",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$5 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$5",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VAROFUNC1 ::= smbchar NT$4 IDENTIF VAROFUNC2 
            {
              String RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAROFUNC1",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$4 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VAROFUNC ::= VAROFUNC1 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAROFUNC",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VAROFUNC ::= smbconst NT$3 VAROFUNC1 
            {
              String RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAROFUNC",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$3 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LAMFUNCP2 ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LAMFUNCP2",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LAMFUNCP2 ::= smbcoma NT$2 EXP LAMFUNCP2 
            {
              String RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LAMFUNCP2",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$2 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LAMFUNCP ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LAMFUNCP",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LAMFUNCP ::= EXP LAMFUNCP2 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LAMFUNCP",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LAMFUNC ::= IDENTIF smbparentabrir NT$1 LAMFUNCP smbparentcerrar 
            {
              String RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LAMFUNC",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$1 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // VAR ::= IDENTIF smbcuadradoabrir NT$0 EXP smbcuadradocerrar 
            {
              String RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$0 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // VAR ::= IDENTIF 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // IDENTIF ::= smbidentificador 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDENTIF",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PUCOMA ::= smbpuntocoma 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PUCOMA",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= VAROFUNC 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

