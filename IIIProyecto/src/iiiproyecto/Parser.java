
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Nov 29 11:22:16 CST 2017
//----------------------------------------------------

package iiiproyecto;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Nov 29 11:22:16 CST 2017
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\335\000\002\002\004\000\002\002\003\000\002\006" +
    "\003\000\002\007\003\000\002\010\003\000\002\071\002" +
    "\000\002\010\007\000\002\072\002\000\002\016\007\000" +
    "\002\017\004\000\002\017\002\000\002\073\002\000\002" +
    "\020\006\000\002\020\002\000\002\074\002\000\002\003" +
    "\005\000\002\003\003\000\002\075\002\000\002\004\005" +
    "\000\002\076\002\000\002\004\005\000\002\077\002\000" +
    "\002\004\005\000\002\100\002\000\002\004\005\000\002" +
    "\101\002\000\002\102\002\000\002\004\011\000\002\103" +
    "\002\000\002\004\005\000\002\104\002\000\002\105\002" +
    "\000\002\005\011\000\002\106\002\000\002\005\007\000" +
    "\002\107\002\000\002\110\002\000\002\022\010\000\002" +
    "\111\002\000\002\112\002\000\002\023\010\000\002\023" +
    "\002\000\002\113\002\000\002\024\005\000\002\024\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\114\002\000\002\115\002\000\002" +
    "\021\010\000\002\021\003\000\002\116\002\000\002\026" +
    "\005\000\002\026\002\000\002\117\002\000\002\120\002" +
    "\000\002\027\011\000\002\027\002\000\002\121\002\000" +
    "\002\034\005\000\002\034\003\000\002\035\003\000\002" +
    "\035\003\000\002\035\003\000\002\035\003\000\002\035" +
    "\003\000\002\122\002\000\002\030\006\000\002\031\004" +
    "\000\002\031\002\000\002\123\002\000\002\032\006\000" +
    "\002\032\002\000\002\124\002\000\002\037\005\000\002" +
    "\125\002\000\002\033\007\000\002\126\002\000\002\036" +
    "\006\000\002\036\002\000\002\040\004\000\002\040\002" +
    "\000\002\041\004\000\002\041\004\000\002\041\004\000" +
    "\002\041\004\000\002\041\004\000\002\041\004\000\002" +
    "\041\003\000\002\041\003\000\002\041\004\000\002\041" +
    "\003\000\002\041\003\000\002\127\002\000\002\041\005" +
    "\000\002\130\002\000\002\056\005\000\002\131\002\000" +
    "\002\057\007\000\002\132\002\000\002\057\007\000\002" +
    "\133\002\000\002\057\005\000\002\060\005\000\002\060" +
    "\005\000\002\060\002\000\002\134\002\000\002\051\005" +
    "\000\002\135\002\000\002\061\006\000\002\136\002\000" +
    "\002\061\005\000\002\062\003\000\002\062\002\000\002" +
    "\050\003\000\002\137\002\000\002\050\005\000\002\047" +
    "\003\000\002\046\003\000\002\140\002\000\002\141\002" +
    "\000\002\142\002\000\002\063\013\000\002\143\002\000" +
    "\002\064\005\000\002\064\002\000\002\144\002\000\002" +
    "\145\002\000\002\146\002\000\002\053\012\000\002\147" +
    "\002\000\002\055\006\000\002\150\002\000\002\151\002" +
    "\000\002\054\011\000\002\152\002\000\002\153\002\000" +
    "\002\054\007\000\002\154\002\000\002\155\002\000\002" +
    "\052\010\000\002\156\002\000\002\065\006\000\002\157" +
    "\002\000\002\066\006\000\002\160\002\000\002\067\006" +
    "\000\002\161\002\000\002\070\012\000\002\162\002\000" +
    "\002\042\006\000\002\042\003\000\002\043\003\000\002" +
    "\043\003\000\002\163\002\000\002\044\006\000\002\164" +
    "\002\000\002\044\006\000\002\165\002\000\002\044\006" +
    "\000\002\166\002\000\002\044\006\000\002\167\002\000" +
    "\002\044\006\000\002\045\003\000\002\045\003\000\002" +
    "\045\003\000\002\045\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\170\002" +
    "\000\002\014\007\000\002\171\002\000\002\015\006\000" +
    "\002\015\002\000\002\013\003\000\002\172\002\000\002" +
    "\011\006\000\002\173\002\000\002\011\006\000\002\174" +
    "\002\000\002\011\006\000\002\175\002\000\002\011\006" +
    "\000\002\176\002\000\002\011\006\000\002\177\002\000" +
    "\002\011\006\000\002\200\002\000\002\011\006\000\002" +
    "\201\002\000\002\011\006\000\002\202\002\000\002\011" +
    "\006\000\002\203\002\000\002\011\006\000\002\204\002" +
    "\000\002\011\006\000\002\205\002\000\002\011\005\000" +
    "\002\206\002\000\002\011\006\000\002\207\002\000\002" +
    "\011\006\000\002\210\002\000\002\011\006\000\002\211" +
    "\002\000\002\011\005\000\002\011\004\000\002\212\002" +
    "\000\002\011\005\000\002\011\004\000\002\213\002\000" +
    "\002\011\005\000\002\011\003\000\002\011\003\000\002" +
    "\011\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u015d\000\020\003\011\006\007\007\014\016\012\017" +
    "\010\021\013\023\015\001\002\000\004\002\000\001\002" +
    "\000\004\002\u015f\001\002\000\004\002\ufff1\001\002\000" +
    "\004\066\ufff0\001\002\000\004\066\uffec\001\002\000\020" +
    "\003\uffe5\006\uffe5\007\uffe5\016\uffe5\017\uffe5\021\uffe5\023" +
    "\uffe5\001\002\000\004\066\uffee\001\002\000\004\066\uffea" +
    "\001\002\000\016\003\ufff3\006\ufff3\016\ufff3\017\ufff3\021" +
    "\ufff3\023\ufff3\001\002\000\004\066\uffe8\001\002\000\004" +
    "\066\017\001\002\000\066\027\ufffe\030\ufffe\031\ufffe\032" +
    "\ufffe\033\ufffe\034\ufffe\035\ufffe\036\ufffe\040\ufffe\041\ufffe" +
    "\042\ufffe\043\ufffe\044\ufffe\045\ufffe\046\ufffe\047\ufffe\050" +
    "\ufffe\051\ufffe\052\ufffe\053\ufffe\054\ufffe\055\ufffe\057\ufffe" +
    "\060\ufffe\061\ufffe\062\ufffe\001\002\000\004\057\uffe7\001" +
    "\002\000\004\057\022\001\002\000\016\006\uffbd\007\uffbd" +
    "\016\uffbd\017\uffbd\021\uffbd\060\uffbd\001\002\000\004\063" +
    "\024\001\002\000\070\003\uffb4\004\uffb4\006\uffb4\007\uffb4" +
    "\010\uffb4\012\uffb4\014\uffb4\015\uffb4\016\uffb4\017\uffb4\020" +
    "\uffb4\021\uffb4\022\uffb4\024\uffb4\025\uffb4\026\uffb4\037\uffb4" +
    "\040\uffb4\041\uffb4\044\uffb4\057\uffb4\064\uffb4\066\uffb4\067" +
    "\uffb4\070\uffb4\071\uffb4\072\uffb4\001\002\000\020\002\uffc6" +
    "\006\031\007\035\016\033\017\032\021\034\023\036\001" +
    "\002\000\004\066\uffc3\001\002\000\004\066\uffc9\001\002" +
    "\000\004\002\uffe6\001\002\000\004\066\uffc2\001\002\000" +
    "\004\066\uffc0\001\002\000\004\066\uffc1\001\002\000\004" +
    "\066\uffbf\001\002\000\014\006\uffc5\016\uffc5\017\uffc5\021" +
    "\uffc5\023\uffc5\001\002\000\004\066\uffbe\001\002\000\014" +
    "\006\031\016\033\017\032\021\034\023\036\001\002\000" +
    "\004\066\uffc4\001\002\000\004\066\017\001\002\000\004" +
    "\057\uffc8\001\002\000\004\057\022\001\002\000\004\063" +
    "\024\001\002\000\020\002\uffc6\006\031\007\035\016\033" +
    "\017\032\021\034\023\036\001\002\000\004\002\uffc7\001" +
    "\002\000\070\003\uffb0\004\uffb0\006\054\007\060\010\uffb0" +
    "\012\uffb0\014\uffb0\015\uffb0\016\056\017\055\020\uffb0\021" +
    "\057\022\uffb0\024\uffb0\025\uffb0\026\uffb0\037\uffb0\040\uffb0" +
    "\041\uffb0\044\uffb0\057\uffb0\064\uffb0\066\uffb0\067\uffb0\070" +
    "\uffb0\071\uffb0\072\uffb0\001\002\000\004\055\324\001\002" +
    "\000\004\066\uffde\001\002\000\004\066\uffd5\001\002\000" +
    "\056\003\113\004\077\010\125\012\064\014\111\015\114" +
    "\020\117\022\126\024\107\025\066\026\131\037\063\040" +
    "\072\041\106\044\076\057\124\064\uffae\066\017\067\070" +
    "\070\067\071\105\072\100\001\002\000\004\066\uffd4\001" +
    "\002\000\004\066\uffd2\001\002\000\004\066\uffd3\001\002" +
    "\000\004\066\uffd1\001\002\000\012\006\uffd7\016\uffd7\017" +
    "\uffd7\021\uffd7\001\002\000\012\006\054\016\056\017\055" +
    "\021\057\001\002\000\004\066\uffd6\001\002\000\026\037" +
    "\uff2f\040\uff2f\041\uff2f\044\uff2f\057\uff2f\066\uff2f\067\uff2f" +
    "\070\uff2f\071\uff2f\072\uff2f\001\002\000\056\003\uff75\004" +
    "\uff75\010\uff75\012\uff75\014\uff75\015\uff75\020\uff75\022\uff75" +
    "\024\uff75\025\uff75\026\uff75\037\uff75\040\uff75\041\uff75\044" +
    "\uff75\057\uff75\063\uff75\066\uff75\067\uff75\070\uff75\071\uff75" +
    "\072\uff75\001\002\000\066\027\ufffd\030\ufffd\031\ufffd\032" +
    "\ufffd\033\ufffd\034\ufffd\035\ufffd\036\ufffd\040\ufffd\041\ufffd" +
    "\042\ufffd\043\ufffd\044\ufffd\045\ufffd\046\ufffd\047\ufffd\050" +
    "\ufffd\051\ufffd\052\ufffd\053\ufffd\054\ufffd\055\ufffd\057\u0113" +
    "\060\ufffd\061\271\062\ufffd\001\002\000\006\003\uff95\057" +
    "\uff95\001\002\000\054\027\uff56\030\uff56\031\uff56\032\uff56" +
    "\033\uff56\034\uff56\035\uff56\036\uff56\040\uff56\041\uff56\043" +
    "\uff56\044\uff56\045\uff56\046\uff56\047\uff56\054\uff56\055\uff56" +
    "\056\uff56\060\uff56\062\uff56\064\uff56\001\002\000\054\027" +
    "\uff57\030\uff57\031\uff57\032\uff57\033\uff57\034\uff57\035\uff57" +
    "\036\uff57\040\uff57\041\uff57\043\uff57\044\uff57\045\uff57\046" +
    "\uff57\047\uff57\054\uff57\055\uff57\056\uff57\060\uff57\062\uff57" +
    "\064\uff57\001\002\000\004\055\324\001\002\000\026\037" +
    "\uff2c\040\uff2c\041\uff2c\044\uff2c\057\uff2c\066\uff2c\067\uff2c" +
    "\070\uff2c\071\uff2c\072\uff2c\001\002\000\064\003\uffa7\004" +
    "\uffa7\005\uffa7\010\uffa7\011\uffa7\012\uffa7\013\uffa7\014\uffa7" +
    "\015\uffa7\020\uffa7\022\uffa7\024\uffa7\025\uffa7\026\uffa7\037" +
    "\uffa7\040\uffa7\041\uffa7\044\uffa7\057\uffa7\064\uffa7\066\uffa7" +
    "\067\uffa7\070\uffa7\071\uffa7\072\uffa7\001\002\000\004\055" +
    "\324\001\002\000\062\003\113\004\077\005\uffae\010\125" +
    "\011\uffae\012\064\014\111\015\114\020\117\022\126\024" +
    "\107\025\066\026\131\037\063\040\072\041\106\044\076" +
    "\057\124\064\uffae\066\017\067\070\070\067\071\105\072" +
    "\100\001\002\000\026\037\uff37\040\uff37\041\uff37\044\uff37" +
    "\057\uff37\066\uff37\067\uff37\070\uff37\071\uff37\072\uff37\001" +
    "\002\000\004\055\uff8a\001\002\000\054\027\uff54\030\uff54" +
    "\031\uff54\032\uff54\033\uff54\034\uff54\035\uff54\036\uff54\040" +
    "\uff54\041\uff54\043\uff54\044\uff54\045\uff54\046\uff54\047\uff54" +
    "\054\uff54\055\uff54\056\uff54\060\uff54\062\uff54\064\uff54\001" +
    "\002\000\050\027\uff26\030\uff26\031\uff26\032\uff26\033\uff26" +
    "\034\uff26\035\uff26\036\uff26\040\uff26\041\uff26\043\uff26\044" +
    "\uff26\045\uff26\046\uff26\047\uff26\054\uff26\055\uff26\060\uff26" +
    "\062\uff26\001\002\000\004\055\324\001\002\000\064\003" +
    "\uffa3\004\uffa3\005\uffa3\010\uffa3\011\uffa3\012\uffa3\013\uffa3" +
    "\014\uffa3\015\uffa3\020\uffa3\022\uffa3\024\uffa3\025\uffa3\026" +
    "\uffa3\037\uffa3\040\uffa3\041\uffa3\044\uffa3\057\uffa3\064\uffa3" +
    "\066\uffa3\067\uffa3\070\uffa3\071\uffa3\072\uffa3\001\002\000" +
    "\044\027\150\030\162\031\153\032\160\033\164\034\145" +
    "\035\151\036\161\040\146\041\152\043\144\044\163\045" +
    "\157\046\155\047\154\055\uff66\060\uff66\001\002\000\054" +
    "\027\uff55\030\uff55\031\uff55\032\uff55\033\uff55\034\uff55\035" +
    "\uff55\036\uff55\040\uff55\041\uff55\043\uff55\044\uff55\045\uff55" +
    "\046\uff55\047\uff55\054\uff55\055\uff55\056\uff55\060\uff55\062" +
    "\uff55\064\uff55\001\002\000\026\037\uff29\040\uff29\041\uff29" +
    "\044\uff29\057\uff29\066\uff29\067\uff29\070\uff29\071\uff29\072" +
    "\uff29\001\002\000\004\057\uff72\001\002\000\004\055\324" +
    "\001\002\000\004\057\uff6e\001\002\000\004\064\353\001" +
    "\002\000\004\055\uffa2\001\002\000\004\057\uff88\001\002" +
    "\000\004\055\324\001\002\000\064\003\uffa4\004\uffa4\005" +
    "\uffa4\010\uffa4\011\uffa4\012\uffa4\013\uffa4\014\uffa4\015\uffa4" +
    "\020\uffa4\022\uffa4\024\uffa4\025\uffa4\026\uffa4\037\uffa4\040" +
    "\uffa4\041\uffa4\044\uffa4\057\uffa4\064\uffa4\066\uffa4\067\uffa4" +
    "\070\uffa4\071\uffa4\072\uffa4\001\002\000\030\037\uff8c\040" +
    "\uff8c\041\uff8c\044\uff8c\055\uff8d\057\uff8c\066\uff8c\067\uff8c" +
    "\070\uff8c\071\uff8c\072\uff8c\001\002\000\050\027\uff25\030" +
    "\uff25\031\uff25\032\uff25\033\uff25\034\uff25\035\uff25\036\uff25" +
    "\040\uff25\041\uff25\043\uff25\044\uff25\045\uff25\046\uff25\047" +
    "\uff25\054\uff25\055\uff25\060\uff25\062\uff25\001\002\000\004" +
    "\055\324\001\002\000\004\055\324\001\002\000\064\003" +
    "\uffa6\004\uffa6\005\uffa6\010\uffa6\011\uffa6\012\uffa6\013\uffa6" +
    "\014\uffa6\015\uffa6\020\uffa6\022\uffa6\024\uffa6\025\uffa6\026" +
    "\uffa6\037\uffa6\040\uffa6\041\uffa6\044\uffa6\057\uffa6\064\uffa6" +
    "\066\uffa6\067\uffa6\070\uffa6\071\uffa6\072\uffa6\001\002\000" +
    "\026\037\uff4d\040\uff4d\041\uff4d\044\uff4d\057\uff4d\066\uff4d" +
    "\067\uff4d\070\uff4d\071\uff4d\072\uff4d\001\002\000\004\055" +
    "\uff89\001\002\000\004\057\uff81\001\002\000\006\055\uff67" +
    "\060\uff67\001\002\000\060\027\uff27\030\uff27\031\uff27\032" +
    "\uff27\033\uff27\034\uff27\035\uff27\036\uff27\040\uff27\041\uff27" +
    "\042\234\043\uff27\044\uff27\045\uff27\046\uff27\047\uff27\050" +
    "\231\051\233\052\232\053\230\054\uff27\055\uff27\060\uff27" +
    "\001\002\000\006\003\uffa0\057\uffa0\001\002\000\006\003" +
    "\134\057\133\001\002\000\030\037\uff9e\040\uff9e\041\uff9e" +
    "\044\uff9e\057\uff9e\065\uff9c\066\uff9e\067\uff9e\070\uff9e\071" +
    "\uff9e\072\uff9e\001\002\000\004\060\uff9a\001\002\000\004" +
    "\055\uff9f\001\002\000\004\060\137\001\002\000\004\055" +
    "\uff99\001\002\000\004\065\202\001\002\000\026\037\063" +
    "\040\072\041\106\044\076\057\124\066\017\067\070\070" +
    "\067\071\105\072\100\001\002\000\050\027\uff27\030\uff27" +
    "\031\uff27\032\uff27\033\uff27\034\uff27\035\uff27\036\uff27\040" +
    "\uff27\041\uff27\043\uff27\044\uff27\045\uff27\046\uff27\047\uff27" +
    "\054\uff27\055\uff27\060\uff27\062\uff27\001\002\000\044\027" +
    "\150\030\162\031\153\032\160\033\164\034\145\035\151" +
    "\036\161\040\146\041\152\043\144\044\163\045\157\046" +
    "\155\047\154\054\156\060\uff96\001\002\000\026\037\uff3b" +
    "\040\uff3b\041\uff3b\044\uff3b\057\uff3b\066\uff3b\067\uff3b\070" +
    "\uff3b\071\uff3b\072\uff3b\001\002\000\026\037\uff41\040\uff41" +
    "\041\uff41\044\uff41\057\uff41\066\uff41\067\uff41\070\uff41\071" +
    "\uff41\072\uff41\001\002\000\050\027\uff2d\030\uff2d\031\uff2d" +
    "\032\uff2d\033\uff2d\034\uff2d\035\uff2d\036\uff2d\040\uff2d\041" +
    "\uff2d\043\uff2d\044\uff2d\045\uff2d\046\uff2d\047\uff2d\054\uff2d" +
    "\055\uff2d\060\uff2d\062\uff2d\001\002\000\004\060\220\001" +
    "\002\000\026\037\uff4b\040\uff4b\041\uff4b\044\uff4b\057\uff4b" +
    "\066\uff4b\067\uff4b\070\uff4b\071\uff4b\072\uff4b\001\002\000" +
    "\026\037\uff3f\040\uff3f\041\uff3f\044\uff3f\057\uff3f\066\uff3f" +
    "\067\uff3f\070\uff3f\071\uff3f\072\uff3f\001\002\000\050\027" +
    "\uff2a\030\uff2a\031\uff2a\032\uff2a\033\uff2a\034\uff2a\035\uff2a" +
    "\036\uff2a\040\uff2a\041\uff2a\043\uff2a\044\uff2a\045\uff2a\046" +
    "\uff2a\047\uff2a\054\uff2a\055\uff2a\060\uff2a\062\uff2a\001\002" +
    "\000\026\037\uff47\040\uff47\041\uff47\044\uff47\057\uff47\066" +
    "\uff47\067\uff47\070\uff47\071\uff47\072\uff47\001\002\000\026" +
    "\037\uff31\040\uff31\041\uff31\044\uff31\057\uff31\066\uff31\067" +
    "\uff31\070\uff31\071\uff31\072\uff31\001\002\000\026\037\uff33" +
    "\040\uff33\041\uff33\044\uff33\057\uff33\066\uff33\067\uff33\070" +
    "\uff33\071\uff33\072\uff33\001\002\000\030\037\063\040\072" +
    "\041\106\044\076\057\124\065\202\066\017\067\070\070" +
    "\067\071\105\072\100\001\002\000\026\037\uff35\040\uff35" +
    "\041\uff35\044\uff35\057\uff35\066\uff35\067\uff35\070\uff35\071" +
    "\uff35\072\uff35\001\002\000\026\037\uff45\040\uff45\041\uff45" +
    "\044\uff45\057\uff45\066\uff45\067\uff45\070\uff45\071\uff45\072" +
    "\uff45\001\002\000\026\037\uff3d\040\uff3d\041\uff3d\044\uff3d" +
    "\057\uff3d\066\uff3d\067\uff3d\070\uff3d\071\uff3d\072\uff3d\001" +
    "\002\000\026\037\uff49\040\uff49\041\uff49\044\uff49\057\uff49" +
    "\066\uff49\067\uff49\070\uff49\071\uff49\072\uff49\001\002\000" +
    "\026\037\uff39\040\uff39\041\uff39\044\uff39\057\uff39\066\uff39" +
    "\067\uff39\070\uff39\071\uff39\072\uff39\001\002\000\026\037" +
    "\uff43\040\uff43\041\uff43\044\uff43\057\uff43\066\uff43\067\uff43" +
    "\070\uff43\071\uff43\072\uff43\001\002\000\026\037\063\040" +
    "\072\041\106\044\076\057\124\066\017\067\070\070\067" +
    "\071\105\072\100\001\002\000\050\027\uff42\030\uff42\031" +
    "\uff42\032\uff42\033\uff42\034\uff42\035\uff42\036\uff42\040\146" +
    "\041\152\043\144\044\163\045\157\046\155\047\154\054" +
    "\uff42\055\uff42\060\uff42\062\uff42\001\002\000\026\037\063" +
    "\040\072\041\106\044\076\057\124\066\017\067\070\070" +
    "\067\071\105\072\100\001\002\000\050\027\uff38\030\uff38" +
    "\031\uff38\032\uff38\033\uff38\034\uff38\035\uff38\036\uff38\040" +
    "\146\041\152\043\uff38\044\163\045\uff38\046\uff38\047\uff38" +
    "\054\uff38\055\uff38\060\uff38\062\uff38\001\002\000\026\037" +
    "\063\040\072\041\106\044\076\057\124\066\017\067\070" +
    "\070\067\071\105\072\100\001\002\000\050\027\uff48\030" +
    "\uff48\031\uff48\032\uff48\033\uff48\034\uff48\035\uff48\036\uff48" +
    "\040\146\041\152\043\144\044\163\045\157\046\155\047" +
    "\154\054\uff48\055\uff48\060\uff48\062\uff48\001\002\000\026" +
    "\037\063\040\072\041\106\044\076\057\124\066\017\067" +
    "\070\070\067\071\105\072\100\001\002\000\050\027\150" +
    "\030\162\031\153\032\160\033\164\034\145\035\uff3c\036" +
    "\uff3c\040\146\041\152\043\144\044\163\045\157\046\155" +
    "\047\154\054\uff3c\055\uff3c\060\uff3c\062\uff3c\001\002\000" +
    "\026\037\063\040\072\041\106\044\076\057\124\066\017" +
    "\067\070\070\067\071\105\072\100\001\002\000\050\027" +
    "\uff44\030\uff44\031\uff44\032\uff44\033\uff44\034\uff44\035\uff44" +
    "\036\uff44\040\146\041\152\043\144\044\163\045\157\046" +
    "\155\047\154\054\uff44\055\uff44\060\uff44\062\uff44\001\002" +
    "\000\026\037\063\040\072\041\106\044\076\057\124\066" +
    "\017\067\070\070\067\071\105\072\100\001\002\000\050" +
    "\027\uff34\030\uff34\031\uff34\032\uff34\033\uff34\034\uff34\035" +
    "\uff34\036\uff34\040\146\041\152\043\uff34\044\163\045\uff34" +
    "\046\uff34\047\uff34\054\uff34\055\uff34\060\uff34\062\uff34\001" +
    "\002\000\006\054\156\060\uff96\001\002\000\006\054\uff4e" +
    "\060\uff4e\001\002\000\044\027\150\030\162\031\153\032" +
    "\160\033\164\034\145\035\151\036\161\040\146\041\152" +
    "\043\144\044\163\045\157\046\155\047\154\054\156\060" +
    "\uff96\001\002\000\004\060\uff98\001\002\000\004\060\uff97" +
    "\001\002\000\026\037\063\040\072\041\106\044\076\057" +
    "\124\066\017\067\070\070\067\071\105\072\100\001\002" +
    "\000\050\027\uff32\030\uff32\031\uff32\032\uff32\033\uff32\034" +
    "\uff32\035\uff32\036\uff32\040\146\041\152\043\uff32\044\163" +
    "\045\uff32\046\uff32\047\uff32\054\uff32\055\uff32\060\uff32\062" +
    "\uff32\001\002\000\026\037\063\040\072\041\106\044\076" +
    "\057\124\066\017\067\070\070\067\071\105\072\100\001" +
    "\002\000\050\027\uff30\030\uff30\031\uff30\032\uff30\033\uff30" +
    "\034\uff30\035\uff30\036\uff30\040\146\041\152\043\uff30\044" +
    "\163\045\uff30\046\uff30\047\uff30\054\uff30\055\uff30\060\uff30" +
    "\062\uff30\001\002\000\026\037\063\040\072\041\106\044" +
    "\076\057\124\066\017\067\070\070\067\071\105\072\100" +
    "\001\002\000\050\027\uff46\030\uff46\031\uff46\032\uff46\033" +
    "\uff46\034\uff46\035\uff46\036\uff46\040\146\041\152\043\144" +
    "\044\163\045\157\046\155\047\154\054\uff46\055\uff46\060" +
    "\uff46\062\uff46\001\002\000\026\037\063\040\072\041\106" +
    "\044\076\057\124\066\017\067\070\070\067\071\105\072" +
    "\100\001\002\000\050\027\150\030\162\031\153\032\160" +
    "\033\164\034\145\035\uff3e\036\161\040\146\041\152\043" +
    "\144\044\163\045\157\046\155\047\154\054\uff3e\055\uff3e" +
    "\060\uff3e\062\uff3e\001\002\000\026\037\063\040\072\041" +
    "\106\044\076\057\124\066\017\067\070\070\067\071\105" +
    "\072\100\001\002\000\050\027\uff4a\030\162\031\153\032" +
    "\160\033\164\034\uff4a\035\uff4a\036\uff4a\040\146\041\152" +
    "\043\144\044\163\045\157\046\155\047\154\054\uff4a\055" +
    "\uff4a\060\uff4a\062\uff4a\001\002\000\004\055\uff9d\001\002" +
    "\000\026\037\063\040\072\041\106\044\076\057\124\066" +
    "\017\067\070\070\067\071\105\072\100\001\002\000\050" +
    "\027\uff40\030\162\031\153\032\160\033\164\034\uff40\035" +
    "\uff40\036\uff40\040\146\041\152\043\144\044\163\045\157" +
    "\046\155\047\154\054\uff40\055\uff40\060\uff40\062\uff40\001" +
    "\002\000\026\037\063\040\072\041\106\044\076\057\124" +
    "\066\017\067\070\070\067\071\105\072\100\001\002\000" +
    "\050\027\uff3a\030\uff3a\031\uff3a\032\uff3a\033\uff3a\034\uff3a" +
    "\035\uff3a\036\uff3a\040\146\041\152\043\uff3a\044\163\045" +
    "\157\046\155\047\154\054\uff3a\055\uff3a\060\uff3a\062\uff3a" +
    "\001\002\000\006\054\156\060\uff96\001\002\000\004\060" +
    "\227\001\002\000\004\055\uff9b\001\002\000\032\003\uff5d" +
    "\037\uff5d\040\uff5d\041\uff5d\044\uff5d\057\uff5d\063\uff5d\066" +
    "\uff5d\067\uff5d\070\uff5d\071\uff5d\072\uff5d\001\002\000\032" +
    "\003\uff63\037\uff63\040\uff63\041\uff63\044\uff63\057\uff63\063" +
    "\uff63\066\uff63\067\uff63\070\uff63\071\uff63\072\uff63\001\002" +
    "\000\032\003\uff5f\037\uff5f\040\uff5f\041\uff5f\044\uff5f\057" +
    "\uff5f\063\uff5f\066\uff5f\067\uff5f\070\uff5f\071\uff5f\072\uff5f" +
    "\001\002\000\032\003\uff61\037\uff61\040\uff61\041\uff61\044" +
    "\uff61\057\uff61\063\uff61\066\uff61\067\uff61\070\uff61\071\uff61" +
    "\072\uff61\001\002\000\032\003\uff65\037\uff65\040\uff65\041" +
    "\uff65\044\uff65\057\uff65\063\uff65\066\uff65\067\uff65\070\uff65" +
    "\071\uff65\072\uff65\001\002\000\032\003\242\037\063\040" +
    "\072\041\106\044\076\057\124\063\241\066\017\067\070" +
    "\070\067\071\105\072\100\001\002\000\010\054\uff5a\055" +
    "\uff5a\060\uff5a\001\002\000\046\027\150\030\162\031\153" +
    "\032\160\033\164\034\145\035\151\036\161\040\146\041" +
    "\152\043\144\044\163\045\157\046\155\047\154\054\uff59" +
    "\055\uff59\060\uff59\001\002\000\010\054\uff64\055\uff64\060" +
    "\uff64\001\002\000\012\067\uff53\070\uff53\071\uff53\072\uff53" +
    "\001\002\000\010\054\uff58\055\uff58\060\uff58\001\002\000" +
    "\010\054\uff5b\055\uff5b\060\uff5b\001\002\000\012\067\070" +
    "\070\067\071\105\072\100\001\002\000\006\054\247\064" +
    "\uff4f\001\002\000\004\064\253\001\002\000\012\067\uff51" +
    "\070\uff51\071\uff51\072\uff51\001\002\000\012\067\070\070" +
    "\067\071\105\072\100\001\002\000\006\054\247\064\uff4f" +
    "\001\002\000\004\064\uff50\001\002\000\010\054\uff52\055" +
    "\uff52\060\uff52\001\002\000\032\003\242\037\063\040\072" +
    "\041\106\044\076\057\124\063\241\066\017\067\070\070" +
    "\067\071\105\072\100\001\002\000\010\054\uff60\055\uff60" +
    "\060\uff60\001\002\000\032\003\242\037\063\040\072\041" +
    "\106\044\076\057\124\063\241\066\017\067\070\070\067" +
    "\071\105\072\100\001\002\000\010\054\uff5e\055\uff5e\060" +
    "\uff5e\001\002\000\032\003\242\037\063\040\072\041\106" +
    "\044\076\057\124\063\241\066\017\067\070\070\067\071" +
    "\105\072\100\001\002\000\010\054\uff62\055\uff62\060\uff62" +
    "\001\002\000\032\003\242\037\063\040\072\041\106\044" +
    "\076\057\124\063\241\066\017\067\070\070\067\071\105" +
    "\072\100\001\002\000\010\054\uff5c\055\uff5c\060\uff5c\001" +
    "\002\000\004\057\265\001\002\000\004\066\uff80\001\002" +
    "\000\004\066\017\001\002\000\004\060\275\001\002\000" +
    "\006\060\ufffd\061\271\001\002\000\026\037\ufffc\040\ufffc" +
    "\041\ufffc\044\ufffc\057\ufffc\066\ufffc\067\ufffc\070\ufffc\071" +
    "\ufffc\072\ufffc\001\002\000\026\037\063\040\072\041\106" +
    "\044\076\057\124\066\017\067\070\070\067\071\105\072" +
    "\100\001\002\000\042\027\150\030\162\031\153\032\160" +
    "\033\164\034\145\035\151\036\161\040\146\041\152\043" +
    "\144\044\163\045\157\046\155\047\154\062\274\001\002" +
    "\000\062\027\ufffb\030\ufffb\031\ufffb\032\ufffb\033\ufffb\034" +
    "\ufffb\035\ufffb\036\ufffb\040\ufffb\041\ufffb\042\ufffb\043\ufffb" +
    "\044\ufffb\045\ufffb\046\ufffb\047\ufffb\050\ufffb\051\ufffb\052" +
    "\ufffb\053\ufffb\054\ufffb\055\ufffb\060\ufffb\062\ufffb\001\002" +
    "\000\004\063\uff7f\001\002\000\004\063\277\001\002\000" +
    "\006\005\uff7d\011\uff7d\001\002\000\064\003\uff7e\004\uff7e" +
    "\005\uff7e\010\uff7e\011\uff7e\012\uff7e\013\uff7e\014\uff7e\015" +
    "\uff7e\020\uff7e\022\uff7e\024\uff7e\025\uff7e\026\uff7e\037\uff7e" +
    "\040\uff7e\041\uff7e\044\uff7e\057\uff7e\064\uff7e\066\uff7e\067" +
    "\uff7e\070\uff7e\071\uff7e\072\uff7e\001\002\000\006\005\304" +
    "\011\303\001\002\000\004\064\317\001\002\000\004\056" +
    "\uff78\001\002\000\012\067\uff7b\070\uff7b\071\uff7b\072\uff7b" +
    "\001\002\000\012\067\070\070\067\071\105\072\100\001" +
    "\002\000\004\056\307\001\002\000\060\003\uff7a\004\uff7a" +
    "\005\uff7a\010\uff7a\011\uff7a\012\uff7a\014\uff7a\015\uff7a\020" +
    "\uff7a\022\uff7a\024\uff7a\025\uff7a\026\uff7a\037\uff7a\040\uff7a" +
    "\041\uff7a\044\uff7a\057\uff7a\066\uff7a\067\uff7a\070\uff7a\071" +
    "\uff7a\072\uff7a\001\002\000\060\003\113\004\077\005\uffae" +
    "\010\125\011\uffae\012\064\014\111\015\114\020\117\022" +
    "\126\024\107\025\066\026\131\037\063\040\072\041\106" +
    "\044\076\057\124\066\017\067\070\070\067\071\105\072" +
    "\100\001\002\000\006\005\304\011\303\001\002\000\004" +
    "\064\uff79\001\002\000\004\056\314\001\002\000\056\003" +
    "\uff77\004\uff77\010\uff77\012\uff77\014\uff77\015\uff77\020\uff77" +
    "\022\uff77\024\uff77\025\uff77\026\uff77\037\uff77\040\uff77\041" +
    "\uff77\044\uff77\057\uff77\064\uff77\066\uff77\067\uff77\070\uff77" +
    "\071\uff77\072\uff77\001\002\000\056\003\113\004\077\010" +
    "\125\012\064\014\111\015\114\020\117\022\126\024\107" +
    "\025\066\026\131\037\063\040\072\041\106\044\076\057" +
    "\124\064\uffae\066\017\067\070\070\067\071\105\072\100" +
    "\001\002\000\004\064\uff76\001\002\000\064\003\uff7c\004" +
    "\uff7c\005\uff7c\010\uff7c\011\uff7c\012\uff7c\013\uff7c\014\uff7c" +
    "\015\uff7c\020\uff7c\022\uff7c\024\uff7c\025\uff7c\026\uff7c\037" +
    "\uff7c\040\uff7c\041\uff7c\044\uff7c\057\uff7c\064\uff7c\066\uff7c" +
    "\067\uff7c\070\uff7c\071\uff7c\072\uff7c\001\002\000\026\037" +
    "\063\040\072\041\106\044\076\057\124\066\017\067\070" +
    "\070\067\071\105\072\100\001\002\000\042\027\150\030" +
    "\162\031\153\032\160\033\164\034\145\035\151\036\161" +
    "\040\146\041\152\043\144\044\163\045\157\046\155\047" +
    "\154\060\322\001\002\000\050\027\uff4c\030\uff4c\031\uff4c" +
    "\032\uff4c\033\uff4c\034\uff4c\035\uff4c\036\uff4c\040\uff4c\041" +
    "\uff4c\043\uff4c\044\uff4c\045\uff4c\046\uff4c\047\uff4c\054\uff4c" +
    "\055\uff4c\060\uff4c\062\uff4c\001\002\000\064\003\uffa9\004" +
    "\uffa9\005\uffa9\010\uffa9\011\uffa9\012\uffa9\013\uffa9\014\uffa9" +
    "\015\uffa9\020\uffa9\022\uffa9\024\uffa9\025\uffa9\026\uffa9\037" +
    "\uffa9\040\uffa9\041\uffa9\044\uffa9\057\uffa9\064\uffa9\066\uffa9" +
    "\067\uffa9\070\uffa9\071\uffa9\072\uffa9\001\002\000\100\003" +
    "\uffff\004\uffff\005\uffff\006\uffff\007\uffff\010\uffff\011\uffff" +
    "\012\uffff\013\uffff\014\uffff\015\uffff\016\uffff\017\uffff\020" +
    "\uffff\021\uffff\022\uffff\023\uffff\024\uffff\025\uffff\026\uffff" +
    "\037\uffff\040\uffff\041\uffff\044\uffff\057\uffff\064\uffff\066" +
    "\uffff\067\uffff\070\uffff\071\uffff\072\uffff\001\002\000\064" +
    "\003\uffa5\004\uffa5\005\uffa5\010\uffa5\011\uffa5\012\uffa5\013" +
    "\uffa5\014\uffa5\015\uffa5\020\uffa5\022\uffa5\024\uffa5\025\uffa5" +
    "\026\uffa5\037\uffa5\040\uffa5\041\uffa5\044\uffa5\057\uffa5\064" +
    "\uffa5\066\uffa5\067\uffa5\070\uffa5\071\uffa5\072\uffa5\001\002" +
    "\000\026\037\063\040\072\041\106\044\076\057\124\066" +
    "\017\067\070\070\067\071\105\072\100\001\002\000\042" +
    "\027\150\030\162\031\153\032\160\033\164\034\145\035" +
    "\151\036\161\040\146\041\152\043\144\044\163\045\157" +
    "\046\155\047\154\055\uff8b\001\002\000\064\003\uffab\004" +
    "\uffab\005\uffab\010\uffab\011\uffab\012\uffab\013\uffab\014\uffab" +
    "\015\uffab\020\uffab\022\uffab\024\uffab\025\uffab\026\uffab\037" +
    "\uffab\040\uffab\041\uffab\044\uffab\057\uffab\064\uffab\066\uffab" +
    "\067\uffab\070\uffab\071\uffab\072\uffab\001\002\000\004\057" +
    "\332\001\002\000\026\037\uff87\040\uff87\041\uff87\044\uff87" +
    "\057\uff87\066\uff87\067\uff87\070\uff87\071\uff87\072\uff87\001" +
    "\002\000\026\037\063\040\072\041\106\044\076\057\124" +
    "\066\017\067\070\070\067\071\105\072\100\001\002\000" +
    "\004\060\335\001\002\000\056\003\uff86\004\uff86\010\uff86" +
    "\012\uff86\014\uff86\015\uff86\020\uff86\022\uff86\024\uff86\025" +
    "\uff86\026\uff86\037\uff86\040\uff86\041\uff86\044\uff86\057\uff86" +
    "\063\uff86\066\uff86\067\uff86\070\uff86\071\uff86\072\uff86\001" +
    "\002\000\056\003\113\004\077\010\125\012\064\014\111" +
    "\015\114\020\117\022\126\024\107\025\066\026\131\037" +
    "\063\040\072\041\106\044\076\057\124\063\341\066\017" +
    "\067\070\070\067\071\105\072\100\001\002\000\064\003" +
    "\uff68\004\uff68\005\uff68\010\uff68\011\uff68\012\uff68\013\uff68" +
    "\014\uff68\015\uff68\020\uff68\022\uff68\024\uff68\025\uff68\026" +
    "\uff68\037\uff68\040\uff68\041\uff68\044\uff68\057\uff68\064\uff68" +
    "\066\uff68\067\uff68\070\uff68\071\uff68\072\uff68\001\002\000" +
    "\064\003\uff82\004\uff82\005\uff82\010\uff82\011\uff82\012\uff82" +
    "\013\346\014\uff82\015\uff82\020\uff82\022\uff82\024\uff82\025" +
    "\uff82\026\uff82\037\uff82\040\uff82\041\uff82\044\uff82\057\uff82" +
    "\064\uff82\066\uff82\067\uff82\070\uff82\071\uff82\072\uff82\001" +
    "\002\000\056\003\uff6a\004\uff6a\010\uff6a\012\uff6a\014\uff6a" +
    "\015\uff6a\020\uff6a\022\uff6a\024\uff6a\025\uff6a\026\uff6a\037" +
    "\uff6a\040\uff6a\041\uff6a\044\uff6a\057\uff6a\064\uff6a\066\uff6a" +
    "\067\uff6a\070\uff6a\071\uff6a\072\uff6a\001\002\000\056\003" +
    "\113\004\077\010\125\012\064\014\111\015\114\020\117" +
    "\022\126\024\107\025\066\026\131\037\063\040\072\041" +
    "\106\044\076\057\124\064\uffae\066\017\067\070\070\067" +
    "\071\105\072\100\001\002\000\004\064\344\001\002\000" +
    "\064\003\uff69\004\uff69\005\uff69\010\uff69\011\uff69\012\uff69" +
    "\013\uff69\014\uff69\015\uff69\020\uff69\022\uff69\024\uff69\025" +
    "\uff69\026\uff69\037\uff69\040\uff69\041\uff69\044\uff69\057\uff69" +
    "\064\uff69\066\uff69\067\uff69\070\uff69\071\uff69\072\uff69\001" +
    "\002\000\064\003\uff85\004\uff85\005\uff85\010\uff85\011\uff85" +
    "\012\uff85\013\uff85\014\uff85\015\uff85\020\uff85\022\uff85\024" +
    "\uff85\025\uff85\026\uff85\037\uff85\040\uff85\041\uff85\044\uff85" +
    "\057\uff85\064\uff85\066\uff85\067\uff85\070\uff85\071\uff85\072" +
    "\uff85\001\002\000\056\003\uff84\004\uff84\010\uff84\012\uff84" +
    "\014\uff84\015\uff84\020\uff84\022\uff84\024\uff84\025\uff84\026" +
    "\uff84\037\uff84\040\uff84\041\uff84\044\uff84\057\uff84\063\uff84" +
    "\066\uff84\067\uff84\070\uff84\071\uff84\072\uff84\001\002\000" +
    "\056\003\113\004\077\010\125\012\064\014\111\015\114" +
    "\020\117\022\126\024\107\025\066\026\131\037\063\040" +
    "\072\041\106\044\076\057\124\063\341\066\017\067\070" +
    "\070\067\071\105\072\100\001\002\000\064\003\uff83\004" +
    "\uff83\005\uff83\010\uff83\011\uff83\012\uff83\013\uff83\014\uff83" +
    "\015\uff83\020\uff83\022\uff83\024\uff83\025\uff83\026\uff83\037" +
    "\uff83\040\uff83\041\uff83\044\uff83\057\uff83\064\uff83\066\uff83" +
    "\067\uff83\070\uff83\071\uff83\072\uff83\001\002\000\004\055" +
    "\324\001\002\000\064\003\uffa1\004\uffa1\005\uffa1\010\uffa1" +
    "\011\uffa1\012\uffa1\013\uffa1\014\uffa1\015\uffa1\020\uffa1\022" +
    "\uffa1\024\uffa1\025\uffa1\026\uffa1\037\uffa1\040\uffa1\041\uffa1" +
    "\044\uffa1\057\uffa1\064\uffa1\066\uffa1\067\uffa1\070\uffa1\071" +
    "\uffa1\072\uffa1\001\002\000\020\002\uffb3\006\uffb3\007\uffb3" +
    "\016\uffb3\017\uffb3\021\uffb3\023\uffb3\001\002\000\004\057" +
    "\355\001\002\000\026\037\uff6c\040\uff6c\041\uff6c\044\uff6c" +
    "\057\uff6c\066\uff6c\067\uff6c\070\uff6c\071\uff6c\072\uff6c\001" +
    "\002\000\056\003\113\004\077\010\125\012\064\014\111" +
    "\015\114\020\117\022\126\024\107\025\066\026\131\037" +
    "\063\040\072\041\106\044\076\057\124\063\341\066\017" +
    "\067\070\070\067\071\105\072\100\001\002\000\064\003" +
    "\uff6d\004\uff6d\005\uff6d\010\uff6d\011\uff6d\012\uff6d\013\uff6d" +
    "\014\uff6d\015\uff6d\020\uff6d\022\uff6d\024\uff6d\025\uff6d\026" +
    "\uff6d\037\uff6d\040\uff6d\041\uff6d\044\uff6d\057\uff6d\064\uff6d" +
    "\066\uff6d\067\uff6d\070\uff6d\071\uff6d\072\uff6d\001\002\000" +
    "\026\037\063\040\072\041\106\044\076\057\124\066\017" +
    "\067\070\070\067\071\105\072\100\001\002\000\004\055" +
    "\324\001\002\000\026\037\063\040\072\041\106\044\076" +
    "\057\124\066\017\067\070\070\067\071\105\072\100\001" +
    "\002\000\004\055\324\001\002\000\026\037\063\040\072" +
    "\041\106\044\076\057\124\066\017\067\070\070\067\071" +
    "\105\072\100\001\002\000\004\060\366\001\002\000\056" +
    "\003\uff6b\004\uff6b\010\uff6b\012\uff6b\014\uff6b\015\uff6b\020" +
    "\uff6b\022\uff6b\024\uff6b\025\uff6b\026\uff6b\037\uff6b\040\uff6b" +
    "\041\uff6b\044\uff6b\057\uff6b\063\uff6b\066\uff6b\067\uff6b\070" +
    "\uff6b\071\uff6b\072\uff6b\001\002\000\064\003\uffaa\004\uffaa" +
    "\005\uffaa\010\uffaa\011\uffaa\012\uffaa\013\uffaa\014\uffaa\015" +
    "\uffaa\020\uffaa\022\uffaa\024\uffaa\025\uffaa\026\uffaa\037\uffaa" +
    "\040\uffaa\041\uffaa\044\uffaa\057\uffaa\064\uffaa\066\uffaa\067" +
    "\uffaa\070\uffaa\071\uffaa\072\uffaa\001\002\000\004\057\371" +
    "\001\002\000\026\037\uff70\040\uff70\041\uff70\044\uff70\057" +
    "\uff70\066\uff70\067\uff70\070\uff70\071\uff70\072\uff70\001\002" +
    "\000\056\003\113\004\077\010\125\012\064\014\111\015" +
    "\114\020\117\022\126\024\107\025\066\026\131\037\063" +
    "\040\072\041\106\044\076\057\124\063\341\066\017\067" +
    "\070\070\067\071\105\072\100\001\002\000\064\003\uff71" +
    "\004\uff71\005\uff71\010\uff71\011\uff71\012\uff71\013\uff71\014" +
    "\uff71\015\uff71\020\uff71\022\uff71\024\uff71\025\uff71\026\uff71" +
    "\037\uff71\040\uff71\041\uff71\044\uff71\057\uff71\064\uff71\066" +
    "\uff71\067\uff71\070\uff71\071\uff71\072\uff71\001\002\000\026" +
    "\037\063\040\072\041\106\044\076\057\124\066\017\067" +
    "\070\070\067\071\105\072\100\001\002\000\004\060\376" +
    "\001\002\000\060\003\uff6f\004\uff6f\010\uff6f\012\uff6f\014" +
    "\uff6f\015\uff6f\020\uff6f\022\uff6f\024\uff6f\025\uff6f\026\uff6f" +
    "\037\uff6f\040\uff6f\041\uff6f\044\uff6f\055\uff6f\057\uff6f\063" +
    "\uff6f\066\uff6f\067\uff6f\070\uff6f\071\uff6f\072\uff6f\001\002" +
    "\000\026\037\063\040\072\041\106\044\076\057\124\066" +
    "\017\067\070\070\067\071\105\072\100\001\002\000\050" +
    "\027\uff28\030\uff28\031\uff28\032\uff28\033\uff28\034\uff28\035" +
    "\uff28\036\uff28\040\uff28\041\uff28\043\uff28\044\uff28\045\uff28" +
    "\046\uff28\047\uff28\054\uff28\055\uff28\060\uff28\062\uff28\001" +
    "\002\000\064\003\uffad\004\uffad\005\uffad\010\uffad\011\uffad" +
    "\012\uffad\013\uffad\014\uffad\015\uffad\020\uffad\022\uffad\024" +
    "\uffad\025\uffad\026\uffad\037\uffad\040\uffad\041\uffad\044\uffad" +
    "\057\uffad\064\uffad\066\uffad\067\uffad\070\uffad\071\uffad\072" +
    "\uffad\001\002\000\026\037\063\040\072\041\106\044\076" +
    "\057\124\066\017\067\070\070\067\071\105\072\100\001" +
    "\002\000\050\027\uff36\030\uff36\031\uff36\032\uff36\033\uff36" +
    "\034\uff36\035\uff36\036\uff36\040\146\041\152\043\uff36\044" +
    "\163\045\uff36\046\uff36\047\uff36\054\uff36\055\uff36\060\uff36" +
    "\062\uff36\001\002\000\010\005\uffaf\011\uffaf\064\uffaf\001" +
    "\002\000\064\003\uffa8\004\uffa8\005\uffa8\010\uffa8\011\uffa8" +
    "\012\uffa8\013\uffa8\014\uffa8\015\uffa8\020\uffa8\022\uffa8\024" +
    "\uffa8\025\uffa8\026\uffa8\037\uffa8\040\uffa8\041\uffa8\044\uffa8" +
    "\057\uffa8\064\uffa8\066\uffa8\067\uffa8\070\uffa8\071\uffa8\072" +
    "\uffa8\001\002\000\026\037\063\040\072\041\106\044\076" +
    "\057\124\066\017\067\070\070\067\071\105\072\100\001" +
    "\002\000\050\027\uff2b\030\uff2b\031\uff2b\032\uff2b\033\uff2b" +
    "\034\uff2b\035\uff2b\036\uff2b\040\uff2b\041\uff2b\043\uff2b\044" +
    "\uff2b\045\uff2b\046\uff2b\047\uff2b\054\uff2b\055\uff2b\060\uff2b" +
    "\062\uff2b\001\002\000\064\003\uffac\004\uffac\005\uffac\010" +
    "\uffac\011\uffac\012\uffac\013\uffac\014\uffac\015\uffac\020\uffac" +
    "\022\uffac\024\uffac\025\uffac\026\uffac\037\uffac\040\uffac\041" +
    "\uffac\044\uffac\057\uffac\064\uffac\066\uffac\067\uffac\070\uffac" +
    "\071\uffac\072\uffac\001\002\000\006\003\u010a\057\u010b\001" +
    "\002\000\004\060\uff91\001\002\000\006\060\uff93\066\uff93" +
    "\001\002\000\004\055\uff94\001\002\000\006\060\uff8e\066" +
    "\017\001\002\000\004\060\uff8f\001\002\000\004\060\u0110" +
    "\001\002\000\004\055\uff92\001\002\000\004\060\u0112\001" +
    "\002\000\004\055\uff90\001\002\000\030\037\ufffa\040\ufffa" +
    "\041\ufffa\044\ufffa\057\ufffa\060\ufffa\066\ufffa\067\ufffa\070" +
    "\ufffa\071\ufffa\072\ufffa\001\002\000\030\037\063\040\072" +
    "\041\106\044\076\057\124\060\ufff7\066\017\067\070\070" +
    "\067\071\105\072\100\001\002\000\004\060\u011c\001\002" +
    "\000\044\027\150\030\162\031\153\032\160\033\164\034" +
    "\145\035\151\036\161\040\146\041\152\043\144\044\163" +
    "\045\157\046\155\047\154\054\u0118\060\ufff4\001\002\000" +
    "\004\060\ufff8\001\002\000\026\037\ufff6\040\ufff6\041\ufff6" +
    "\044\ufff6\057\ufff6\066\ufff6\067\ufff6\070\ufff6\071\ufff6\072" +
    "\ufff6\001\002\000\026\037\063\040\072\041\106\044\076" +
    "\057\124\066\017\067\070\070\067\071\105\072\100\001" +
    "\002\000\044\027\150\030\162\031\153\032\160\033\164" +
    "\034\145\035\151\036\161\040\146\041\152\043\144\044" +
    "\163\045\157\046\155\047\154\054\u0118\060\ufff4\001\002" +
    "\000\004\060\ufff5\001\002\000\050\027\ufff9\030\ufff9\031" +
    "\ufff9\032\ufff9\033\ufff9\034\ufff9\035\ufff9\036\ufff9\040\ufff9" +
    "\041\ufff9\043\ufff9\044\ufff9\045\ufff9\046\ufff9\047\ufff9\054" +
    "\ufff9\055\ufff9\060\ufff9\062\ufff9\001\002\000\056\003\113" +
    "\004\077\010\125\012\064\014\111\015\114\020\117\022" +
    "\126\024\107\025\066\026\131\037\063\040\072\041\106" +
    "\044\076\057\124\063\341\066\017\067\070\070\067\071" +
    "\105\072\100\001\002\000\004\024\u011f\001\002\000\004" +
    "\057\uff74\001\002\000\004\057\371\001\002\000\004\055" +
    "\uff73\001\002\000\026\037\063\040\072\041\106\044\076" +
    "\057\124\066\017\067\070\070\067\071\105\072\100\001" +
    "\002\000\050\027\uff2e\030\uff2e\031\uff2e\032\uff2e\033\uff2e" +
    "\034\uff2e\035\uff2e\036\uff2e\040\146\041\152\043\uff2e\044" +
    "\163\045\uff2e\046\uff2e\047\uff2e\054\uff2e\055\uff2e\060\uff2e" +
    "\062\uff2e\001\002\000\004\066\017\001\002\000\012\042" +
    "\uffdd\054\uffdd\055\uffdd\061\uffdd\001\002\000\012\042\u0129" +
    "\054\uffca\055\uffca\061\u0128\001\002\000\006\054\u0133\055" +
    "\uffd8\001\002\000\012\067\uffd0\070\uffd0\071\uffd0\072\uffd0" +
    "\001\002\000\032\003\uffcc\037\uffcc\040\uffcc\041\uffcc\044" +
    "\uffcc\057\uffcc\063\uffcc\066\uffcc\067\uffcc\070\uffcc\071\uffcc" +
    "\072\uffcc\001\002\000\006\054\uffcd\055\uffcd\001\002\000" +
    "\032\003\242\037\063\040\072\041\106\044\076\057\124" +
    "\063\241\066\017\067\070\070\067\071\105\072\100\001" +
    "\002\000\006\054\uffcb\055\uffcb\001\002\000\012\067\070" +
    "\070\067\071\105\072\100\001\002\000\004\062\u012f\001" +
    "\002\000\012\042\uffcf\054\uffcf\055\uffcf\061\uffcf\001\002" +
    "\000\012\042\u0129\054\uffca\055\uffca\061\u0128\001\002\000" +
    "\006\054\uffce\055\uffce\001\002\000\004\055\uffdc\001\002" +
    "\000\004\066\uffdb\001\002\000\004\066\017\001\002\000" +
    "\012\042\uffda\054\uffda\055\uffda\061\uffda\001\002\000\012" +
    "\042\u0129\054\uffca\055\uffca\061\u0128\001\002\000\006\054" +
    "\u0133\055\uffd8\001\002\000\004\055\uffd9\001\002\000\070" +
    "\003\uffb2\004\uffb2\006\uffb2\007\uffb2\010\uffb2\012\uffb2\014" +
    "\uffb2\015\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2\022\uffb2" +
    "\024\uffb2\025\uffb2\026\uffb2\037\uffb2\040\uffb2\041\uffb2\044" +
    "\uffb2\057\uffb2\064\uffb2\066\uffb2\067\uffb2\070\uffb2\071\uffb2" +
    "\072\uffb2\001\002\000\070\003\uffb0\004\uffb0\006\054\007" +
    "\060\010\uffb0\012\uffb0\014\uffb0\015\uffb0\016\056\017\055" +
    "\020\uffb0\021\057\022\uffb0\024\uffb0\025\uffb0\026\uffb0\037" +
    "\uffb0\040\uffb0\041\uffb0\044\uffb0\057\uffb0\064\uffb0\066\uffb0" +
    "\067\uffb0\070\uffb0\071\uffb0\072\uffb0\001\002\000\056\003" +
    "\uffb1\004\uffb1\010\uffb1\012\uffb1\014\uffb1\015\uffb1\020\uffb1" +
    "\022\uffb1\024\uffb1\025\uffb1\026\uffb1\037\uffb1\040\uffb1\041" +
    "\uffb1\044\uffb1\057\uffb1\064\uffb1\066\uffb1\067\uffb1\070\uffb1" +
    "\071\uffb1\072\uffb1\001\002\000\016\006\054\007\060\016" +
    "\056\017\055\021\057\060\uffba\001\002\000\004\066\uffb6" +
    "\001\002\000\004\060\u0145\001\002\000\006\054\u0141\060" +
    "\uffb7\001\002\000\004\060\uffbb\001\002\000\014\006\uffb9" +
    "\007\uffb9\016\uffb9\017\uffb9\021\uffb9\001\002\000\014\006" +
    "\054\007\060\016\056\017\055\021\057\001\002\000\006" +
    "\054\u0141\060\uffb7\001\002\000\004\060\uffb8\001\002\000" +
    "\004\063\uffbc\001\002\000\004\066\017\001\002\000\006" +
    "\054\uffb5\060\uffb5\001\002\000\016\003\011\006\007\016" +
    "\012\017\010\021\013\023\015\001\002\000\004\002\ufff2" +
    "\001\002\000\004\066\017\001\002\000\014\042\uffe3\054" +
    "\uffe3\055\uffe3\057\uffe0\061\uffe3\001\002\000\004\002\uffe9" +
    "\001\002\000\004\057\022\001\002\000\012\042\u0129\054" +
    "\uffca\055\uffca\061\u0128\001\002\000\006\054\u0133\055\uffd8" +
    "\001\002\000\004\055\324\001\002\000\020\003\uffe2\006" +
    "\uffe2\007\uffe2\016\uffe2\017\uffe2\021\uffe2\023\uffe2\001\002" +
    "\000\020\003\011\006\007\007\014\016\012\017\010\021" +
    "\013\023\015\001\002\000\004\002\uffe1\001\002\000\004" +
    "\063\024\001\002\000\020\002\uffc6\006\031\007\035\016" +
    "\033\017\032\021\034\023\036\001\002\000\004\002\uffdf" +
    "\001\002\000\004\066\017\001\002\000\004\002\uffed\001" +
    "\002\000\020\003\011\006\007\007\014\016\012\017\010" +
    "\021\013\023\015\001\002\000\004\002\uffe4\001\002\000" +
    "\004\066\017\001\002\000\004\002\uffeb\001\002\000\004" +
    "\066\017\001\002\000\004\002\uffef\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u015d\000\010\002\004\003\003\004\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\075\u015c\001\001\000\004\077\u015a\001\001\000\004\103" +
    "\u0158\001\001\000\004\076\u0156\001\001\000\004\100\u0149" +
    "\001\001\000\004\074\u0147\001\001\000\004\101\015\001" +
    "\001\000\004\007\017\001\001\000\002\001\001\000\004" +
    "\102\020\001\001\000\004\030\022\001\001\000\004\122" +
    "\u013b\001\001\000\004\033\024\001\001\000\004\125\046" +
    "\001\001\000\010\027\027\034\026\035\025\001\001\000" +
    "\002\001\001\000\004\117\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\121\036\001\001\000\002\001\001" +
    "\000\004\035\037\001\001\000\002\001\001\000\004\007" +
    "\041\001\001\000\004\120\042\001\001\000\004\030\043" +
    "\001\001\000\004\033\044\001\001\000\010\027\045\034" +
    "\026\035\025\001\001\000\002\001\001\000\012\022\047" +
    "\024\050\025\051\036\052\001\001\000\004\006\u0138\001" +
    "\001\000\004\107\u0123\001\001\000\002\001\001\000\050" +
    "\007\064\010\127\011\103\012\117\016\100\040\111\041" +
    "\074\043\101\044\126\046\070\047\114\050\107\051\121" +
    "\052\120\053\115\056\073\063\102\065\122\067\072\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\113\060\001\001\000\004\025" +
    "\061\001\001\000\002\001\001\000\004\211\u0121\001\001" +
    "\000\004\154\u011c\001\001\000\002\001\001\000\004\134" +
    "\u0108\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\u0107\001\001\000\004\212\u0105\001\001\000\002\001" +
    "\001\000\004\006\u0104\001\001\000\050\007\064\010\127" +
    "\011\103\012\117\016\100\040\u0103\041\074\043\101\044" +
    "\126\046\070\047\114\050\107\051\121\052\120\053\115" +
    "\056\073\063\102\065\122\067\072\001\001\000\004\205" +
    "\u0101\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\u0100\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\213\376\001\001" +
    "\000\004\156\367\001\001\000\004\006\366\001\001\000" +
    "\004\160\353\001\001\000\002\001\001\000\004\127\350" +
    "\001\001\000\004\140\330\001\001\000\004\006\327\001" +
    "\001\000\002\001\001\000\004\137\325\001\001\000\002" +
    "\001\001\000\004\006\324\001\001\000\004\006\322\001" +
    "\001\000\002\001\001\000\004\172\317\001\001\000\002" +
    "\001\001\000\004\144\263\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\130\131\001\001\000\004\057\134" +
    "\001\001\000\006\131\140\132\137\001\001\000\004\133" +
    "\135\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\224\001\001\000\014\007\064\010" +
    "\141\011\142\012\117\016\100\001\001\000\002\001\001" +
    "\000\004\060\146\001\001\000\004\203\222\001\001\000" +
    "\004\200\220\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\173\215\001\001\000\004\201\213\001\001\000" +
    "\002\001\001\000\004\175\211\001\001\000\004\210\207" +
    "\001\001\000\004\207\205\001\001\000\016\007\064\010" +
    "\141\011\202\012\117\013\200\016\100\001\001\000\004" +
    "\206\176\001\001\000\004\176\174\001\001\000\004\202" +
    "\172\001\001\000\004\174\170\001\001\000\004\204\166" +
    "\001\001\000\004\177\164\001\001\000\014\007\064\010" +
    "\141\011\165\012\117\016\100\001\001\000\002\001\001" +
    "\000\014\007\064\010\141\011\167\012\117\016\100\001" +
    "\001\000\002\001\001\000\014\007\064\010\141\011\171" +
    "\012\117\016\100\001\001\000\002\001\001\000\014\007" +
    "\064\010\141\011\173\012\117\016\100\001\001\000\002" +
    "\001\001\000\014\007\064\010\141\011\175\012\117\016" +
    "\100\001\001\000\002\001\001\000\014\007\064\010\141" +
    "\011\177\012\117\016\100\001\001\000\002\001\001\000" +
    "\004\060\204\001\001\000\002\001\001\000\004\060\203" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\007" +
    "\064\010\141\011\206\012\117\016\100\001\001\000\002" +
    "\001\001\000\014\007\064\010\141\011\210\012\117\016" +
    "\100\001\001\000\002\001\001\000\014\007\064\010\141" +
    "\011\212\012\117\016\100\001\001\000\002\001\001\000" +
    "\014\007\064\010\141\011\214\012\117\016\100\001\001" +
    "\000\002\001\001\000\014\007\064\010\141\011\216\012" +
    "\117\016\100\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\007\064\010\141\011\221\012\117\016\100\001" +
    "\001\000\002\001\001\000\014\007\064\010\141\011\223" +
    "\012\117\016\100\001\001\000\002\001\001\000\004\060" +
    "\225\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\167\261\001\001\000\004\164\257\001\001\000\004\166" +
    "\255\001\001\000\004\165\253\001\001\000\004\163\234" +
    "\001\001\000\022\007\064\010\127\011\236\012\117\014" +
    "\242\016\100\044\235\045\237\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\170\243\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\244" +
    "\001\001\000\004\015\245\001\001\000\002\001\001\000" +
    "\004\171\247\001\001\000\004\012\250\001\001\000\004" +
    "\015\251\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\007\064\010\127\011\236\012\117\014\242\016\100" +
    "\044\235\045\254\001\001\000\002\001\001\000\022\007" +
    "\064\010\127\011\236\012\117\014\242\016\100\044\235" +
    "\045\256\001\001\000\002\001\001\000\022\007\064\010" +
    "\127\011\236\012\117\014\242\016\100\044\235\045\260" +
    "\001\001\000\002\001\001\000\022\007\064\010\127\011" +
    "\236\012\117\014\242\016\100\044\235\045\262\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\145\265\001" +
    "\001\000\006\007\267\010\266\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\071\271\001\001\000\014\007" +
    "\064\010\141\011\272\012\117\016\100\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\146\275\001\001\000" +
    "\004\055\277\001\001\000\004\147\300\001\001\000\002" +
    "\001\001\000\004\054\301\001\001\000\002\001\001\000" +
    "\004\152\312\001\001\000\004\150\304\001\001\000\004" +
    "\012\305\001\001\000\002\001\001\000\004\151\307\001" +
    "\001\000\050\007\064\010\127\011\103\012\117\016\100" +
    "\040\310\041\074\043\101\044\126\046\070\047\114\050" +
    "\107\051\121\052\120\053\115\056\073\063\102\065\122" +
    "\067\072\001\001\000\004\054\311\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\153\314\001\001\000\050" +
    "\007\064\010\127\011\103\012\117\016\100\040\315\041" +
    "\074\043\101\044\126\046\070\047\114\050\107\051\121" +
    "\052\120\053\115\056\073\063\102\065\122\067\072\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\007\064" +
    "\010\141\011\320\012\117\016\100\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\007\064\010\141\011\326\012" +
    "\117\016\100\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\141\332\001\001\000\020\007" +
    "\064\010\127\011\103\012\117\016\100\043\333\044\126" +
    "\001\001\000\002\001\001\000\004\142\335\001\001\000" +
    "\050\007\064\010\127\011\103\012\117\016\100\041\336" +
    "\042\337\043\101\044\126\046\070\047\114\050\107\051" +
    "\121\052\120\053\115\056\073\063\102\065\122\067\072" +
    "\001\001\000\002\001\001\000\004\064\344\001\001\000" +
    "\004\162\341\001\001\000\050\007\064\010\127\011\103" +
    "\012\117\016\100\040\342\041\074\043\101\044\126\046" +
    "\070\047\114\050\107\051\121\052\120\053\115\056\073" +
    "\063\102\065\122\067\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\143\346\001\001" +
    "\000\050\007\064\010\127\011\103\012\117\016\100\041" +
    "\336\042\347\043\101\044\126\046\070\047\114\050\107" +
    "\051\121\052\120\053\115\056\073\063\102\065\122\067" +
    "\072\001\001\000\002\001\001\000\004\006\351\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\070\355\001" +
    "\001\000\004\161\357\001\001\000\050\007\064\010\127" +
    "\011\103\012\117\016\100\041\336\042\356\043\101\044" +
    "\126\046\070\047\114\050\107\051\121\052\120\053\115" +
    "\056\073\063\102\065\122\067\072\001\001\000\002\001" +
    "\001\000\020\007\064\010\127\011\103\012\117\016\100" +
    "\043\360\044\126\001\001\000\004\006\361\001\001\000" +
    "\020\007\064\010\127\011\103\012\117\016\100\043\362" +
    "\044\126\001\001\000\004\006\363\001\001\000\020\007" +
    "\064\010\127\011\103\012\117\016\100\043\364\044\126" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\066\371\001\001\000\004\157\373\001\001" +
    "\000\050\007\064\010\127\011\103\012\117\016\100\041" +
    "\336\042\372\043\101\044\126\046\070\047\114\050\107" +
    "\051\121\052\120\053\115\056\073\063\102\065\122\067" +
    "\072\001\001\000\002\001\001\000\020\007\064\010\127" +
    "\011\103\012\117\016\100\043\374\044\126\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\007\064\010\141" +
    "\011\377\012\117\016\100\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\007\064\010\141\011\u0102\012\117" +
    "\016\100\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\007\064\010\141\011\u0106\012\117" +
    "\016\100\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\061\u010b\001\001\000\004\136\u0110\001\001\000\004" +
    "\135\u010c\001\001\000\002\001\001\000\010\007\267\010" +
    "\u010d\062\u010e\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\072\u0113\001\001\000\016\007\064\010\141\011\u0115" +
    "\012\117\016\100\017\u0114\001\001\000\002\001\001\000" +
    "\004\020\u0116\001\001\000\002\001\001\000\004\073\u0118" +
    "\001\001\000\014\007\064\010\141\011\u0119\012\117\016" +
    "\100\001\001\000\004\020\u011a\001\001\000\002\001\001" +
    "\000\002\001\001\000\050\007\064\010\127\011\103\012" +
    "\117\016\100\041\336\042\u011d\043\101\044\126\046\070" +
    "\047\114\050\107\051\121\052\120\053\115\056\073\063" +
    "\102\065\122\067\072\001\001\000\002\001\001\000\004" +
    "\155\u011f\001\001\000\004\066\u0120\001\001\000\002\001" +
    "\001\000\014\007\064\010\141\011\u0122\012\117\016\100" +
    "\001\001\000\002\001\001\000\004\007\u0124\001\001\000" +
    "\004\110\u0125\001\001\000\006\021\u0126\026\u0129\001\001" +
    "\000\004\023\u0131\001\001\000\004\114\u012c\001\001\000" +
    "\004\116\u012a\001\001\000\002\001\001\000\022\007\064" +
    "\010\127\011\236\012\117\014\242\016\100\044\235\045" +
    "\u012b\001\001\000\002\001\001\000\004\012\u012d\001\001" +
    "\000\002\001\001\000\004\115\u012f\001\001\000\006\021" +
    "\u0130\026\u0129\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\111\u0133\001\001\000\004\007\u0134\001\001\000" +
    "\004\112\u0135\001\001\000\006\021\u0136\026\u0129\001\001" +
    "\000\004\023\u0137\001\001\000\002\001\001\000\004\126" +
    "\u0139\001\001\000\012\022\047\024\050\025\051\036\u013a" +
    "\001\001\000\002\001\001\000\012\024\u013c\025\051\031" +
    "\u013d\037\u013e\001\001\000\004\124\u0145\001\001\000\002" +
    "\001\001\000\004\032\u013f\001\001\000\002\001\001\000" +
    "\004\123\u0141\001\001\000\010\024\u013c\025\051\037\u0142" +
    "\001\001\000\004\032\u0143\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\u0146\001\001\000\002\001\001" +
    "\000\004\004\u0148\001\001\000\002\001\001\000\006\005" +
    "\u014b\007\u014a\001\001\000\006\104\u014d\106\u014c\001\001" +
    "\000\002\001\001\000\004\030\u0153\001\001\000\006\021" +
    "\u014e\026\u0129\001\001\000\004\023\u014f\001\001\000\004" +
    "\006\u0150\001\001\000\004\105\u0151\001\001\000\006\003" +
    "\u0152\004\005\001\001\000\002\001\001\000\004\033\u0154" +
    "\001\001\000\010\027\u0155\034\026\035\025\001\001\000" +
    "\002\001\001\000\006\005\u0157\007\u014a\001\001\000\002" +
    "\001\001\000\006\003\u0159\004\005\001\001\000\002\001" +
    "\001\000\006\005\u015b\007\u014a\001\001\000\002\001\001" +
    "\000\006\005\u015d\007\u014a\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("Error sintáctico en la fila " + fila + ", columna " + columna + ": Token inesperado <" + lexema + ">");
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("¡No se pudo recuperar!");
        System.out.println("Terror sintáctico en la fila " + fila + ", columna " + columna + ": Token inesperado <" + lexema + ">");
    }
    public void guardar_id(){}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {


    //Esta clase contiene tablas y pilas semanticas
    private Semanter sm = new Semanter();

    private void print(String msg) {
        System.out.println("Parser: " + msg);
    }

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // EXP ::= LITERAL 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // EXP ::= LAMFUNC 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // EXP ::= VAR 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // EXP ::= smbmenosmenos NT$82 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$82
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // NT$82 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 sm.guardar_operador(e); print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$82",137, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // EXP ::= EXP smbmenosmenos 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 sm.guardar_operador(e); print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // EXP ::= smbmasmas NT$81 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$81
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // NT$81 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 sm.guardar_operador(e); print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$81",136, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // EXP ::= EXP smbmasmas 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 sm.guardar_operador(e); print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // EXP ::= smbadmiracion NT$80 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$80
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // NT$80 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 sm.guardar_operador(e); print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$80",135, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // EXP ::= EXP smbdivisionentera NT$79 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$79
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // NT$79 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 sm.guardar_operador(e); print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$79",134, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // EXP ::= EXP smbdivision NT$78 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$78
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // NT$78 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 sm.guardar_operador(e); print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$78",133, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // EXP ::= EXP smbmultiplicacion NT$77 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$77
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // NT$77 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 sm.guardar_operador(e); print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$77",132, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // EXP ::= smbmenos NT$76 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$76
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // NT$76 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 sm.guardar_operador(e); print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$76",131, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // EXP ::= EXP smbmenos NT$75 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$75
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // NT$75 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 sm.guardar_operador(e); print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$75",130, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // EXP ::= EXP smbmas NT$74 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$74
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // NT$74 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 sm.guardar_operador(e); print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$74",129, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // EXP ::= EXP smband NT$73 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$73
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // NT$73 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 sm.guardar_operador(e); print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$73",128, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // EXP ::= EXP smbor NT$72 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$72
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // NT$72 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 sm.guardar_operador(e); print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$72",127, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // EXP ::= EXP smbdiferente NT$71 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$71
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // NT$71 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 sm.guardar_operador(e); print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$71",126, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // EXP ::= EXP smbmenor NT$70 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$70
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // NT$70 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 sm.guardar_operador(e); print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$70",125, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // EXP ::= EXP smbmenorigual NT$69 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$69
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // NT$69 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 sm.guardar_operador(e); print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$69",124, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // EXP ::= EXP smbmayor NT$68 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$68
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // NT$68 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 sm.guardar_operador(e); print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$68",123, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // EXP ::= EXP smbmayorigual NT$67 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$67
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // NT$67 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 sm.guardar_operador(e); print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$67",122, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // EXP ::= EXP smbigualigual NT$66 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$66
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // NT$66 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 sm.guardar_operador(e); print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$66",121, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // EXP ::= smbparentabrir NT$65 EXP smbparentcerrar 
            {
              String RESULT =null;
              // propagate RESULT from NT$65
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 sm.guardar_operador(c); print(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // NT$65 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 sm.guardar_operador(e); print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$65",120, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // STRING ::= smbstring 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STRING",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // ARRAYLIST2 ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARRAYLIST2",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // ARRAYLIST2 ::= smbcoma NT$64 LITERAL ARRAYLIST2 
            {
              String RESULT =null;
              // propagate RESULT from NT$64
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARRAYLIST2",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // NT$64 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$64",119, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // ARRAYLIST ::= smbllaveabrir NT$63 LITERAL ARRAYLIST2 smbllavecerrar 
            {
              String RESULT =null;
              // propagate RESULT from NT$63
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARRAYLIST",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // NT$63 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$63",118, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // LITERAL ::= smboct 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 sm.guardar_literal(e); print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // LITERAL ::= smbhex 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 sm.guardar_literal(e); print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // LITERAL ::= smbdec 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 sm.guardar_literal(e); print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // LITERAL ::= smbcharlit 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 sm.guardar_literal(e); print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // EXPASIARR ::= error 
            {
              String RESULT =null;
		 print("Error en la asignacion"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPASIARR",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // EXPASIARR ::= EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPASIARR",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // EXPASIARR ::= ASIGN 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPASIARR",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // EXPASIARR ::= ARRAYLIST 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPASIARR",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // ASIGN ::= VAR smbdivisionigual NT$62 EXPASIARR 
            {
              String RESULT =null;
              // propagate RESULT from NT$62
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGN",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // NT$62 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$62",117, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // ASIGN ::= VAR smbmultiplicacionigual NT$61 EXPASIARR 
            {
              String RESULT =null;
              // propagate RESULT from NT$61
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGN",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // NT$61 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$61",116, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // ASIGN ::= VAR smbmenosigual NT$60 EXPASIARR 
            {
              String RESULT =null;
              // propagate RESULT from NT$60
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGN",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // NT$60 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$60",115, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // ASIGN ::= VAR smbmasigual NT$59 EXPASIARR 
            {
              String RESULT =null;
              // propagate RESULT from NT$59
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGN",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // NT$59 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$59",114, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // ASIGN ::= VAR smbigual NT$58 EXPASIARR 
            {
              String RESULT =null;
              // propagate RESULT from NT$58
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGN",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // NT$58 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$58",113, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // ASIGOEXP ::= EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGOEXP",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // ASIGOEXP ::= ASIGN 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGOEXP",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // GENBLOCK ::= INSTRUC 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GENBLOCK",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // GENBLOCK ::= smbllaveabrir NT$57 INSTLIST smbllavecerrar 
            {
              String RESULT =null;
              // propagate RESULT from NT$57
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GENBLOCK",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // NT$57 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$57",112, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // FORPARAM ::= smbparentabrir NT$56 ASIGOEXP PUCOMA ASIGOEXP PUCOMA ASIGOEXP smbparentcerrar 
            {
              String RESULT =null;
              // propagate RESULT from NT$56
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FORPARAM",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // NT$56 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$56",111, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // FOR ::= smbfor NT$55 FORPARAM GENBLOCK 
            {
              String RESULT =null;
              // propagate RESULT from NT$55
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // NT$55 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$55",110, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // WHLPARAM ::= smbparentabrir NT$54 ASIGOEXP smbparentcerrar 
            {
              String RESULT =null;
              // propagate RESULT from NT$54
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 sm.evaluarWhile(); print(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WHLPARAM",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // NT$54 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$54",109, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // WHILE ::= smbwhile NT$53 WHLPARAM GENBLOCK 
            {
              String RESULT =null;
              // propagate RESULT from NT$53
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WHILE",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // NT$53 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 sm.inicioWhile(); print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$53",108, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // DOWHILE ::= smbdo NT$51 GENBLOCK smbwhile NT$52 WHLPARAM 
            {
              String RESULT =null;
              // propagate RESULT from NT$52
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DOWHILE",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // NT$52 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$52",107, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // NT$51 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$51",106, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // SWTHCS ::= smbdefault NT$49 smbdospuntos NT$50 INSTLIST 
            {
              String RESULT =null;
              // propagate RESULT from NT$50
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWTHCS",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // NT$50 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$50",105, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // NT$49 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$49",104, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // SWTHCS ::= smbcase NT$47 LITERAL smbdospuntos NT$48 INSTLIST SWTHCS 
            {
              String RESULT =null;
              // propagate RESULT from NT$48
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWTHCS",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // NT$48 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$48",103, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // NT$47 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$47",102, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // SWTHBLOCK ::= smbllaveabrir NT$46 SWTHCS smbllavecerrar 
            {
              String RESULT =null;
              // propagate RESULT from NT$46
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWTHBLOCK",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // NT$46 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$46",101, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // SWITCH ::= smbswitch NT$43 smbparentabrir NT$44 VAR smbparentcerrar NT$45 SWTHBLOCK 
            {
              String RESULT =null;
              // propagate RESULT from NT$45
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCH",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // NT$45 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$45",100, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // NT$44 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$44",99, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // NT$43 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$43",98, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // IFELSE ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IFELSE",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // IFELSE ::= smbelse NT$42 GENBLOCK 
            {
              String RESULT =null;
              // propagate RESULT from NT$42
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IFELSE",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // NT$42 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 sm.inicioElse(); print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$42",97, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // IF ::= smbif NT$39 smbparentabrir NT$40 ASIGOEXP smbparentcerrar NT$41 GENBLOCK IFELSE 
            {
              String RESULT =null;
              // propagate RESULT from NT$41
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // NT$41 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 sm.evaluarIF(); print(o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$41",96, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // NT$40 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$40",95, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // NT$39 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 sm.inicioIF(); print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$39",94, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // CONTINUE ::= smbcontinue 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTINUE",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // BREAK ::= smbbreak 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BREAK",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // RETURN ::= smbreturn NT$38 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$38
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // NT$38 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$38",93, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // RETURN ::= smbreturn 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // RDPARAM1 ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RDPARAM1",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // RDPARAM1 ::= VAR 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RDPARAM1",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // RDPARAM ::= error NT$37 smbparentcerrar 
            {
              String RESULT =null;
              // propagate RESULT from NT$37
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RDPARAM",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // NT$37 ::= 
            {
              String RESULT =null;
 print("Mas parametros de los esperados"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$37",92, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // RDPARAM ::= smbparentabrir NT$36 RDPARAM1 smbparentcerrar 
            {
              String RESULT =null;
              // propagate RESULT from NT$36
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RDPARAM",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // NT$36 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$36",91, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // READ ::= smbread NT$35 RDPARAM 
            {
              String RESULT =null;
              // propagate RESULT from NT$35
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // NT$35 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$35",90, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // WRTPARAM1 ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WRTPARAM1",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // WRTPARAM1 ::= smbcoma STRING WRTPARAM1 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WRTPARAM1",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // WRTPARAM1 ::= smbcoma EXP WRTPARAM1 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WRTPARAM1",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // WRTPARAM ::= error NT$34 smbparentcerrar 
            {
              String RESULT =null;
              // propagate RESULT from NT$34
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WRTPARAM",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // NT$34 ::= 
            {
              String RESULT =null;
 print("Debe venir al menos un parametro"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$34",89, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // WRTPARAM ::= smbparentabrir NT$33 STRING WRTPARAM1 smbparentcerrar 
            {
              String RESULT =null;
              // propagate RESULT from NT$33
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WRTPARAM",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // NT$33 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$33",88, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // WRTPARAM ::= smbparentabrir NT$32 EXP WRTPARAM1 smbparentcerrar 
            {
              String RESULT =null;
              // propagate RESULT from NT$32
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WRTPARAM",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // NT$32 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$32",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // WRITE ::= smbwrite NT$31 WRTPARAM 
            {
              String RESULT =null;
              // propagate RESULT from NT$31
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WRITE",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // NT$31 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$31",86, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // INSTRUC ::= error NT$30 PUCOMA 
            {
              String RESULT =null;
              // propagate RESULT from NT$30
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUC",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // NT$30 ::= 
            {
              String RESULT =null;
 print("Error en la instruccion"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$30",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // INSTRUC ::= IF 
            {
              String RESULT =null;
		 sm.finIF(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUC",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // INSTRUC ::= SWITCH 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUC",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // INSTRUC ::= DOWHILE PUCOMA 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUC",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // INSTRUC ::= WHILE 
            {
              String RESULT =null;
		 sm.finWhile(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUC",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // INSTRUC ::= FOR 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUC",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // INSTRUC ::= WRITE PUCOMA 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUC",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // INSTRUC ::= READ PUCOMA 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUC",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // INSTRUC ::= RETURN PUCOMA 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUC",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // INSTRUC ::= BREAK PUCOMA 
            {
              String RESULT =null;
		 sm.guardar_break("Bonjour break"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUC",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // INSTRUC ::= CONTINUE PUCOMA 
            {
              String RESULT =null;
		 sm.guardar_continue("Bonjour contiene"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUC",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // INSTRUC ::= ASIGOEXP PUCOMA 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUC",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // INSTLIST ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTLIST",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // INSTLIST ::= INSTRUC INSTLIST 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTLIST",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // FUNVARDEC ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNVARDEC",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // FUNVARDEC ::= VARDECL PUCOMA NT$29 FUNVARDEC 
            {
              String RESULT =null;
              // propagate RESULT from NT$29
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNVARDEC",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$29 ::= 
            {
              String RESULT =null;
 sm.declarar_variables(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$29",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // FUNCBLOCK ::= smbllaveabrir NT$28 FUNVARDEC INSTLIST smbllavecerrar 
            {
              String RESULT =null;
              // propagate RESULT from NT$28
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 sm.fin_funcion(); print(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCBLOCK",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$28 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$28",83, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // FUNPARDEC ::= VARTIPO NT$27 IDENTIF 
            {
              String RESULT =null;
              // propagate RESULT from NT$27
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 sm.guardar_parametros_id(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNPARDEC",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$27 ::= 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 sm.guardar_tipo(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$27",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // FUNPARAM1 ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNPARAM1",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // FUNPARAM1 ::= smbcoma NT$26 FUNPARDEC FUNPARAM1 
            {
              String RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNPARAM1",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // NT$26 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$26",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // FUNPARAM ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNPARAM",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // FUNPARAM ::= FUNPARDEC FUNPARAM1 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNPARAM",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // FUNCPARAM ::= smbparentabrir NT$25 FUNPARAM smbparentcerrar 
            {
              String RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 sm.declarar_funcion(); print(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCPARAM",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NT$25 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$25",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // FUNCTIPO1 ::= smbvoid 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTIPO1",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // FUNCTIPO1 ::= smbshort 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTIPO1",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // FUNCTIPO1 ::= smblong 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTIPO1",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // FUNCTIPO1 ::= smbint 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTIPO1",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // FUNCTIPO1 ::= smbchar 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTIPO1",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FUNCTIPO ::= FUNCTIPO1 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTIPO",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FUNCTIPO ::= smbconst NT$24 FUNCTIPO1 
            {
              String RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTIPO",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$24 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$24",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // FUNCDEFIN ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCDEFIN",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // FUNCDEFIN ::= FUNCTIPO NT$22 IDENTIF NT$23 FUNCPARAM FUNCBLOCK FUNCDEFIN 
            {
              String RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCDEFIN",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$23 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 sm.guardar_funcion(i, true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$23",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NT$22 ::= 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 sm.guardar_tipo(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$22",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // VARASIG ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARASIG",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // VARASIG ::= smbigual NT$21 EXPASIARR 
            {
              String RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARASIG",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NT$21 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$21",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // VARARRAY ::= VARASIG 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARARRAY",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // VARARRAY ::= smbcuadradoabrir NT$19 LITERAL smbcuadradocerrar NT$20 VARARRAY 
            {
              String RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARARRAY",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$20 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$20",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$19 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$19",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // VARTIPO1 ::= smbshort 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARTIPO1",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // VARTIPO1 ::= smblong 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARTIPO1",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // VARTIPO1 ::= smbint 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARTIPO1",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // VARTIPO1 ::= smbchar 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARTIPO1",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // VARTIPO ::= VARTIPO1 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARTIPO",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // VARTIPO ::= smbconst NT$18 VARTIPO1 
            {
              String RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARTIPO",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$18 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$18",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // VARDECL2 ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARDECL2",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // VARDECL2 ::= smbcoma NT$16 IDENTIF NT$17 VARARRAY VARDECL2 
            {
              String RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARDECL2",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$17 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 sm.guardar_id(i, true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$17",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$16 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$16",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // VARDECL ::= VARTIPO NT$14 IDENTIF NT$15 VARARRAY VARDECL2 
            {
              String RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARDECL",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$15 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 sm.guardar_id(i, true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$15",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$14 ::= 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 sm.guardar_tipo(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$14",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // VAROFUNC2 ::= IDENTIF NT$13 FUNCPARAM FUNCBLOCK FUNCDEFIN 
            {
              String RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAROFUNC2",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$13 ::= 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 sm.guardar_funcion(i, true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$13",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // VAROFUNC2 ::= IDENTIF NT$11 VARARRAY VARDECL2 PUCOMA NT$12 VAROFUNC 
            {
              String RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAROFUNC2",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$12 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
 sm.declarar_variables(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$12",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$11 ::= 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 sm.guardar_id(i, true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$11",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // VAROFUNC1 ::= error NT$10 VAROFUNC 
            {
              String RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAROFUNC1",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$10 ::= 
            {
              String RESULT =null;
 print("Error en la declaración"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$10",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // VAROFUNC1 ::= smbvoid NT$8 IDENTIF NT$9 FUNCPARAM FUNCBLOCK FUNCDEFIN 
            {
              String RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAROFUNC1",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$9 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 sm.guardar_funcion(i, true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$9",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$8 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 sm.guardar_tipo(e); print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$8",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VAROFUNC1 ::= smbshort NT$7 VAROFUNC2 
            {
              String RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAROFUNC1",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$7 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 sm.guardar_tipo(e); print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$7",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VAROFUNC1 ::= smblong NT$6 VAROFUNC2 
            {
              String RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAROFUNC1",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$6 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 sm.guardar_tipo(e); print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$6",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VAROFUNC1 ::= smbint NT$5 VAROFUNC2 
            {
              String RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAROFUNC1",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$5 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 sm.guardar_tipo(e); print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$5",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VAROFUNC1 ::= smbchar NT$4 VAROFUNC2 
            {
              String RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAROFUNC1",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$4 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 sm.guardar_tipo(e); print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VAROFUNC ::= VAROFUNC1 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAROFUNC",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VAROFUNC ::= smbconst NT$3 VAROFUNC1 
            {
              String RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAROFUNC",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$3 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LAMFUNCP2 ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LAMFUNCP2",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LAMFUNCP2 ::= smbcoma NT$2 EXP LAMFUNCP2 
            {
              String RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LAMFUNCP2",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$2 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LAMFUNCP ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LAMFUNCP",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LAMFUNCP ::= EXP LAMFUNCP2 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LAMFUNCP",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LAMFUNC ::= IDENTIF smbparentabrir NT$1 LAMFUNCP smbparentcerrar 
            {
              String RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LAMFUNC",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$1 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // VAR ::= IDENTIF smbcuadradoabrir NT$0 EXP smbcuadradocerrar 
            {
              String RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$0 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // VAR ::= IDENTIF 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // IDENTIF ::= smbidentificador 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDENTIF",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PUCOMA ::= smbpuntocoma 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PUCOMA",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= VAROFUNC 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

