/* The following code was generated by JFlex 1.6.1 */

package analizador;
import static analizador.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/Mar√≠aLaura/Documents/Scanner/analizador/src/analizador/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\70\1\3\1\5\1\6\1\4\22\0\1\14\1\53\1\1"+
    "\2\0\1\53\1\55\1\0\1\61\1\62\1\56\1\46\1\45\1\47"+
    "\1\12\1\57\1\11\7\7\2\7\1\45\1\60\1\52\1\50\1\51"+
    "\1\45\1\0\4\10\1\67\1\10\24\13\1\63\1\2\1\64\1\53"+
    "\1\13\1\0\1\15\1\21\1\25\1\32\1\23\1\33\1\37\1\27"+
    "\1\31\1\13\1\24\1\34\1\35\1\30\1\20\1\43\1\13\1\22"+
    "\1\26\1\17\1\16\1\44\1\41\1\36\1\42\1\40\1\65\1\54"+
    "\1\66\1\45\6\0\1\5\u1fa2\0\1\5\1\5\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\2\2\2\3\1\1\1\4\1\5\1\4\1\6"+
    "\17\5\11\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\4\1\0\1\2\2\0\1\2\1\0\1\4"+
    "\1\0\1\2\1\4\17\5\2\16\6\5\3\0\1\4"+
    "\1\2\30\5\2\0\1\4\16\5\1\17\11\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[131];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\71\0\253\0\344\0\u011d\0\u0156"+
    "\0\u018f\0\u01c8\0\u0201\0\u023a\0\u0273\0\u02ac\0\u02e5\0\u031e"+
    "\0\u0357\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474\0\u04ad\0\u04e6"+
    "\0\u051f\0\71\0\u0558\0\u0591\0\u05ca\0\u0603\0\u063c\0\u0675"+
    "\0\u06ae\0\u06e7\0\71\0\71\0\71\0\71\0\71\0\71"+
    "\0\71\0\71\0\u0720\0\u0759\0\u0792\0\162\0\u07cb\0\u01c8"+
    "\0\u0804\0\u083d\0\u0876\0\u08af\0\u08e8\0\u0921\0\u095a\0\u0993"+
    "\0\u09cc\0\u0a05\0\u0a3e\0\u0a77\0\u0ab0\0\u0ae9\0\u0b22\0\u0b5b"+
    "\0\u0b94\0\u0bcd\0\u0c06\0\u0156\0\u0c3f\0\u0c78\0\u0cb1\0\u0cea"+
    "\0\u0d23\0\u0d5c\0\u0d95\0\u0dce\0\u0e07\0\u0e40\0\u0876\0\u0804"+
    "\0\u0e79\0\u0eb2\0\u0eeb\0\u0f24\0\u0f5d\0\u0f96\0\u0fcf\0\u1008"+
    "\0\u1041\0\u107a\0\u10b3\0\u10ec\0\u1125\0\u115e\0\u1197\0\u11d0"+
    "\0\u1209\0\u1242\0\u127b\0\u12b4\0\u12ed\0\u1326\0\u135f\0\u1398"+
    "\0\u13d1\0\u140a\0\u0e40\0\u1443\0\u147c\0\u14b5\0\u14ee\0\u1527"+
    "\0\u1560\0\u1599\0\u15d2\0\u160b\0\u1644\0\u167d\0\u16b6\0\u16ef"+
    "\0\u1728\0\u0dce\0\u1761\0\u179a\0\u17d3\0\u180c\0\u1845\0\u187e"+
    "\0\u18b7\0\u18f0\0\u1929";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[131];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\1\5\1\0\1\6\1\7"+
    "\1\10\1\11\1\12\1\10\1\6\1\13\1\14\1\15"+
    "\1\10\1\16\1\17\1\20\1\10\1\21\1\22\2\10"+
    "\1\23\1\24\1\25\1\26\2\10\1\27\1\10\1\30"+
    "\2\10\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\35\1\40\1\41\1\35\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\10\1\6\72\0\1\52"+
    "\1\53\1\2\1\54\2\0\1\53\1\55\2\53\1\55"+
    "\1\56\30\55\13\53\7\0\1\55\4\0\1\4\73\0"+
    "\1\6\5\0\1\6\53\0\1\6\7\0\1\7\1\57"+
    "\1\7\1\60\1\57\1\0\6\57\1\61\21\57\2\0"+
    "\1\62\17\0\1\61\2\0\1\2\5\0\3\10\1\0"+
    "\1\10\1\0\30\10\22\0\1\10\10\0\1\7\1\57"+
    "\1\7\1\60\1\57\1\0\6\57\1\61\12\57\1\63"+
    "\6\57\2\0\1\62\17\0\1\61\10\0\1\64\1\0"+
    "\1\64\60\0\1\2\5\0\3\10\1\0\1\10\1\0"+
    "\1\10\1\65\26\10\22\0\1\10\2\0\1\2\5\0"+
    "\3\10\1\0\1\10\1\0\13\10\1\66\14\10\22\0"+
    "\1\10\2\0\1\2\5\0\3\10\1\0\1\10\1\0"+
    "\25\10\1\67\2\10\22\0\1\10\2\0\1\2\5\0"+
    "\3\10\1\0\1\10\1\0\5\10\1\70\22\10\22\0"+
    "\1\10\2\0\1\2\5\0\3\10\1\0\1\10\1\0"+
    "\6\10\1\71\21\10\22\0\1\10\2\0\1\2\5\0"+
    "\3\10\1\0\1\10\1\0\13\10\1\72\3\10\1\73"+
    "\1\10\1\74\6\10\22\0\1\10\2\0\1\2\5\0"+
    "\3\10\1\0\1\10\1\0\1\73\2\10\1\75\6\10"+
    "\1\76\15\10\22\0\1\10\2\0\1\2\5\0\3\10"+
    "\1\0\1\10\1\0\2\10\1\77\7\10\1\100\1\10"+
    "\1\101\7\10\1\102\3\10\22\0\1\10\2\0\1\2"+
    "\5\0\3\10\1\0\1\10\1\0\13\10\1\103\2\10"+
    "\1\104\11\10\22\0\1\10\2\0\1\2\5\0\3\10"+
    "\1\0\1\10\1\0\3\10\1\105\2\10\1\106\21\10"+
    "\22\0\1\10\2\0\1\2\5\0\3\10\1\0\1\10"+
    "\1\0\3\10\1\107\13\10\1\110\10\10\22\0\1\10"+
    "\2\0\1\2\5\0\3\10\1\0\1\10\1\0\3\10"+
    "\1\111\24\10\22\0\1\10\2\0\1\2\5\0\3\10"+
    "\1\0\1\10\1\0\3\10\1\65\24\10\22\0\1\10"+
    "\2\0\1\2\5\0\3\10\1\0\1\10\1\0\12\10"+
    "\1\112\15\10\22\0\1\10\2\0\1\2\5\0\3\10"+
    "\1\0\1\10\1\0\3\10\1\113\24\10\22\0\1\10"+
    "\47\0\1\32\1\0\1\32\67\0\3\32\67\0\1\32"+
    "\70\0\1\32\1\35\67\0\1\32\1\0\1\35\66\0"+
    "\1\32\3\0\1\32\64\0\1\32\4\0\1\32\63\0"+
    "\1\32\5\0\1\114\1\115\12\0\1\52\1\53\4\0"+
    "\51\53\7\0\1\53\4\0\1\2\66\0\1\52\1\53"+
    "\1\2\1\54\2\0\3\55\1\53\1\55\1\56\30\55"+
    "\13\53\7\0\1\55\10\0\3\57\1\0\1\57\1\0"+
    "\30\57\22\0\1\57\10\0\1\61\1\57\1\61\1\0"+
    "\1\57\1\0\30\57\22\0\1\57\24\0\1\116\43\0"+
    "\1\116\10\0\3\117\1\0\1\57\1\0\1\117\3\57"+
    "\1\117\1\57\1\117\1\57\1\117\4\57\2\117\11\57"+
    "\22\0\1\117\10\0\1\64\1\57\1\64\1\0\1\57"+
    "\1\0\6\57\1\120\21\57\2\0\1\62\17\0\1\120"+
    "\2\0\1\2\5\0\3\10\1\0\1\10\1\0\2\10"+
    "\1\121\25\10\22\0\1\10\2\0\1\2\5\0\3\10"+
    "\1\0\1\10\1\0\11\10\1\122\2\10\1\123\13\10"+
    "\22\0\1\10\2\0\1\2\5\0\3\10\1\0\1\10"+
    "\1\0\26\10\1\124\1\10\22\0\1\10\2\0\1\2"+
    "\5\0\3\10\1\0\1\10\1\0\6\10\1\125\21\10"+
    "\22\0\1\10\2\0\1\2\5\0\3\10\1\0\1\10"+
    "\1\0\2\10\1\126\17\10\1\127\5\10\22\0\1\10"+
    "\2\0\1\2\5\0\3\10\1\0\1\10\1\0\1\10"+
    "\1\130\26\10\22\0\1\10\2\0\1\2\5\0\3\10"+
    "\1\0\1\10\1\0\11\10\1\131\16\10\22\0\1\10"+
    "\2\0\1\2\5\0\3\10\1\0\1\10\1\0\2\10"+
    "\1\132\25\10\22\0\1\10\2\0\1\2\5\0\3\10"+
    "\1\0\1\10\1\0\13\10\1\133\14\10\22\0\1\10"+
    "\2\0\1\2\5\0\3\10\1\0\1\10\1\0\1\107"+
    "\27\10\22\0\1\10\2\0\1\2\5\0\3\10\1\0"+
    "\1\10\1\0\1\134\4\10\1\135\22\10\22\0\1\10"+
    "\2\0\1\2\5\0\3\10\1\0\1\10\1\0\3\10"+
    "\1\136\24\10\22\0\1\10\2\0\1\2\5\0\3\10"+
    "\1\0\1\10\1\0\22\10\1\137\1\140\4\10\22\0"+
    "\1\10\2\0\1\2\5\0\3\10\1\0\1\10\1\0"+
    "\14\10\1\141\13\10\22\0\1\10\2\0\1\2\5\0"+
    "\3\10\1\0\1\10\1\0\2\10\1\104\25\10\22\0"+
    "\1\10\2\0\1\2\5\0\3\10\1\0\1\10\1\0"+
    "\1\10\1\142\26\10\22\0\1\10\2\0\1\2\5\0"+
    "\3\10\1\0\1\10\1\0\16\10\1\143\11\10\22\0"+
    "\1\10\2\0\1\2\5\0\3\10\1\0\1\10\1\0"+
    "\5\10\1\104\22\10\22\0\1\10\2\0\1\2\5\0"+
    "\3\10\1\0\1\10\1\0\3\10\1\144\24\10\22\0"+
    "\1\10\2\0\1\2\5\0\3\10\1\0\1\10\1\0"+
    "\13\10\1\145\14\10\22\0\1\10\2\0\1\2\5\0"+
    "\3\10\1\0\1\10\1\0\14\10\1\146\13\10\22\0"+
    "\1\10\2\0\1\2\5\0\3\10\1\0\1\10\1\0"+
    "\14\10\1\147\2\10\1\150\10\10\22\0\1\10\1\0"+
    "\1\114\1\0\1\151\53\114\1\152\12\114\2\0\1\115"+
    "\1\4\1\5\2\0\51\115\7\0\1\115\10\0\1\153"+
    "\1\0\1\153\60\0\1\2\5\0\3\10\1\0\1\10"+
    "\1\0\3\10\1\104\24\10\22\0\1\10\2\0\1\2"+
    "\5\0\3\10\1\0\1\10\1\0\14\10\1\154\13\10"+
    "\22\0\1\10\2\0\1\2\5\0\3\10\1\0\1\10"+
    "\1\0\3\10\1\155\24\10\22\0\1\10\2\0\1\2"+
    "\5\0\3\10\1\0\1\10\1\0\6\10\1\156\21\10"+
    "\22\0\1\10\2\0\1\2\5\0\3\10\1\0\1\10"+
    "\1\0\1\157\27\10\22\0\1\10\2\0\1\2\5\0"+
    "\3\10\1\0\1\10\1\0\1\10\1\160\26\10\22\0"+
    "\1\10\2\0\1\2\5\0\3\10\1\0\1\10\1\0"+
    "\14\10\1\161\13\10\22\0\1\10\2\0\1\2\5\0"+
    "\3\10\1\0\1\10\1\0\20\10\1\104\7\10\22\0"+
    "\1\10\2\0\1\2\5\0\3\10\1\0\1\10\1\0"+
    "\6\10\1\104\21\10\22\0\1\10\2\0\1\2\5\0"+
    "\3\10\1\0\1\10\1\0\6\10\1\160\21\10\22\0"+
    "\1\10\2\0\1\2\5\0\3\10\1\0\1\10\1\0"+
    "\2\10\1\162\6\10\1\103\16\10\22\0\1\10\2\0"+
    "\1\2\5\0\3\10\1\0\1\10\1\0\2\10\1\163"+
    "\25\10\22\0\1\10\2\0\1\2\5\0\3\10\1\0"+
    "\1\10\1\0\1\10\1\164\26\10\22\0\1\10\2\0"+
    "\1\2\5\0\3\10\1\0\1\10\1\0\5\10\1\103"+
    "\22\10\22\0\1\10\2\0\1\2\5\0\3\10\1\0"+
    "\1\10\1\0\13\10\1\165\14\10\22\0\1\10\2\0"+
    "\1\2\5\0\3\10\1\0\1\10\1\0\6\10\1\166"+
    "\21\10\22\0\1\10\2\0\1\2\5\0\3\10\1\0"+
    "\1\10\1\0\2\10\1\167\25\10\22\0\1\10\2\0"+
    "\1\2\5\0\3\10\1\0\1\10\1\0\4\10\1\146"+
    "\23\10\22\0\1\10\2\0\1\2\5\0\3\10\1\0"+
    "\1\10\1\0\1\170\27\10\22\0\1\10\2\0\1\2"+
    "\5\0\3\10\1\0\1\10\1\0\1\103\27\10\22\0"+
    "\1\10\2\0\1\2\5\0\3\10\1\0\1\10\1\0"+
    "\22\10\1\104\5\10\22\0\1\10\2\0\1\2\5\0"+
    "\3\10\1\0\1\10\1\0\17\10\1\131\10\10\22\0"+
    "\1\10\2\0\1\2\5\0\3\10\1\0\1\10\1\0"+
    "\15\10\1\104\12\10\22\0\1\10\2\0\1\2\5\0"+
    "\3\10\1\0\1\10\1\0\1\171\27\10\22\0\1\10"+
    "\1\0\3\114\4\0\63\114\1\0\1\151\53\114\1\152"+
    "\1\172\11\114\1\0\1\2\5\0\3\10\1\0\1\10"+
    "\1\0\22\10\1\137\5\10\22\0\1\10\2\0\1\2"+
    "\5\0\3\10\1\0\1\10\1\0\13\10\1\104\14\10"+
    "\22\0\1\10\2\0\1\2\5\0\3\10\1\0\1\10"+
    "\1\0\15\10\1\173\12\10\22\0\1\10\2\0\1\2"+
    "\5\0\3\10\1\0\1\10\1\0\7\10\1\104\20\10"+
    "\22\0\1\10\2\0\1\2\5\0\3\10\1\0\1\10"+
    "\1\0\5\10\1\155\22\10\22\0\1\10\2\0\1\2"+
    "\5\0\3\10\1\0\1\10\1\0\11\10\1\174\16\10"+
    "\22\0\1\10\2\0\1\2\5\0\3\10\1\0\1\10"+
    "\1\0\14\10\1\175\13\10\22\0\1\10\2\0\1\2"+
    "\5\0\3\10\1\0\1\10\1\0\14\10\1\176\13\10"+
    "\22\0\1\10\2\0\1\2\5\0\3\10\1\0\1\10"+
    "\1\0\10\10\1\103\17\10\22\0\1\10\2\0\1\2"+
    "\5\0\3\10\1\0\1\10\1\0\6\10\1\147\21\10"+
    "\22\0\1\10\2\0\1\2\5\0\3\10\1\0\1\10"+
    "\1\0\3\10\1\177\24\10\22\0\1\10\2\0\1\2"+
    "\5\0\3\10\1\0\1\10\1\0\10\10\1\200\17\10"+
    "\22\0\1\10\2\0\1\2\5\0\3\10\1\0\1\10"+
    "\1\0\1\10\1\201\26\10\22\0\1\10\2\0\1\2"+
    "\5\0\3\10\1\0\1\10\1\0\2\10\1\112\25\10"+
    "\22\0\1\10\2\0\1\2\5\0\3\10\1\0\1\10"+
    "\1\0\6\10\1\177\21\10\22\0\1\10\2\0\1\2"+
    "\5\0\3\10\1\0\1\10\1\0\2\10\1\202\25\10"+
    "\22\0\1\10\2\0\1\2\5\0\3\10\1\0\1\10"+
    "\1\0\13\10\1\203\14\10\22\0\1\10\2\0\1\2"+
    "\5\0\3\10\1\0\1\10\1\0\10\10\1\104\17\10"+
    "\22\0\1\10\2\0\1\2\5\0\3\10\1\0\1\10"+
    "\1\0\16\10\1\104\11\10\22\0\1\10\2\0\1\2"+
    "\5\0\3\10\1\0\1\10\1\0\12\10\1\104\15\10"+
    "\22\0\1\10\2\0\1\2\5\0\3\10\1\0\1\10"+
    "\1\0\17\10\1\103\10\10\22\0\1\10\2\0\1\2"+
    "\5\0\3\10\1\0\1\10\1\0\6\10\1\107\21\10"+
    "\22\0\1\10\2\0\1\2\5\0\3\10\1\0\1\10"+
    "\1\0\1\10\1\131\26\10\22\0\1\10\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6498];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\1\1\1\11\25\1\1\11\10\1\10\11"+
    "\1\0\1\1\2\0\1\1\1\0\1\1\1\0\31\1"+
    "\3\0\32\1\2\0\31\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[131];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public String lexeme;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 188) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { /*Ignore*/
            }
          case 16: break;
          case 2: 
            { lexeme=yytext(); return ERROR;
            }
          case 17: break;
          case 3: 
            { lexeme=yytext(); return SaltoDeLinea;
            }
          case 18: break;
          case 4: 
            { lexeme=yytext(); return Literal;
            }
          case 19: break;
          case 5: 
            { lexeme=yytext(); return Identificador;
            }
          case 20: break;
          case 6: 
            { lexeme=yytext(); return Operador;
            }
          case 21: break;
          case 7: 
            { lexeme=yytext(); return PuntoComa;
            }
          case 22: break;
          case 8: 
            { lexeme=yytext(); return ParentesisI;
            }
          case 23: break;
          case 9: 
            { lexeme=yytext(); return ParentesisD;
            }
          case 24: break;
          case 10: 
            { lexeme=yytext(); return ParentesisCI;
            }
          case 25: break;
          case 11: 
            { lexeme=yytext(); return ParentesisCD;
            }
          case 26: break;
          case 12: 
            { lexeme=yytext(); return LlaveI;
            }
          case 27: break;
          case 13: 
            { lexeme=yytext(); return LlaveD;
            }
          case 28: break;
          case 14: 
            { lexeme=yytext(); return PalabraReservada;
            }
          case 29: break;
          case 15: 
            { lexeme=yytext(); return Comentario;
            }
          case 30: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
