/* The following code was generated by JFlex 1.6.1 */

package iiproyecto;

import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/iiproyecto/Lexer.flex</tt>
 */
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHARLITERAL = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     2,  2,  2,  2,  2,  2,  2,  2,  2,  3, 53, 54, 54, 53,  2,  2, 
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 60, 60, 60, 60, 
     3, 37, 57, 60,  1, 44, 39, 58, 47, 48, 42, 40, 45, 41, 60, 43, 
     4,  9,  8,  8, 10, 10, 10, 10,  5,  5, 60, 46, 36, 34, 35, 60, 
    60, 17, 14, 20, 30, 16,  7, 31, 23, 28,  1, 19,  6,  1, 25, 24, 
     1,  1, 15, 22, 26, 29, 33, 32,  1,  1,  1, 49, 59, 50, 60,  1, 
    60, 17, 14, 20, 30, 16,  7, 31, 23, 28,  1, 19,  6,  1, 25, 24, 
     1,  1, 15, 22, 26, 29, 33, 32,  1,  1,  1, 51, 38, 52, 60,  2, 
    13, 13, 13, 13, 13, 55, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
    13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
    11, 11, 12, 12, 12, 12, 11, 11, 11, 11, 12, 11, 11, 13, 11, 11, 
    11, 11, 11, 11, 11, 12, 11, 11, 11, 11, 12, 11, 11, 11, 11, 11, 
    12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 
    12, 12, 12, 12, 12, 12, 12, 11, 12, 12, 12, 12, 12, 12, 12, 12, 
    12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 
    12, 12, 12, 12, 12, 12, 12, 11, 12, 12, 12, 12, 12, 12, 12, 12
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\2\4\1\1\1\4\1\2"+
    "\1\1\1\4\1\1\3\4\1\0\1\1\1\0\1\1"+
    "\1\4\2\1\1\5\1\6\1\7\1\10\2\2\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\2\1\0\5\2\3\4\1\1\3\2\1\0\1\2"+
    "\1\1\4\2\2\0\2\1\1\32\1\0\1\32\1\1"+
    "\1\2\1\33\3\1\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\0"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\10\0"+
    "\2\4\1\1\1\57\1\2\2\1\1\0\1\2\1\0"+
    "\3\2\2\0\2\1\2\60\1\2\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\2\4\1\71\1\2\1\72"+
    "\1\1\2\73\2\74\1\75\1\0\2\2\2\0\2\1"+
    "\1\2\1\0\1\1\1\0\1\1\2\76\1\77\2\4"+
    "\2\100\1\1\2\101\1\0\1\2\1\102\1\0\1\102"+
    "\1\1\1\2\2\103\2\104\2\4\1\105\1\0\1\2"+
    "\2\106\1\2\2\4\1\0\1\2\1\107\2\4\2\110"+
    "\21\4\2\0\1\4\4\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[229];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\364\0\u0131\0\u016e\0\u01ab"+
    "\0\u01e8\0\u0225\0\u0262\0\u029f\0\u02dc\0\u0319\0\u0356\0\u029f"+
    "\0\u0393\0\u03d0\0\u040d\0\u044a\0\u0487\0\u04c4\0\u0501\0\u053e"+
    "\0\u057b\0\u05b8\0\u05f5\0\u0632\0\u066f\0\u06ac\0\u06e9\0\u0726"+
    "\0\u0763\0\u07a0\0\364\0\364\0\364\0\364\0\364\0\364"+
    "\0\364\0\364\0\364\0\364\0\364\0\u07dd\0\364\0\u081a"+
    "\0\u0857\0\u0857\0\u0894\0\u08d1\0\u029f\0\u090e\0\u094b\0\u0988"+
    "\0\u09c5\0\u0a02\0\u0a3f\0\u0a7c\0\u0ab9\0\u0262\0\u0af6\0\u0b33"+
    "\0\u0b70\0\u0bad\0\u0bea\0\u0c27\0\u0c64\0\u0ca1\0\u0cde\0\u0d1b"+
    "\0\364\0\u0d58\0\267\0\u0d95\0\u0dd2\0\u0a3f\0\u0e0f\0\u0e4c"+
    "\0\u0e89\0\364\0\364\0\364\0\364\0\364\0\364\0\364"+
    "\0\364\0\364\0\364\0\364\0\364\0\u0ec6\0\u0f03\0\364"+
    "\0\364\0\364\0\364\0\364\0\364\0\u0f40\0\u0f7d\0\u0fba"+
    "\0\u0ff7\0\u1034\0\u1071\0\u10ae\0\u10eb\0\u1128\0\u1165\0\u11a2"+
    "\0\u0a3f\0\u11df\0\u121c\0\u1259\0\u1296\0\u12d3\0\u1310\0\u134d"+
    "\0\u138a\0\u13c7\0\u1404\0\u1441\0\u147e\0\u14bb\0\364\0\267"+
    "\0\u14f8\0\u1535\0\u1572\0\u15af\0\u15ec\0\u1629\0\u1666\0\u16a3"+
    "\0\364\0\364\0\364\0\364\0\364\0\364\0\364\0\364"+
    "\0\u16e0\0\u171d\0\267\0\u175a\0\267\0\u1797\0\364\0\u0a3f"+
    "\0\364\0\u0a3f\0\u0a3f\0\u17d4\0\u1811\0\u184e\0\u188b\0\u18c8"+
    "\0\u1905\0\u1942\0\u197f\0\u19bc\0\u19f9\0\u1a36\0\u1a73\0\364"+
    "\0\267\0\u0ec6\0\u1ab0\0\u1aed\0\364\0\u0a3f\0\u1b2a\0\364"+
    "\0\u0a3f\0\u1b67\0\u1ba4\0\364\0\u1be1\0\267\0\u1c1e\0\u1c5b"+
    "\0\364\0\267\0\364\0\267\0\u1c98\0\u1cd5\0\267\0\u1d12"+
    "\0\u1d4f\0\364\0\267\0\u1d8c\0\u1dc9\0\u1e06\0\u1e43\0\u1e80"+
    "\0\u0a3f\0\u1ebd\0\u1efa\0\364\0\u0a3f\0\u1f37\0\u1f74\0\u1fb1"+
    "\0\u1fee\0\u202b\0\u2068\0\u20a5\0\u20e2\0\u211f\0\u215c\0\u2199"+
    "\0\u21d6\0\u2213\0\u2250\0\u228d\0\u22ca\0\u2307\0\u2344\0\u2381"+
    "\0\u23be\0\u23fb\0\u2438\0\u2475\0\u24b2";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[229];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\3\10\1\13\1\14\1\13\1\15\1\16\1\17\1\20"+
    "\1\0\1\4\1\21\1\22\1\23\4\4\1\24\1\25"+
    "\1\4\1\26\1\4\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\6\1\5\1\13\1\0\1\54\1\55\2\5\65\56"+
    "\1\5\3\56\1\57\1\56\1\60\1\56\1\61\21\62"+
    "\1\61\2\62\1\61\5\62\1\61\31\62\1\5\2\62"+
    "\1\61\1\62\1\5\1\63\1\62\1\0\2\4\1\0"+
    "\7\4\1\64\2\65\4\4\1\0\2\4\1\0\5\4"+
    "\1\0\6\4\25\0\1\65\105\0\1\6\61\0\1\6"+
    "\10\0\1\66\2\0\1\7\1\0\2\66\1\67\1\70"+
    "\1\71\1\0\1\66\1\0\4\66\1\0\2\66\1\0"+
    "\5\66\1\0\6\66\34\0\1\66\2\0\2\10\2\66"+
    "\3\10\1\0\1\66\1\0\4\66\1\0\2\66\1\0"+
    "\5\66\1\0\6\66\34\0\2\4\1\0\7\4\1\64"+
    "\2\65\4\4\1\0\2\4\1\0\2\4\1\72\2\4"+
    "\1\0\6\4\25\0\1\65\6\0\1\73\1\4\1\0"+
    "\2\4\2\73\3\4\1\64\1\73\1\65\4\73\1\0"+
    "\2\73\1\0\2\73\1\74\2\73\1\0\6\73\25\0"+
    "\1\65\6\0\1\75\4\0\2\75\3\0\1\76\1\75"+
    "\1\76\4\75\1\0\2\75\1\0\5\75\1\0\6\75"+
    "\25\0\1\76\6\0\1\73\1\4\1\0\2\4\2\73"+
    "\3\4\1\64\1\73\1\65\4\73\1\0\2\73\1\0"+
    "\5\73\1\0\6\73\25\0\1\65\6\0\1\73\1\4"+
    "\1\0\2\4\2\73\3\4\1\64\1\73\1\65\1\73"+
    "\1\77\2\73\1\0\2\73\1\0\5\73\1\0\6\73"+
    "\25\0\1\65\6\0\2\4\1\0\7\4\1\64\2\65"+
    "\2\4\1\100\1\4\1\0\2\4\1\0\5\4\1\0"+
    "\6\4\25\0\1\65\6\0\1\73\1\4\1\0\2\4"+
    "\1\101\1\73\3\4\1\64\1\73\1\65\4\73\1\0"+
    "\2\73\1\0\5\73\1\0\6\73\25\0\1\65\6\0"+
    "\1\73\1\4\1\0\2\4\2\73\3\4\1\64\1\73"+
    "\1\65\3\73\1\102\1\0\2\73\1\0\1\73\1\103"+
    "\1\104\2\73\1\0\6\73\25\0\1\65\34\0\1\105"+
    "\10\0\1\106\35\0\2\4\1\0\7\4\1\64\2\65"+
    "\4\4\1\0\2\4\1\0\1\4\1\107\3\4\1\0"+
    "\4\4\1\110\1\4\25\0\1\65\14\0\1\111\21\0"+
    "\1\112\44\0\2\4\1\0\3\4\1\113\3\4\1\64"+
    "\2\65\4\4\1\0\2\4\1\0\3\4\1\114\1\4"+
    "\1\0\6\4\25\0\1\65\6\0\1\73\1\4\1\0"+
    "\2\4\2\73\3\4\1\64\1\73\1\65\2\73\1\115"+
    "\1\73\1\0\2\73\1\0\2\73\1\116\2\73\1\0"+
    "\6\73\25\0\1\65\6\0\2\4\1\0\7\4\1\64"+
    "\2\65\1\4\1\117\2\4\1\0\2\4\1\0\1\4"+
    "\1\120\3\4\1\0\6\4\25\0\1\65\6\0\2\4"+
    "\1\0\7\4\1\64\2\65\4\4\1\0\2\4\1\0"+
    "\2\4\1\121\2\4\1\0\6\4\25\0\1\65\47\0"+
    "\1\122\74\0\1\123\74\0\1\124\74\0\1\125\100\0"+
    "\1\126\75\0\1\127\67\0\1\130\5\0\1\131\66\0"+
    "\1\132\6\0\1\133\65\0\1\134\74\0\1\135\7\0"+
    "\1\136\1\137\21\0\65\56\1\0\3\56\1\0\1\56"+
    "\1\0\1\56\17\0\1\140\11\0\1\141\1\142\36\0"+
    "\1\143\1\0\1\144\73\0\1\145\11\0\1\146\6\0"+
    "\1\147\1\150\11\0\1\151\1\152\36\0\1\153\1\154"+
    "\1\155\2\0\1\73\4\0\2\73\3\0\1\64\1\73"+
    "\1\64\4\73\1\0\2\73\1\0\5\73\1\0\6\73"+
    "\25\0\1\64\6\0\2\66\1\0\7\66\1\0\6\66"+
    "\1\0\2\66\1\0\5\66\1\0\6\66\25\0\1\66"+
    "\6\0\1\66\2\0\1\156\1\0\2\66\3\156\1\0"+
    "\1\66\1\0\4\66\1\0\2\66\1\0\5\66\1\0"+
    "\6\66\34\0\1\66\2\0\1\71\1\0\2\66\3\71"+
    "\1\0\1\66\1\0\4\66\1\0\2\66\1\0\5\66"+
    "\1\0\6\66\34\0\1\66\2\0\1\157\1\0\2\66"+
    "\3\157\1\0\1\66\1\0\4\66\1\0\2\66\1\0"+
    "\5\66\1\0\6\66\34\0\2\4\1\0\7\4\1\64"+
    "\2\65\4\4\1\0\2\4\1\0\3\4\1\160\1\4"+
    "\1\0\6\4\25\0\1\65\6\0\2\73\1\0\7\73"+
    "\1\64\6\73\1\0\2\73\1\0\5\73\1\0\6\73"+
    "\25\0\1\73\6\0\2\73\1\0\7\73\1\64\3\73"+
    "\1\161\2\73\1\0\2\73\1\0\5\73\1\0\6\73"+
    "\25\0\1\73\6\0\1\73\1\75\1\0\2\75\2\73"+
    "\3\75\1\76\1\73\1\75\4\73\1\0\2\73\1\0"+
    "\5\73\1\0\6\73\25\0\1\75\6\0\2\73\1\0"+
    "\7\73\1\64\4\73\1\162\1\73\1\0\2\73\1\0"+
    "\5\73\1\0\6\73\25\0\1\73\6\0\2\4\1\0"+
    "\7\4\1\64\2\65\3\4\1\163\1\0\2\4\1\0"+
    "\4\4\1\164\1\0\6\4\25\0\1\65\6\0\2\73"+
    "\1\0\7\73\1\64\6\73\1\0\2\73\1\165\1\166"+
    "\4\73\1\0\6\73\25\0\1\73\6\0\2\73\1\0"+
    "\7\73\1\64\6\73\1\0\2\73\1\167\1\170\4\73"+
    "\1\0\6\73\25\0\1\73\6\0\2\73\1\0\7\73"+
    "\1\64\5\73\1\171\1\0\2\73\1\0\5\73\1\0"+
    "\6\73\25\0\1\73\6\0\2\73\1\0\7\73\1\64"+
    "\6\73\1\0\2\73\1\0\3\73\1\172\1\73\1\0"+
    "\6\73\25\0\1\73\35\0\1\173\77\0\2\174\41\0"+
    "\2\4\1\0\7\4\1\64\2\65\4\4\1\0\2\4"+
    "\1\0\2\4\1\175\2\4\1\0\6\4\25\0\1\65"+
    "\6\0\2\4\1\0\7\4\1\64\2\65\4\4\1\0"+
    "\2\4\1\0\5\4\1\174\1\176\5\4\25\0\1\65"+
    "\37\0\1\177\43\0\2\4\1\0\7\4\1\64\2\65"+
    "\4\4\1\0\2\4\1\0\4\4\1\200\1\0\6\4"+
    "\25\0\1\65\6\0\2\73\1\0\3\73\1\201\3\73"+
    "\1\64\6\73\1\0\2\73\1\0\5\73\1\0\6\73"+
    "\25\0\1\73\6\0\2\4\1\0\7\4\1\64\2\65"+
    "\4\4\1\0\2\4\1\0\5\4\1\202\1\203\5\4"+
    "\25\0\1\65\6\0\2\4\1\0\7\4\1\64\2\65"+
    "\4\4\1\0\2\4\1\0\5\4\1\204\1\205\5\4"+
    "\25\0\1\65\6\0\2\4\1\0\7\4\1\64\2\65"+
    "\4\4\1\0\2\4\1\0\5\4\1\206\1\207\5\4"+
    "\25\0\1\65\5\0\52\136\1\210\22\136\65\137\4\0"+
    "\4\137\72\0\1\211\74\0\1\212\74\0\1\213\74\0"+
    "\1\214\74\0\1\215\74\0\1\216\74\0\1\217\74\0"+
    "\1\220\3\0\1\66\2\0\1\221\1\0\2\66\3\221"+
    "\1\0\1\66\1\0\4\66\1\0\2\66\1\0\5\66"+
    "\1\0\6\66\34\0\1\66\2\0\1\222\1\0\2\66"+
    "\3\222\1\0\1\66\1\0\4\66\1\0\2\66\1\0"+
    "\5\66\1\0\6\66\34\0\2\4\1\0\7\4\1\64"+
    "\2\65\4\4\1\0\2\4\1\0\5\4\1\0\3\4"+
    "\1\223\2\4\25\0\1\65\6\0\2\73\1\0\7\73"+
    "\1\64\5\73\1\224\1\0\2\73\1\0\5\73\1\0"+
    "\6\73\25\0\1\73\6\0\2\4\1\0\7\4\1\64"+
    "\2\65\4\4\1\0\2\4\1\0\5\4\1\0\2\4"+
    "\1\225\3\4\25\0\1\65\6\0\2\4\1\0\7\4"+
    "\1\64\2\65\4\4\1\0\2\4\1\0\5\4\1\0"+
    "\1\4\1\226\4\4\25\0\1\65\25\0\1\227\55\0"+
    "\2\73\1\0\7\73\1\64\4\73\1\230\1\73\1\0"+
    "\2\73\1\0\5\73\1\0\6\73\25\0\1\73\25\0"+
    "\1\231\55\0\2\73\1\0\7\73\1\64\4\73\1\232"+
    "\1\73\1\0\2\73\1\0\5\73\1\0\6\73\25\0"+
    "\1\73\6\0\2\73\1\0\7\73\1\64\3\73\1\233"+
    "\2\73\1\0\2\73\1\0\5\73\1\0\6\73\25\0"+
    "\1\73\6\0\2\73\1\0\7\73\1\64\6\73\1\0"+
    "\2\73\1\234\1\235\3\73\1\236\1\0\6\73\25\0"+
    "\1\73\24\0\1\237\107\0\1\240\43\0\2\4\1\0"+
    "\7\4\1\64\2\65\1\4\1\241\2\4\1\0\2\4"+
    "\1\0\5\4\1\0\6\4\25\0\1\65\6\0\2\4"+
    "\1\0\7\4\1\64\2\65\4\4\1\0\2\4\1\0"+
    "\4\4\1\242\1\0\6\4\25\0\1\65\6\0\2\73"+
    "\1\0\7\73\1\64\5\73\1\243\1\0\2\73\1\0"+
    "\5\73\1\0\6\73\25\0\1\73\37\0\1\244\43\0"+
    "\2\4\1\0\7\4\1\64\2\65\4\4\1\0\2\4"+
    "\1\0\4\4\1\245\1\0\6\4\25\0\1\65\13\0"+
    "\1\246\67\0\2\4\1\0\2\4\1\247\4\4\1\64"+
    "\2\65\4\4\1\0\2\4\1\0\5\4\1\0\6\4"+
    "\25\0\1\65\43\0\1\250\37\0\2\4\1\0\7\4"+
    "\1\64\2\65\4\4\1\0\2\4\1\0\5\4\1\0"+
    "\2\4\1\251\3\4\25\0\1\65\5\0\52\136\1\210"+
    "\1\252\21\136\1\0\1\66\2\0\1\253\1\0\2\66"+
    "\3\253\1\0\1\66\1\0\4\66\1\0\2\66\1\0"+
    "\5\66\1\0\6\66\34\0\1\66\2\0\1\254\1\0"+
    "\2\66\3\254\1\0\1\66\1\0\4\66\1\0\2\66"+
    "\1\0\5\66\1\0\6\66\34\0\2\73\1\0\7\73"+
    "\1\64\6\73\1\255\1\256\1\73\1\0\5\73\1\0"+
    "\6\73\25\0\1\73\6\0\2\4\1\0\7\4\1\64"+
    "\2\65\1\4\1\257\2\4\1\0\2\4\1\0\5\4"+
    "\1\0\6\4\25\0\1\65\37\0\1\260\43\0\2\73"+
    "\1\0\7\73\1\64\6\73\1\0\2\73\1\0\4\73"+
    "\1\261\1\0\6\73\25\0\1\73\6\0\2\73\1\0"+
    "\7\73\1\64\6\73\1\0\2\73\1\0\5\73\1\262"+
    "\1\263\5\73\25\0\1\73\37\0\1\264\66\0\1\265"+
    "\51\0\2\4\1\0\7\4\1\64\2\65\4\4\1\0"+
    "\2\4\1\0\4\4\1\266\1\0\6\4\25\0\1\65"+
    "\6\0\2\4\1\0\7\4\1\64\2\65\4\4\1\0"+
    "\1\4\1\267\1\0\5\4\1\0\6\4\25\0\1\65"+
    "\6\0\2\73\1\0\7\73\1\64\6\73\1\0\2\73"+
    "\1\0\5\73\1\0\1\73\1\270\4\73\25\0\1\73"+
    "\25\0\1\271\55\0\2\4\1\0\7\4\1\64\2\65"+
    "\2\4\1\272\1\4\1\0\2\4\1\0\5\4\1\0"+
    "\6\4\25\0\1\65\25\0\1\273\55\0\2\4\1\0"+
    "\7\4\1\64\2\65\2\4\1\274\1\4\1\0\2\4"+
    "\1\0\5\4\1\0\6\4\25\0\1\65\6\0\1\66"+
    "\2\0\1\275\1\0\2\66\3\275\1\0\1\66\1\0"+
    "\4\66\1\0\2\66\1\0\5\66\1\0\6\66\34\0"+
    "\1\66\2\0\1\276\1\0\2\66\3\276\1\0\1\66"+
    "\1\0\4\66\1\0\2\66\1\0\5\66\1\0\6\66"+
    "\34\0\2\4\1\0\7\4\1\64\2\65\4\4\1\0"+
    "\2\4\1\0\3\4\1\277\1\4\1\0\6\4\25\0"+
    "\1\65\36\0\1\300\44\0\2\73\1\0\7\73\1\64"+
    "\6\73\1\0\2\73\1\0\3\73\1\301\1\73\1\0"+
    "\6\73\25\0\1\73\34\0\1\302\46\0\2\4\1\0"+
    "\7\4\1\64\2\65\4\4\1\0\2\4\1\0\1\4"+
    "\1\303\3\4\1\0\6\4\25\0\1\65\6\0\2\73"+
    "\1\0\2\73\1\304\4\73\1\64\6\73\1\0\2\73"+
    "\1\0\5\73\1\0\6\73\25\0\1\73\6\0\1\66"+
    "\2\0\1\305\1\0\2\66\3\305\1\0\1\66\1\0"+
    "\4\66\1\0\2\66\1\0\5\66\1\0\6\66\34\0"+
    "\1\66\2\0\1\306\1\0\2\66\3\306\1\0\1\66"+
    "\1\0\4\66\1\0\2\66\1\0\5\66\1\0\6\66"+
    "\70\0\1\307\40\0\2\73\1\0\7\73\1\64\6\73"+
    "\1\0\2\73\1\0\5\73\1\0\1\73\1\310\4\73"+
    "\25\0\1\73\6\0\2\73\1\0\7\73\1\64\6\73"+
    "\1\0\2\73\1\0\4\73\1\311\1\0\6\73\25\0"+
    "\1\73\6\0\1\66\2\0\1\312\1\0\2\66\3\312"+
    "\1\0\1\66\1\0\4\66\1\0\2\66\1\0\5\66"+
    "\1\0\6\66\34\0\1\66\2\0\1\313\1\0\2\66"+
    "\3\313\1\0\1\66\1\0\4\66\1\0\2\66\1\0"+
    "\5\66\1\0\6\66\53\0\1\314\55\0\2\73\1\0"+
    "\7\73\1\64\4\73\1\315\1\73\1\0\2\73\1\0"+
    "\5\73\1\0\6\73\25\0\1\73\6\0\1\66\2\0"+
    "\1\316\1\0\2\66\3\316\1\0\1\66\1\0\4\66"+
    "\1\0\2\66\1\0\5\66\1\0\6\66\34\0\1\66"+
    "\2\0\1\317\1\0\2\66\3\317\1\0\1\66\1\0"+
    "\4\66\1\0\2\66\1\0\5\66\1\0\6\66\34\0"+
    "\1\66\2\0\1\320\1\0\2\66\3\320\1\0\1\66"+
    "\1\0\4\66\1\0\2\66\1\0\5\66\1\0\6\66"+
    "\34\0\1\66\2\0\1\321\1\0\2\66\3\321\1\0"+
    "\1\66\1\0\4\66\1\0\2\66\1\0\5\66\1\0"+
    "\6\66\34\0\1\66\2\0\1\322\1\0\2\66\3\322"+
    "\1\0\1\66\1\0\4\66\1\0\2\66\1\0\5\66"+
    "\1\0\6\66\34\0\1\66\2\0\1\323\1\0\2\66"+
    "\3\323\1\0\1\66\1\0\4\66\1\0\2\66\1\0"+
    "\5\66\1\0\6\66\34\0\1\66\2\0\1\324\1\0"+
    "\2\66\3\324\1\0\1\66\1\0\4\66\1\0\2\66"+
    "\1\0\5\66\1\0\6\66\34\0\1\66\2\0\1\325"+
    "\1\0\2\66\3\325\1\0\1\66\1\0\4\66\1\0"+
    "\2\66\1\0\5\66\1\0\6\66\34\0\1\66\2\0"+
    "\1\326\1\0\2\66\3\326\1\0\1\66\1\0\4\66"+
    "\1\0\2\66\1\0\5\66\1\0\6\66\34\0\1\66"+
    "\2\0\1\327\1\0\2\66\3\327\1\0\1\66\1\0"+
    "\4\66\1\0\2\66\1\0\5\66\1\0\6\66\34\0"+
    "\1\66\2\0\1\330\1\0\2\66\3\330\1\0\1\66"+
    "\1\0\4\66\1\0\2\66\1\0\5\66\1\0\6\66"+
    "\34\0\1\66\2\0\1\331\1\0\2\66\3\331\1\0"+
    "\1\66\1\0\4\66\1\0\2\66\1\0\5\66\1\0"+
    "\6\66\34\0\1\66\2\0\1\332\1\0\2\66\3\332"+
    "\1\0\1\66\1\0\4\66\1\0\2\66\1\0\5\66"+
    "\1\0\6\66\34\0\1\66\2\0\1\333\1\0\2\66"+
    "\3\333\1\0\1\66\1\0\4\66\1\0\2\66\1\0"+
    "\5\66\1\0\6\66\34\0\1\66\2\0\1\334\1\0"+
    "\2\66\3\334\1\0\1\66\1\0\4\66\1\0\2\66"+
    "\1\0\5\66\1\0\6\66\34\0\1\66\2\0\1\335"+
    "\1\0\2\66\3\335\1\0\1\66\1\0\4\66\1\0"+
    "\2\66\1\0\5\66\1\0\6\66\34\0\1\66\2\0"+
    "\1\336\1\0\2\66\3\336\1\0\1\66\1\0\4\66"+
    "\1\0\2\66\1\0\5\66\1\0\6\66\34\0\1\66"+
    "\2\0\1\337\1\0\2\66\3\337\1\0\1\66\1\0"+
    "\4\66\1\0\2\66\1\0\5\66\1\0\6\66\34\0"+
    "\1\66\2\0\1\340\1\0\2\66\3\340\1\0\1\66"+
    "\1\0\4\66\1\0\2\66\1\0\5\66\1\0\6\66"+
    "\37\0\1\340\1\0\1\341\1\0\3\340\66\0\1\342"+
    "\1\0\1\341\1\0\3\342\63\0\1\66\4\0\2\66"+
    "\4\0\1\66\1\0\4\66\1\0\2\66\1\0\5\66"+
    "\1\0\6\66\37\0\1\343\1\0\1\341\1\0\3\343"+
    "\66\0\1\344\1\0\1\341\1\0\3\344\66\0\1\345"+
    "\1\0\1\341\1\0\3\345\70\0\1\341\66\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9455];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\1\1\11\14\1\1\0\1\1\1\0\16\1"+
    "\13\11\1\1\1\11\1\1\1\0\14\1\1\0\6\1"+
    "\2\0\2\1\1\11\1\0\7\1\14\11\1\0\1\1"+
    "\6\11\10\0\7\1\1\0\1\1\1\0\3\1\2\0"+
    "\2\1\1\11\2\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\10\11\6\1\1\11\1\1\1\11\2\1"+
    "\1\0\2\1\2\0\3\1\1\0\1\1\1\0\1\1"+
    "\1\11\4\1\1\11\2\1\1\11\1\1\1\0\1\1"+
    "\1\11\1\0\3\1\1\11\1\1\1\11\4\1\1\0"+
    "\1\1\1\11\4\1\1\0\4\1\1\11\22\1\2\0"+
    "\1\1\4\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[229];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	StringBuffer string = new StringBuffer();

	private Symbol simbolo(String texto, int tipo, Object valor) {
		System.out.println("Lexer: " + texto);
		return new Symbol(tipo, yycolumn, yyline, valor);
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {   return new Symbol(Simbolos.EOF, yycolumn, yyline, yytext());
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return simbolo("IDENTIFICADOR: " + yytext(), Simbolos.smbidentificador, yytext());
            }
          case 73: break;
          case 2: 
            { System.out.println("Error lexico en la linea " + yyline + ", columna " + yycolumn + " : Caracter ilegal <"+ yytext()+">");
            }
          case 74: break;
          case 3: 
            { /* No haga nada */
            }
          case 75: break;
          case 4: 
            { return simbolo("INT: " + yytext(), Simbolos.smbint, yytext());
            }
          case 76: break;
          case 5: 
            { return simbolo("=", Simbolos.smbigual, yytext());
            }
          case 77: break;
          case 6: 
            { return simbolo(">", Simbolos.smbmayor, yytext());
            }
          case 78: break;
          case 7: 
            { return simbolo("<", Simbolos.smbmenor, yytext());
            }
          case 79: break;
          case 8: 
            { return simbolo("!", Simbolos.smbadmiracion, yytext());
            }
          case 80: break;
          case 9: 
            { return simbolo("+", Simbolos.smbmas, yytext());
            }
          case 81: break;
          case 10: 
            { return simbolo("-", Simbolos.smbmenos, yytext());
            }
          case 82: break;
          case 11: 
            { return simbolo("*", Simbolos.smbmultiplicacion, yytext());
            }
          case 83: break;
          case 12: 
            { return simbolo("/", Simbolos.smbdivision, yytext());
            }
          case 84: break;
          case 13: 
            { return simbolo("%", Simbolos.smbdivisionentera, yytext());
            }
          case 85: break;
          case 14: 
            { return simbolo(",", Simbolos.smbcoma, yytext());
            }
          case 86: break;
          case 15: 
            { return simbolo(";", Simbolos.smbpuntocoma, yytext());
            }
          case 87: break;
          case 16: 
            { return simbolo("(", Simbolos.smbparentabrir, yytext());
            }
          case 88: break;
          case 17: 
            { return simbolo(")", Simbolos.smbparentcerrar, yytext());
            }
          case 89: break;
          case 18: 
            { return simbolo("[", Simbolos.smbcuadradoabrir, yytext());
            }
          case 90: break;
          case 19: 
            { return simbolo("]", Simbolos.smbcuadradocerrar, yytext());
            }
          case 91: break;
          case 20: 
            { return simbolo("{", Simbolos.smbllaveabrir, yytext());
            }
          case 92: break;
          case 21: 
            { return simbolo("}", Simbolos.smbllavecerrar, yytext());
            }
          case 93: break;
          case 22: 
            { string.setLength(0); yybegin(STRING);
            }
          case 94: break;
          case 23: 
            { yybegin(CHARLITERAL);
            }
          case 95: break;
          case 24: 
            { string.append( yytext() );
            }
          case 96: break;
          case 25: 
            { yybegin(YYINITIAL); return simbolo("STRING: " + string.toString(), Simbolos.smbstring, string.toString());
            }
          case 97: break;
          case 26: 
            { return simbolo("if", Simbolos.smbif, yytext());
            }
          case 98: break;
          case 27: 
            { return simbolo("do", Simbolos.smbdo, yytext());
            }
          case 99: break;
          case 28: 
            { return simbolo("==", Simbolos.smbigualigual, yytext());
            }
          case 100: break;
          case 29: 
            { return simbolo(">=", Simbolos.smbmayorigual, yytext());
            }
          case 101: break;
          case 30: 
            { return simbolo("<=", Simbolos.smbmenorigual, yytext());
            }
          case 102: break;
          case 31: 
            { return simbolo("!=", Simbolos.smbdiferente, yytext());
            }
          case 103: break;
          case 32: 
            { return simbolo("||", Simbolos.smbor, yytext());
            }
          case 104: break;
          case 33: 
            { return simbolo("&&", Simbolos.smband, yytext());
            }
          case 105: break;
          case 34: 
            { return simbolo("+=", Simbolos.smbmasigual, yytext());
            }
          case 106: break;
          case 35: 
            { return simbolo("++", Simbolos.smbmasmas, yytext());
            }
          case 107: break;
          case 36: 
            { return simbolo("-=", Simbolos.smbmenosigual, yytext());
            }
          case 108: break;
          case 37: 
            { return simbolo("--", Simbolos.smbmenosmenos, yytext());
            }
          case 109: break;
          case 38: 
            { return simbolo("*=", Simbolos.smbmultiplicacionigual, yytext());
            }
          case 110: break;
          case 39: 
            { return simbolo("/=", Simbolos.smbdivisionigual, yytext());
            }
          case 111: break;
          case 40: 
            { /* No haga nada */ System.out.println("Lexer: C de Linea: " + yytext());
            }
          case 112: break;
          case 41: 
            { string.append('\r');
            }
          case 113: break;
          case 42: 
            { string.append('\n');
            }
          case 114: break;
          case 43: 
            { string.append('\t');
            }
          case 115: break;
          case 44: 
            { string.append('\"');
            }
          case 116: break;
          case 45: 
            { string.append('\\');
            }
          case 117: break;
          case 46: 
            { yybegin(YYINITIAL); return simbolo("CHAR: " + yytext().charAt(0), Simbolos.smbchar, String.valueOf(yytext().charAt(0)));
            }
          case 118: break;
          case 47: 
            { return simbolo("for", Simbolos.smbfor, yytext());
            }
          case 119: break;
          case 48: 
            { return simbolo("int", Simbolos.smbint, yytext());
            }
          case 120: break;
          case 49: 
            { yybegin(YYINITIAL); return simbolo("CHAR: " + "\f", Simbolos.smbchar, "\f");
            }
          case 121: break;
          case 50: 
            { yybegin(YYINITIAL); return simbolo("CHAR: " + "\b", Simbolos.smbchar, "\b");
            }
          case 122: break;
          case 51: 
            { yybegin(YYINITIAL); return simbolo("CHAR: " + "\r", Simbolos.smbchar, "\r");
            }
          case 123: break;
          case 52: 
            { yybegin(YYINITIAL); return simbolo("CHAR: " + "\n", Simbolos.smbchar, "\n");
            }
          case 124: break;
          case 53: 
            { yybegin(YYINITIAL); return simbolo("CHAR: " + "\t", Simbolos.smbchar, "\t");
            }
          case 125: break;
          case 54: 
            { yybegin(YYINITIAL); return simbolo("CHAR: " + "\"", Simbolos.smbchar, "\"");
            }
          case 126: break;
          case 55: 
            { yybegin(YYINITIAL); return simbolo("CHAR: " + "\'", Simbolos.smbchar, "\'");
            }
          case 127: break;
          case 56: 
            { yybegin(YYINITIAL); return simbolo("CHAR: " + "\\", Simbolos.smbchar, "\\");
            }
          case 128: break;
          case 57: 
            { return simbolo("long", Simbolos.smblong, yytext());
            }
          case 129: break;
          case 58: 
            { return simbolo("read", Simbolos.smbread, yytext());
            }
          case 130: break;
          case 59: 
            { return simbolo("else", Simbolos.smbelse, yytext());
            }
          case 131: break;
          case 60: 
            { return simbolo("case", Simbolos.smbcase, yytext());
            }
          case 132: break;
          case 61: 
            { return simbolo("char", Simbolos.smbchar, yytext());
            }
          case 133: break;
          case 62: 
            { return simbolo("void", Simbolos.smbvoid, yytext());
            }
          case 134: break;
          case 63: 
            { /* No haga nada */ System.out.println("Lexer: C de Bloque: " + yytext());
            }
          case 135: break;
          case 64: 
            { return simbolo("break", Simbolos.smbbreak, yytext());
            }
          case 136: break;
          case 65: 
            { return simbolo("const", Simbolos.smbconst, yytext());
            }
          case 137: break;
          case 66: 
            { return simbolo("short", Simbolos.smbshort, yytext());
            }
          case 138: break;
          case 67: 
            { return simbolo("write", Simbolos.smbwrite, yytext());
            }
          case 139: break;
          case 68: 
            { return simbolo("while", Simbolos.smbwhile, yytext());
            }
          case 140: break;
          case 69: 
            { return simbolo("return", Simbolos.smbreturn, yytext());
            }
          case 141: break;
          case 70: 
            { return simbolo("switch", Simbolos.smbswitch, yytext());
            }
          case 142: break;
          case 71: 
            { return simbolo("default", Simbolos.smbdefault, yytext());
            }
          case 143: break;
          case 72: 
            { return simbolo("continue", Simbolos.smbcontinue, yytext());
            }
          case 144: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
