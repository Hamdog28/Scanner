
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Nov 12 21:55:05 CST 2017
//----------------------------------------------------

package iiproyecto;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Nov 12 21:55:05 CST 2017
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\301\000\002\002\004\000\002\002\003\000\002\006" +
    "\003\000\002\007\003\000\002\010\003\000\002\066\002" +
    "\000\002\010\007\000\002\067\002\000\002\003\005\000" +
    "\002\003\003\000\002\070\002\000\002\004\006\000\002" +
    "\071\002\000\002\004\006\000\002\072\002\000\002\004" +
    "\006\000\002\073\002\000\002\004\006\000\002\074\002" +
    "\000\002\004\010\000\002\005\006\000\002\005\005\000" +
    "\002\017\006\000\002\075\002\000\002\020\007\000\002" +
    "\020\002\000\002\076\002\000\002\021\005\000\002\021" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\077\002\000\002\100\002\000" +
    "\002\016\010\000\002\016\003\000\002\101\002\000\002" +
    "\023\005\000\002\023\002\000\002\024\007\000\002\024" +
    "\002\000\002\102\002\000\002\031\005\000\002\031\003" +
    "\000\002\032\003\000\002\032\003\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\103\002\000\002" +
    "\025\006\000\002\026\004\000\002\026\002\000\002\104" +
    "\002\000\002\027\006\000\002\027\002\000\002\034\004" +
    "\000\002\105\002\000\002\030\007\000\002\033\005\000" +
    "\002\033\002\000\002\035\004\000\002\035\002\000\002" +
    "\036\004\000\002\036\004\000\002\036\004\000\002\036" +
    "\004\000\002\036\004\000\002\036\004\000\002\036\003" +
    "\000\002\036\003\000\002\036\004\000\002\036\003\000" +
    "\002\036\003\000\002\106\002\000\002\053\005\000\002" +
    "\107\002\000\002\054\007\000\002\110\002\000\002\054" +
    "\007\000\002\055\005\000\002\055\005\000\002\055\002" +
    "\000\002\111\002\000\002\046\005\000\002\112\002\000" +
    "\002\056\006\000\002\057\003\000\002\057\002\000\002" +
    "\045\003\000\002\113\002\000\002\045\005\000\002\044" +
    "\003\000\002\043\003\000\002\114\002\000\002\115\002" +
    "\000\002\116\002\000\002\060\013\000\002\117\002\000" +
    "\002\061\005\000\002\061\002\000\002\120\002\000\002" +
    "\121\002\000\002\122\002\000\002\050\012\000\002\123" +
    "\002\000\002\052\006\000\002\124\002\000\002\125\002" +
    "\000\002\051\011\000\002\126\002\000\002\127\002\000" +
    "\002\051\007\000\002\130\002\000\002\131\002\000\002" +
    "\047\010\000\002\132\002\000\002\062\006\000\002\133" +
    "\002\000\002\063\006\000\002\134\002\000\002\064\006" +
    "\000\002\135\002\000\002\065\012\000\002\136\002\000" +
    "\002\037\006\000\002\037\003\000\002\040\003\000\002" +
    "\040\003\000\002\137\002\000\002\041\006\000\002\140" +
    "\002\000\002\041\006\000\002\141\002\000\002\041\006" +
    "\000\002\142\002\000\002\041\006\000\002\143\002\000" +
    "\002\041\006\000\002\042\003\000\002\042\003\000\002" +
    "\042\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\144\002\000\002\014\007" +
    "\000\002\145\002\000\002\015\006\000\002\015\002\000" +
    "\002\013\003\000\002\146\002\000\002\011\006\000\002" +
    "\147\002\000\002\011\006\000\002\150\002\000\002\011" +
    "\006\000\002\151\002\000\002\011\006\000\002\152\002" +
    "\000\002\011\006\000\002\153\002\000\002\011\006\000" +
    "\002\154\002\000\002\011\006\000\002\155\002\000\002" +
    "\011\006\000\002\156\002\000\002\011\006\000\002\157" +
    "\002\000\002\011\006\000\002\160\002\000\002\011\006" +
    "\000\002\161\002\000\002\011\005\000\002\162\002\000" +
    "\002\011\006\000\002\163\002\000\002\011\006\000\002" +
    "\164\002\000\002\011\006\000\002\165\002\000\002\011" +
    "\005\000\002\011\004\000\002\166\002\000\002\011\005" +
    "\000\002\011\004\000\002\167\002\000\002\011\005\000" +
    "\002\011\003\000\002\011\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u013c\000\016\006\006\007\013\016\011\017\010\021" +
    "\012\023\014\001\002\000\004\002\000\001\002\000\004" +
    "\002\u013e\001\002\000\004\066\ufff7\001\002\000\004\002" +
    "\ufff8\001\002\000\004\066\ufff3\001\002\000\004\066\ufff5" +
    "\001\002\000\004\066\ufff1\001\002\000\014\006\ufffa\016" +
    "\ufffa\017\ufffa\021\ufffa\023\ufffa\001\002\000\004\066\uffef" +
    "\001\002\000\004\066\016\001\002\000\066\027\ufffe\030" +
    "\ufffe\031\ufffe\032\ufffe\033\ufffe\034\ufffe\035\ufffe\036\ufffe" +
    "\040\ufffe\041\ufffe\042\ufffe\043\ufffe\044\ufffe\045\ufffe\046" +
    "\ufffe\047\ufffe\050\ufffe\051\ufffe\052\ufffe\053\ufffe\054\ufffe" +
    "\055\ufffe\057\ufffe\060\ufffe\061\ufffe\062\ufffe\001\002\000" +
    "\004\057\020\001\002\000\016\006\uffcf\007\uffcf\016\uffcf" +
    "\017\uffcf\021\uffcf\060\uffcf\001\002\000\004\063\022\001" +
    "\002\000\066\004\uffc7\006\uffc7\007\uffc7\010\uffc7\012\uffc7" +
    "\014\uffc7\015\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7\022" +
    "\uffc7\024\uffc7\025\uffc7\026\uffc7\037\uffc7\040\uffc7\041\uffc7" +
    "\044\uffc7\057\uffc7\064\uffc7\066\uffc7\067\uffc7\070\uffc7\071" +
    "\uffc7\072\uffc7\001\002\000\020\002\uffd8\006\027\007\033" +
    "\016\031\017\030\021\032\023\034\001\002\000\004\066" +
    "\uffd5\001\002\000\004\066\016\001\002\000\004\002\uffee" +
    "\001\002\000\004\066\uffd4\001\002\000\004\066\uffd2\001" +
    "\002\000\004\066\uffd3\001\002\000\004\066\uffd1\001\002" +
    "\000\014\006\uffd7\016\uffd7\017\uffd7\021\uffd7\023\uffd7\001" +
    "\002\000\004\066\uffd0\001\002\000\014\006\027\016\031" +
    "\017\030\021\032\023\034\001\002\000\004\066\uffd6\001" +
    "\002\000\004\057\020\001\002\000\004\063\022\001\002" +
    "\000\020\002\uffd8\006\027\007\033\016\031\017\030\021" +
    "\032\023\034\001\002\000\004\002\uffd9\001\002\000\066" +
    "\004\uffc4\006\047\007\054\010\uffc4\012\uffc4\014\uffc4\015" +
    "\uffc4\016\052\017\051\020\uffc4\021\053\022\uffc4\024\uffc4" +
    "\025\uffc4\026\uffc4\037\uffc4\040\uffc4\041\uffc4\044\uffc4\057" +
    "\uffc4\064\uffc4\066\uffc4\067\uffc4\070\uffc4\071\uffc4\072\uffc4" +
    "\001\002\000\004\055\305\001\002\000\004\066\016\001" +
    "\002\000\004\066\uffe5\001\002\000\004\066\uffe4\001\002" +
    "\000\054\004\073\010\117\012\060\014\104\015\106\020" +
    "\111\022\120\024\102\025\062\026\123\037\057\040\066" +
    "\041\101\044\072\057\116\064\uffc2\066\016\067\064\070" +
    "\063\071\100\072\074\001\002\000\004\066\uffe2\001\002" +
    "\000\004\066\uffe3\001\002\000\004\066\uffe1\001\002\000" +
    "\012\006\uffe7\016\uffe7\017\uffe7\021\uffe7\001\002\000\012" +
    "\006\047\016\052\017\051\021\053\001\002\000\004\066" +
    "\uffe6\001\002\000\026\037\uff4a\040\uff4a\041\uff4a\044\uff4a" +
    "\057\uff4a\066\uff4a\067\uff4a\070\uff4a\071\uff4a\072\uff4a\001" +
    "\002\000\054\004\uff8f\010\uff8f\012\uff8f\014\uff8f\015\uff8f" +
    "\020\uff8f\022\uff8f\024\uff8f\025\uff8f\026\uff8f\037\uff8f\040" +
    "\uff8f\041\uff8f\044\uff8f\057\uff8f\063\uff8f\066\uff8f\067\uff8f" +
    "\070\uff8f\071\uff8f\072\uff8f\001\002\000\064\027\ufffd\030" +
    "\ufffd\031\ufffd\032\ufffd\033\ufffd\034\ufffd\035\ufffd\036\ufffd" +
    "\040\ufffd\041\ufffd\042\ufffd\043\ufffd\044\ufffd\045\ufffd\046" +
    "\ufffd\047\ufffd\050\ufffd\051\ufffd\052\ufffd\053\ufffd\054\ufffd" +
    "\055\ufffd\060\ufffd\061\377\062\ufffd\001\002\000\004\057" +
    "\uffad\001\002\000\054\027\uff71\030\uff71\031\uff71\032\uff71" +
    "\033\uff71\034\uff71\035\uff71\036\uff71\040\uff71\041\uff71\043" +
    "\uff71\044\uff71\045\uff71\046\uff71\047\uff71\054\uff71\055\uff71" +
    "\056\uff71\060\uff71\062\uff71\064\uff71\001\002\000\054\027" +
    "\uff72\030\uff72\031\uff72\032\uff72\033\uff72\034\uff72\035\uff72" +
    "\036\uff72\040\uff72\041\uff72\043\uff72\044\uff72\045\uff72\046" +
    "\uff72\047\uff72\054\uff72\055\uff72\056\uff72\060\uff72\062\uff72" +
    "\064\uff72\001\002\000\004\055\305\001\002\000\026\037" +
    "\uff47\040\uff47\041\uff47\044\uff47\057\uff47\066\uff47\067\uff47" +
    "\070\uff47\071\uff47\072\uff47\001\002\000\062\004\uffbb\005" +
    "\uffbb\010\uffbb\011\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb" +
    "\020\uffbb\022\uffbb\024\uffbb\025\uffbb\026\uffbb\037\uffbb\040" +
    "\uffbb\041\uffbb\044\uffbb\057\uffbb\064\uffbb\066\uffbb\067\uffbb" +
    "\070\uffbb\071\uffbb\072\uffbb\001\002\000\004\055\305\001" +
    "\002\000\060\004\073\005\uffc2\010\117\011\uffc2\012\060" +
    "\014\104\015\106\020\111\022\120\024\102\025\062\026" +
    "\123\037\057\040\066\041\101\044\072\057\116\064\uffc2" +
    "\066\016\067\064\070\063\071\100\072\074\001\002\000" +
    "\026\037\uff52\040\uff52\041\uff52\044\uff52\057\uff52\066\uff52" +
    "\067\uff52\070\uff52\071\uff52\072\uff52\001\002\000\004\055" +
    "\uffa4\001\002\000\054\027\uff6f\030\uff6f\031\uff6f\032\uff6f" +
    "\033\uff6f\034\uff6f\035\uff6f\036\uff6f\040\uff6f\041\uff6f\043" +
    "\uff6f\044\uff6f\045\uff6f\046\uff6f\047\uff6f\054\uff6f\055\uff6f" +
    "\056\uff6f\060\uff6f\062\uff6f\064\uff6f\001\002\000\004\055" +
    "\305\001\002\000\062\004\uffb7\005\uffb7\010\uffb7\011\uffb7" +
    "\012\uffb7\013\uffb7\014\uffb7\015\uffb7\020\uffb7\022\uffb7\024" +
    "\uffb7\025\uffb7\026\uffb7\037\uffb7\040\uffb7\041\uffb7\044\uffb7" +
    "\057\uffb7\064\uffb7\066\uffb7\067\uffb7\070\uffb7\071\uffb7\072" +
    "\uffb7\001\002\000\044\027\140\030\151\031\142\032\147" +
    "\033\153\034\134\035\137\036\150\040\135\041\141\043" +
    "\133\044\152\045\146\046\144\047\143\055\uff80\060\uff80" +
    "\001\002\000\054\027\uff70\030\uff70\031\uff70\032\uff70\033" +
    "\uff70\034\uff70\035\uff70\036\uff70\040\uff70\041\uff70\043\uff70" +
    "\044\uff70\045\uff70\046\uff70\047\uff70\054\uff70\055\uff70\056" +
    "\uff70\060\uff70\062\uff70\064\uff70\001\002\000\026\037\uff44" +
    "\040\uff44\041\uff44\044\uff44\057\uff44\066\uff44\067\uff44\070" +
    "\uff44\071\uff44\072\uff44\001\002\000\004\057\uff8c\001\002" +
    "\000\004\055\305\001\002\000\004\057\uff88\001\002\000" +
    "\004\064\332\001\002\000\004\057\uffa2\001\002\000\004" +
    "\055\305\001\002\000\062\004\uffb8\005\uffb8\010\uffb8\011" +
    "\uffb8\012\uffb8\013\uffb8\014\uffb8\015\uffb8\020\uffb8\022\uffb8" +
    "\024\uffb8\025\uffb8\026\uffb8\037\uffb8\040\uffb8\041\uffb8\044" +
    "\uffb8\057\uffb8\064\uffb8\066\uffb8\067\uffb8\070\uffb8\071\uffb8" +
    "\072\uffb8\001\002\000\030\037\uffa6\040\uffa6\041\uffa6\044" +
    "\uffa6\055\uffa7\057\uffa6\066\uffa6\067\uffa6\070\uffa6\071\uffa6" +
    "\072\uffa6\001\002\000\050\027\uff41\030\uff41\031\uff41\032" +
    "\uff41\033\uff41\034\uff41\035\uff41\036\uff41\040\uff41\041\uff41" +
    "\043\uff41\044\uff41\045\uff41\046\uff41\047\uff41\054\uff41\055" +
    "\uff41\060\uff41\062\uff41\001\002\000\004\055\305\001\002" +
    "\000\004\055\305\001\002\000\062\004\uffba\005\uffba\010" +
    "\uffba\011\uffba\012\uffba\013\uffba\014\uffba\015\uffba\020\uffba" +
    "\022\uffba\024\uffba\025\uffba\026\uffba\037\uffba\040\uffba\041" +
    "\uffba\044\uffba\057\uffba\064\uffba\066\uffba\067\uffba\070\uffba" +
    "\071\uffba\072\uffba\001\002\000\026\037\uff68\040\uff68\041" +
    "\uff68\044\uff68\057\uff68\066\uff68\067\uff68\070\uff68\071\uff68" +
    "\072\uff68\001\002\000\004\055\uffa3\001\002\000\004\057" +
    "\uff9b\001\002\000\006\055\uff81\060\uff81\001\002\000\060" +
    "\027\uff42\030\uff42\031\uff42\032\uff42\033\uff42\034\uff42\035" +
    "\uff42\036\uff42\040\uff42\041\uff42\042\223\043\uff42\044\uff42" +
    "\045\uff42\046\uff42\047\uff42\050\217\051\222\052\221\053" +
    "\220\054\uff42\055\uff42\060\uff42\001\002\000\004\057\uffb6" +
    "\001\002\000\004\057\125\001\002\000\030\037\uffb4\040" +
    "\uffb4\041\uffb4\044\uffb4\057\uffb4\065\uffb2\066\uffb4\067\uffb4" +
    "\070\uffb4\071\uffb4\072\uffb4\001\002\000\004\055\uffb5\001" +
    "\002\000\004\065\171\001\002\000\026\037\057\040\066" +
    "\041\101\044\072\057\116\066\016\067\064\070\063\071" +
    "\100\072\074\001\002\000\050\027\uff42\030\uff42\031\uff42" +
    "\032\uff42\033\uff42\034\uff42\035\uff42\036\uff42\040\uff42\041" +
    "\uff42\043\uff42\044\uff42\045\uff42\046\uff42\047\uff42\054\uff42" +
    "\055\uff42\060\uff42\062\uff42\001\002\000\044\027\140\030" +
    "\151\031\142\032\147\033\153\034\134\035\137\036\150" +
    "\040\135\041\141\043\133\044\152\045\146\046\144\047" +
    "\143\054\145\060\uffae\001\002\000\026\037\uff56\040\uff56" +
    "\041\uff56\044\uff56\057\uff56\066\uff56\067\uff56\070\uff56\071" +
    "\uff56\072\uff56\001\002\000\026\037\uff5c\040\uff5c\041\uff5c" +
    "\044\uff5c\057\uff5c\066\uff5c\067\uff5c\070\uff5c\071\uff5c\072" +
    "\uff5c\001\002\000\050\027\uff48\030\uff48\031\uff48\032\uff48" +
    "\033\uff48\034\uff48\035\uff48\036\uff48\040\uff48\041\uff48\043" +
    "\uff48\044\uff48\045\uff48\046\uff48\047\uff48\054\uff48\055\uff48" +
    "\060\uff48\062\uff48\001\002\000\004\060\207\001\002\000" +
    "\026\037\uff5a\040\uff5a\041\uff5a\044\uff5a\057\uff5a\066\uff5a" +
    "\067\uff5a\070\uff5a\071\uff5a\072\uff5a\001\002\000\026\037" +
    "\uff66\040\uff66\041\uff66\044\uff66\057\uff66\066\uff66\067\uff66" +
    "\070\uff66\071\uff66\072\uff66\001\002\000\050\027\uff45\030" +
    "\uff45\031\uff45\032\uff45\033\uff45\034\uff45\035\uff45\036\uff45" +
    "\040\uff45\041\uff45\043\uff45\044\uff45\045\uff45\046\uff45\047" +
    "\uff45\054\uff45\055\uff45\060\uff45\062\uff45\001\002\000\026" +
    "\037\uff62\040\uff62\041\uff62\044\uff62\057\uff62\066\uff62\067" +
    "\uff62\070\uff62\071\uff62\072\uff62\001\002\000\026\037\uff4c" +
    "\040\uff4c\041\uff4c\044\uff4c\057\uff4c\066\uff4c\067\uff4c\070" +
    "\uff4c\071\uff4c\072\uff4c\001\002\000\026\037\uff4e\040\uff4e" +
    "\041\uff4e\044\uff4e\057\uff4e\066\uff4e\067\uff4e\070\uff4e\071" +
    "\uff4e\072\uff4e\001\002\000\030\037\057\040\066\041\101" +
    "\044\072\057\116\065\171\066\016\067\064\070\063\071" +
    "\100\072\074\001\002\000\026\037\uff50\040\uff50\041\uff50" +
    "\044\uff50\057\uff50\066\uff50\067\uff50\070\uff50\071\uff50\072" +
    "\uff50\001\002\000\026\037\uff60\040\uff60\041\uff60\044\uff60" +
    "\057\uff60\066\uff60\067\uff60\070\uff60\071\uff60\072\uff60\001" +
    "\002\000\026\037\uff58\040\uff58\041\uff58\044\uff58\057\uff58" +
    "\066\uff58\067\uff58\070\uff58\071\uff58\072\uff58\001\002\000" +
    "\026\037\uff64\040\uff64\041\uff64\044\uff64\057\uff64\066\uff64" +
    "\067\uff64\070\uff64\071\uff64\072\uff64\001\002\000\026\037" +
    "\uff54\040\uff54\041\uff54\044\uff54\057\uff54\066\uff54\067\uff54" +
    "\070\uff54\071\uff54\072\uff54\001\002\000\026\037\uff5e\040" +
    "\uff5e\041\uff5e\044\uff5e\057\uff5e\066\uff5e\067\uff5e\070\uff5e" +
    "\071\uff5e\072\uff5e\001\002\000\026\037\057\040\066\041" +
    "\101\044\072\057\116\066\016\067\064\070\063\071\100" +
    "\072\074\001\002\000\050\027\uff5d\030\uff5d\031\uff5d\032" +
    "\uff5d\033\uff5d\034\uff5d\035\uff5d\036\uff5d\040\135\041\141" +
    "\043\133\044\152\045\146\046\144\047\143\054\uff5d\055" +
    "\uff5d\060\uff5d\062\uff5d\001\002\000\026\037\057\040\066" +
    "\041\101\044\072\057\116\066\016\067\064\070\063\071" +
    "\100\072\074\001\002\000\050\027\uff53\030\uff53\031\uff53" +
    "\032\uff53\033\uff53\034\uff53\035\uff53\036\uff53\040\135\041" +
    "\141\043\uff53\044\152\045\uff53\046\uff53\047\uff53\054\uff53" +
    "\055\uff53\060\uff53\062\uff53\001\002\000\026\037\057\040" +
    "\066\041\101\044\072\057\116\066\016\067\064\070\063" +
    "\071\100\072\074\001\002\000\050\027\uff63\030\uff63\031" +
    "\uff63\032\uff63\033\uff63\034\uff63\035\uff63\036\uff63\040\135" +
    "\041\141\043\133\044\152\045\146\046\144\047\143\054" +
    "\uff63\055\uff63\060\uff63\062\uff63\001\002\000\026\037\057" +
    "\040\066\041\101\044\072\057\116\066\016\067\064\070" +
    "\063\071\100\072\074\001\002\000\050\027\140\030\151" +
    "\031\142\032\147\033\153\034\134\035\uff57\036\uff57\040" +
    "\135\041\141\043\133\044\152\045\146\046\144\047\143" +
    "\054\uff57\055\uff57\060\uff57\062\uff57\001\002\000\026\037" +
    "\057\040\066\041\101\044\072\057\116\066\016\067\064" +
    "\070\063\071\100\072\074\001\002\000\050\027\uff5f\030" +
    "\uff5f\031\uff5f\032\uff5f\033\uff5f\034\uff5f\035\uff5f\036\uff5f" +
    "\040\135\041\141\043\133\044\152\045\146\046\144\047" +
    "\143\054\uff5f\055\uff5f\060\uff5f\062\uff5f\001\002\000\026" +
    "\037\057\040\066\041\101\044\072\057\116\066\016\067" +
    "\064\070\063\071\100\072\074\001\002\000\050\027\uff4f" +
    "\030\uff4f\031\uff4f\032\uff4f\033\uff4f\034\uff4f\035\uff4f\036" +
    "\uff4f\040\135\041\141\043\uff4f\044\152\045\uff4f\046\uff4f" +
    "\047\uff4f\054\uff4f\055\uff4f\060\uff4f\062\uff4f\001\002\000" +
    "\006\054\145\060\uffae\001\002\000\006\054\uff69\060\uff69" +
    "\001\002\000\044\027\140\030\151\031\142\032\147\033" +
    "\153\034\134\035\137\036\150\040\135\041\141\043\133" +
    "\044\152\045\146\046\144\047\143\054\145\060\uffae\001" +
    "\002\000\004\060\uffb0\001\002\000\004\060\uffaf\001\002" +
    "\000\026\037\057\040\066\041\101\044\072\057\116\066" +
    "\016\067\064\070\063\071\100\072\074\001\002\000\050" +
    "\027\uff4d\030\uff4d\031\uff4d\032\uff4d\033\uff4d\034\uff4d\035" +
    "\uff4d\036\uff4d\040\135\041\141\043\uff4d\044\152\045\uff4d" +
    "\046\uff4d\047\uff4d\054\uff4d\055\uff4d\060\uff4d\062\uff4d\001" +
    "\002\000\026\037\057\040\066\041\101\044\072\057\116" +
    "\066\016\067\064\070\063\071\100\072\074\001\002\000" +
    "\050\027\uff4b\030\uff4b\031\uff4b\032\uff4b\033\uff4b\034\uff4b" +
    "\035\uff4b\036\uff4b\040\135\041\141\043\uff4b\044\152\045" +
    "\uff4b\046\uff4b\047\uff4b\054\uff4b\055\uff4b\060\uff4b\062\uff4b" +
    "\001\002\000\026\037\057\040\066\041\101\044\072\057" +
    "\116\066\016\067\064\070\063\071\100\072\074\001\002" +
    "\000\050\027\uff61\030\uff61\031\uff61\032\uff61\033\uff61\034" +
    "\uff61\035\uff61\036\uff61\040\135\041\141\043\133\044\152" +
    "\045\146\046\144\047\143\054\uff61\055\uff61\060\uff61\062" +
    "\uff61\001\002\000\026\037\057\040\066\041\101\044\072" +
    "\057\116\066\016\067\064\070\063\071\100\072\074\001" +
    "\002\000\050\027\uff65\030\151\031\142\032\147\033\153" +
    "\034\uff65\035\uff65\036\uff65\040\135\041\141\043\133\044" +
    "\152\045\146\046\144\047\143\054\uff65\055\uff65\060\uff65" +
    "\062\uff65\001\002\000\026\037\057\040\066\041\101\044" +
    "\072\057\116\066\016\067\064\070\063\071\100\072\074" +
    "\001\002\000\050\027\140\030\151\031\142\032\147\033" +
    "\153\034\134\035\uff59\036\150\040\135\041\141\043\133" +
    "\044\152\045\146\046\144\047\143\054\uff59\055\uff59\060" +
    "\uff59\062\uff59\001\002\000\004\055\uffb3\001\002\000\026" +
    "\037\057\040\066\041\101\044\072\057\116\066\016\067" +
    "\064\070\063\071\100\072\074\001\002\000\050\027\uff5b" +
    "\030\151\031\142\032\147\033\153\034\uff5b\035\uff5b\036" +
    "\uff5b\040\135\041\141\043\133\044\152\045\146\046\144" +
    "\047\143\054\uff5b\055\uff5b\060\uff5b\062\uff5b\001\002\000" +
    "\026\037\057\040\066\041\101\044\072\057\116\066\016" +
    "\067\064\070\063\071\100\072\074\001\002\000\050\027" +
    "\uff55\030\uff55\031\uff55\032\uff55\033\uff55\034\uff55\035\uff55" +
    "\036\uff55\040\135\041\141\043\uff55\044\152\045\146\046" +
    "\144\047\143\054\uff55\055\uff55\060\uff55\062\uff55\001\002" +
    "\000\006\054\145\060\uffae\001\002\000\004\060\216\001" +
    "\002\000\004\055\uffb1\001\002\000\030\037\uff7d\040\uff7d" +
    "\041\uff7d\044\uff7d\057\uff7d\063\uff7d\066\uff7d\067\uff7d\070" +
    "\uff7d\071\uff7d\072\uff7d\001\002\000\030\037\uff77\040\uff77" +
    "\041\uff77\044\uff77\057\uff77\063\uff77\066\uff77\067\uff77\070" +
    "\uff77\071\uff77\072\uff77\001\002\000\030\037\uff79\040\uff79" +
    "\041\uff79\044\uff79\057\uff79\063\uff79\066\uff79\067\uff79\070" +
    "\uff79\071\uff79\072\uff79\001\002\000\030\037\uff7b\040\uff7b" +
    "\041\uff7b\044\uff7b\057\uff7b\063\uff7b\066\uff7b\067\uff7b\070" +
    "\uff7b\071\uff7b\072\uff7b\001\002\000\030\037\uff7f\040\uff7f" +
    "\041\uff7f\044\uff7f\057\uff7f\063\uff7f\066\uff7f\067\uff7f\070" +
    "\uff7f\071\uff7f\072\uff7f\001\002\000\030\037\057\040\066" +
    "\041\101\044\072\057\116\063\230\066\016\067\064\070" +
    "\063\071\100\072\074\001\002\000\010\054\uff74\055\uff74" +
    "\060\uff74\001\002\000\046\027\140\030\151\031\142\032" +
    "\147\033\153\034\134\035\137\036\150\040\135\041\141" +
    "\043\133\044\152\045\146\046\144\047\143\054\uff73\055" +
    "\uff73\060\uff73\001\002\000\010\054\uff7e\055\uff7e\060\uff7e" +
    "\001\002\000\012\067\uff6e\070\uff6e\071\uff6e\072\uff6e\001" +
    "\002\000\010\054\uff75\055\uff75\060\uff75\001\002\000\012" +
    "\067\064\070\063\071\100\072\074\001\002\000\006\054" +
    "\235\064\uff6a\001\002\000\004\064\241\001\002\000\012" +
    "\067\uff6c\070\uff6c\071\uff6c\072\uff6c\001\002\000\012\067" +
    "\064\070\063\071\100\072\074\001\002\000\006\054\235" +
    "\064\uff6a\001\002\000\004\064\uff6b\001\002\000\010\054" +
    "\uff6d\055\uff6d\060\uff6d\001\002\000\030\037\057\040\066" +
    "\041\101\044\072\057\116\063\230\066\016\067\064\070" +
    "\063\071\100\072\074\001\002\000\010\054\uff7a\055\uff7a" +
    "\060\uff7a\001\002\000\030\037\057\040\066\041\101\044" +
    "\072\057\116\063\230\066\016\067\064\070\063\071\100" +
    "\072\074\001\002\000\010\054\uff78\055\uff78\060\uff78\001" +
    "\002\000\030\037\057\040\066\041\101\044\072\057\116" +
    "\063\230\066\016\067\064\070\063\071\100\072\074\001" +
    "\002\000\010\054\uff76\055\uff76\060\uff76\001\002\000\030" +
    "\037\057\040\066\041\101\044\072\057\116\063\230\066" +
    "\016\067\064\070\063\071\100\072\074\001\002\000\010" +
    "\054\uff7c\055\uff7c\060\uff7c\001\002\000\004\057\253\001" +
    "\002\000\004\066\uff9a\001\002\000\004\066\016\001\002" +
    "\000\004\060\256\001\002\000\004\063\uff99\001\002\000" +
    "\004\063\260\001\002\000\006\005\uff97\011\uff97\001\002" +
    "\000\062\004\uff98\005\uff98\010\uff98\011\uff98\012\uff98\013" +
    "\uff98\014\uff98\015\uff98\020\uff98\022\uff98\024\uff98\025\uff98" +
    "\026\uff98\037\uff98\040\uff98\041\uff98\044\uff98\057\uff98\064" +
    "\uff98\066\uff98\067\uff98\070\uff98\071\uff98\072\uff98\001\002" +
    "\000\006\005\265\011\264\001\002\000\004\064\300\001" +
    "\002\000\004\056\uff92\001\002\000\012\067\uff95\070\uff95" +
    "\071\uff95\072\uff95\001\002\000\012\067\064\070\063\071" +
    "\100\072\074\001\002\000\004\056\270\001\002\000\056" +
    "\004\uff94\005\uff94\010\uff94\011\uff94\012\uff94\014\uff94\015" +
    "\uff94\020\uff94\022\uff94\024\uff94\025\uff94\026\uff94\037\uff94" +
    "\040\uff94\041\uff94\044\uff94\057\uff94\066\uff94\067\uff94\070" +
    "\uff94\071\uff94\072\uff94\001\002\000\056\004\073\005\uffc2" +
    "\010\117\011\uffc2\012\060\014\104\015\106\020\111\022" +
    "\120\024\102\025\062\026\123\037\057\040\066\041\101" +
    "\044\072\057\116\066\016\067\064\070\063\071\100\072" +
    "\074\001\002\000\006\005\265\011\264\001\002\000\004" +
    "\064\uff93\001\002\000\004\056\275\001\002\000\054\004" +
    "\uff91\010\uff91\012\uff91\014\uff91\015\uff91\020\uff91\022\uff91" +
    "\024\uff91\025\uff91\026\uff91\037\uff91\040\uff91\041\uff91\044" +
    "\uff91\057\uff91\064\uff91\066\uff91\067\uff91\070\uff91\071\uff91" +
    "\072\uff91\001\002\000\054\004\073\010\117\012\060\014" +
    "\104\015\106\020\111\022\120\024\102\025\062\026\123" +
    "\037\057\040\066\041\101\044\072\057\116\064\uffc2\066" +
    "\016\067\064\070\063\071\100\072\074\001\002\000\004" +
    "\064\uff90\001\002\000\062\004\uff96\005\uff96\010\uff96\011" +
    "\uff96\012\uff96\013\uff96\014\uff96\015\uff96\020\uff96\022\uff96" +
    "\024\uff96\025\uff96\026\uff96\037\uff96\040\uff96\041\uff96\044" +
    "\uff96\057\uff96\064\uff96\066\uff96\067\uff96\070\uff96\071\uff96" +
    "\072\uff96\001\002\000\026\037\057\040\066\041\101\044" +
    "\072\057\116\066\016\067\064\070\063\071\100\072\074" +
    "\001\002\000\042\027\140\030\151\031\142\032\147\033" +
    "\153\034\134\035\137\036\150\040\135\041\141\043\133" +
    "\044\152\045\146\046\144\047\143\060\303\001\002\000" +
    "\050\027\uff67\030\uff67\031\uff67\032\uff67\033\uff67\034\uff67" +
    "\035\uff67\036\uff67\040\uff67\041\uff67\043\uff67\044\uff67\045" +
    "\uff67\046\uff67\047\uff67\054\uff67\055\uff67\060\uff67\062\uff67" +
    "\001\002\000\062\004\uffbd\005\uffbd\010\uffbd\011\uffbd\012" +
    "\uffbd\013\uffbd\014\uffbd\015\uffbd\020\uffbd\022\uffbd\024\uffbd" +
    "\025\uffbd\026\uffbd\037\uffbd\040\uffbd\041\uffbd\044\uffbd\057" +
    "\uffbd\064\uffbd\066\uffbd\067\uffbd\070\uffbd\071\uffbd\072\uffbd" +
    "\001\002\000\076\004\uffff\005\uffff\006\uffff\007\uffff\010" +
    "\uffff\011\uffff\012\uffff\013\uffff\014\uffff\015\uffff\016\uffff" +
    "\017\uffff\020\uffff\021\uffff\022\uffff\023\uffff\024\uffff\025" +
    "\uffff\026\uffff\037\uffff\040\uffff\041\uffff\044\uffff\057\uffff" +
    "\064\uffff\066\uffff\067\uffff\070\uffff\071\uffff\072\uffff\001" +
    "\002\000\062\004\uffb9\005\uffb9\010\uffb9\011\uffb9\012\uffb9" +
    "\013\uffb9\014\uffb9\015\uffb9\020\uffb9\022\uffb9\024\uffb9\025" +
    "\uffb9\026\uffb9\037\uffb9\040\uffb9\041\uffb9\044\uffb9\057\uffb9" +
    "\064\uffb9\066\uffb9\067\uffb9\070\uffb9\071\uffb9\072\uffb9\001" +
    "\002\000\026\037\057\040\066\041\101\044\072\057\116" +
    "\066\016\067\064\070\063\071\100\072\074\001\002\000" +
    "\042\027\140\030\151\031\142\032\147\033\153\034\134" +
    "\035\137\036\150\040\135\041\141\043\133\044\152\045" +
    "\146\046\144\047\143\055\uffa5\001\002\000\062\004\uffbf" +
    "\005\uffbf\010\uffbf\011\uffbf\012\uffbf\013\uffbf\014\uffbf\015" +
    "\uffbf\020\uffbf\022\uffbf\024\uffbf\025\uffbf\026\uffbf\037\uffbf" +
    "\040\uffbf\041\uffbf\044\uffbf\057\uffbf\064\uffbf\066\uffbf\067" +
    "\uffbf\070\uffbf\071\uffbf\072\uffbf\001\002\000\004\057\313" +
    "\001\002\000\026\037\uffa1\040\uffa1\041\uffa1\044\uffa1\057" +
    "\uffa1\066\uffa1\067\uffa1\070\uffa1\071\uffa1\072\uffa1\001\002" +
    "\000\026\037\057\040\066\041\101\044\072\057\116\066" +
    "\016\067\064\070\063\071\100\072\074\001\002\000\004" +
    "\060\316\001\002\000\054\004\uffa0\010\uffa0\012\uffa0\014" +
    "\uffa0\015\uffa0\020\uffa0\022\uffa0\024\uffa0\025\uffa0\026\uffa0" +
    "\037\uffa0\040\uffa0\041\uffa0\044\uffa0\057\uffa0\063\uffa0\066" +
    "\uffa0\067\uffa0\070\uffa0\071\uffa0\072\uffa0\001\002\000\054" +
    "\004\073\010\117\012\060\014\104\015\106\020\111\022" +
    "\120\024\102\025\062\026\123\037\057\040\066\041\101" +
    "\044\072\057\116\063\322\066\016\067\064\070\063\071" +
    "\100\072\074\001\002\000\062\004\uff82\005\uff82\010\uff82" +
    "\011\uff82\012\uff82\013\uff82\014\uff82\015\uff82\020\uff82\022" +
    "\uff82\024\uff82\025\uff82\026\uff82\037\uff82\040\uff82\041\uff82" +
    "\044\uff82\057\uff82\064\uff82\066\uff82\067\uff82\070\uff82\071" +
    "\uff82\072\uff82\001\002\000\062\004\uff9c\005\uff9c\010\uff9c" +
    "\011\uff9c\012\uff9c\013\327\014\uff9c\015\uff9c\020\uff9c\022" +
    "\uff9c\024\uff9c\025\uff9c\026\uff9c\037\uff9c\040\uff9c\041\uff9c" +
    "\044\uff9c\057\uff9c\064\uff9c\066\uff9c\067\uff9c\070\uff9c\071" +
    "\uff9c\072\uff9c\001\002\000\054\004\uff84\010\uff84\012\uff84" +
    "\014\uff84\015\uff84\020\uff84\022\uff84\024\uff84\025\uff84\026" +
    "\uff84\037\uff84\040\uff84\041\uff84\044\uff84\057\uff84\064\uff84" +
    "\066\uff84\067\uff84\070\uff84\071\uff84\072\uff84\001\002\000" +
    "\054\004\073\010\117\012\060\014\104\015\106\020\111" +
    "\022\120\024\102\025\062\026\123\037\057\040\066\041" +
    "\101\044\072\057\116\064\uffc2\066\016\067\064\070\063" +
    "\071\100\072\074\001\002\000\004\064\325\001\002\000" +
    "\062\004\uff83\005\uff83\010\uff83\011\uff83\012\uff83\013\uff83" +
    "\014\uff83\015\uff83\020\uff83\022\uff83\024\uff83\025\uff83\026" +
    "\uff83\037\uff83\040\uff83\041\uff83\044\uff83\057\uff83\064\uff83" +
    "\066\uff83\067\uff83\070\uff83\071\uff83\072\uff83\001\002\000" +
    "\062\004\uff9f\005\uff9f\010\uff9f\011\uff9f\012\uff9f\013\uff9f" +
    "\014\uff9f\015\uff9f\020\uff9f\022\uff9f\024\uff9f\025\uff9f\026" +
    "\uff9f\037\uff9f\040\uff9f\041\uff9f\044\uff9f\057\uff9f\064\uff9f" +
    "\066\uff9f\067\uff9f\070\uff9f\071\uff9f\072\uff9f\001\002\000" +
    "\054\004\uff9e\010\uff9e\012\uff9e\014\uff9e\015\uff9e\020\uff9e" +
    "\022\uff9e\024\uff9e\025\uff9e\026\uff9e\037\uff9e\040\uff9e\041" +
    "\uff9e\044\uff9e\057\uff9e\063\uff9e\066\uff9e\067\uff9e\070\uff9e" +
    "\071\uff9e\072\uff9e\001\002\000\054\004\073\010\117\012" +
    "\060\014\104\015\106\020\111\022\120\024\102\025\062" +
    "\026\123\037\057\040\066\041\101\044\072\057\116\063" +
    "\322\066\016\067\064\070\063\071\100\072\074\001\002" +
    "\000\062\004\uff9d\005\uff9d\010\uff9d\011\uff9d\012\uff9d\013" +
    "\uff9d\014\uff9d\015\uff9d\020\uff9d\022\uff9d\024\uff9d\025\uff9d" +
    "\026\uff9d\037\uff9d\040\uff9d\041\uff9d\044\uff9d\057\uff9d\064" +
    "\uff9d\066\uff9d\067\uff9d\070\uff9d\071\uff9d\072\uff9d\001\002" +
    "\000\020\002\uffc6\006\uffc6\007\uffc6\016\uffc6\017\uffc6\021" +
    "\uffc6\023\uffc6\001\002\000\004\057\334\001\002\000\026" +
    "\037\uff86\040\uff86\041\uff86\044\uff86\057\uff86\066\uff86\067" +
    "\uff86\070\uff86\071\uff86\072\uff86\001\002\000\054\004\073" +
    "\010\117\012\060\014\104\015\106\020\111\022\120\024" +
    "\102\025\062\026\123\037\057\040\066\041\101\044\072" +
    "\057\116\063\322\066\016\067\064\070\063\071\100\072" +
    "\074\001\002\000\062\004\uff87\005\uff87\010\uff87\011\uff87" +
    "\012\uff87\013\uff87\014\uff87\015\uff87\020\uff87\022\uff87\024" +
    "\uff87\025\uff87\026\uff87\037\uff87\040\uff87\041\uff87\044\uff87" +
    "\057\uff87\064\uff87\066\uff87\067\uff87\070\uff87\071\uff87\072" +
    "\uff87\001\002\000\026\037\057\040\066\041\101\044\072" +
    "\057\116\066\016\067\064\070\063\071\100\072\074\001" +
    "\002\000\004\055\305\001\002\000\026\037\057\040\066" +
    "\041\101\044\072\057\116\066\016\067\064\070\063\071" +
    "\100\072\074\001\002\000\004\055\305\001\002\000\026" +
    "\037\057\040\066\041\101\044\072\057\116\066\016\067" +
    "\064\070\063\071\100\072\074\001\002\000\004\060\345" +
    "\001\002\000\054\004\uff85\010\uff85\012\uff85\014\uff85\015" +
    "\uff85\020\uff85\022\uff85\024\uff85\025\uff85\026\uff85\037\uff85" +
    "\040\uff85\041\uff85\044\uff85\057\uff85\063\uff85\066\uff85\067" +
    "\uff85\070\uff85\071\uff85\072\uff85\001\002\000\062\004\uffbe" +
    "\005\uffbe\010\uffbe\011\uffbe\012\uffbe\013\uffbe\014\uffbe\015" +
    "\uffbe\020\uffbe\022\uffbe\024\uffbe\025\uffbe\026\uffbe\037\uffbe" +
    "\040\uffbe\041\uffbe\044\uffbe\057\uffbe\064\uffbe\066\uffbe\067" +
    "\uffbe\070\uffbe\071\uffbe\072\uffbe\001\002\000\004\057\350" +
    "\001\002\000\026\037\uff8a\040\uff8a\041\uff8a\044\uff8a\057" +
    "\uff8a\066\uff8a\067\uff8a\070\uff8a\071\uff8a\072\uff8a\001\002" +
    "\000\054\004\073\010\117\012\060\014\104\015\106\020" +
    "\111\022\120\024\102\025\062\026\123\037\057\040\066" +
    "\041\101\044\072\057\116\063\322\066\016\067\064\070" +
    "\063\071\100\072\074\001\002\000\062\004\uff8b\005\uff8b" +
    "\010\uff8b\011\uff8b\012\uff8b\013\uff8b\014\uff8b\015\uff8b\020" +
    "\uff8b\022\uff8b\024\uff8b\025\uff8b\026\uff8b\037\uff8b\040\uff8b" +
    "\041\uff8b\044\uff8b\057\uff8b\064\uff8b\066\uff8b\067\uff8b\070" +
    "\uff8b\071\uff8b\072\uff8b\001\002\000\026\037\057\040\066" +
    "\041\101\044\072\057\116\066\016\067\064\070\063\071" +
    "\100\072\074\001\002\000\004\060\355\001\002\000\056" +
    "\004\uff89\010\uff89\012\uff89\014\uff89\015\uff89\020\uff89\022" +
    "\uff89\024\uff89\025\uff89\026\uff89\037\uff89\040\uff89\041\uff89" +
    "\044\uff89\055\uff89\057\uff89\063\uff89\066\uff89\067\uff89\070" +
    "\uff89\071\uff89\072\uff89\001\002\000\026\037\057\040\066" +
    "\041\101\044\072\057\116\066\016\067\064\070\063\071" +
    "\100\072\074\001\002\000\050\027\uff43\030\uff43\031\uff43" +
    "\032\uff43\033\uff43\034\uff43\035\uff43\036\uff43\040\uff43\041" +
    "\uff43\043\uff43\044\uff43\045\uff43\046\uff43\047\uff43\054\uff43" +
    "\055\uff43\060\uff43\062\uff43\001\002\000\062\004\uffc1\005" +
    "\uffc1\010\uffc1\011\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1" +
    "\020\uffc1\022\uffc1\024\uffc1\025\uffc1\026\uffc1\037\uffc1\040" +
    "\uffc1\041\uffc1\044\uffc1\057\uffc1\064\uffc1\066\uffc1\067\uffc1" +
    "\070\uffc1\071\uffc1\072\uffc1\001\002\000\026\037\057\040" +
    "\066\041\101\044\072\057\116\066\016\067\064\070\063" +
    "\071\100\072\074\001\002\000\050\027\uff51\030\uff51\031" +
    "\uff51\032\uff51\033\uff51\034\uff51\035\uff51\036\uff51\040\135" +
    "\041\141\043\uff51\044\152\045\uff51\046\uff51\047\uff51\054" +
    "\uff51\055\uff51\060\uff51\062\uff51\001\002\000\010\005\uffc3" +
    "\011\uffc3\064\uffc3\001\002\000\062\004\uffbc\005\uffbc\010" +
    "\uffbc\011\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc\020\uffbc" +
    "\022\uffbc\024\uffbc\025\uffbc\026\uffbc\037\uffbc\040\uffbc\041" +
    "\uffbc\044\uffbc\057\uffbc\064\uffbc\066\uffbc\067\uffbc\070\uffbc" +
    "\071\uffbc\072\uffbc\001\002\000\026\037\057\040\066\041" +
    "\101\044\072\057\116\066\016\067\064\070\063\071\100" +
    "\072\074\001\002\000\050\027\uff46\030\uff46\031\uff46\032" +
    "\uff46\033\uff46\034\uff46\035\uff46\036\uff46\040\uff46\041\uff46" +
    "\043\uff46\044\uff46\045\uff46\046\uff46\047\uff46\054\uff46\055" +
    "\uff46\060\uff46\062\uff46\001\002\000\062\004\uffc0\005\uffc0" +
    "\010\uffc0\011\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0\020" +
    "\uffc0\022\uffc0\024\uffc0\025\uffc0\026\uffc0\037\uffc0\040\uffc0" +
    "\041\uffc0\044\uffc0\057\uffc0\064\uffc0\066\uffc0\067\uffc0\070" +
    "\uffc0\071\uffc0\072\uffc0\001\002\000\004\057\371\001\002" +
    "\000\006\060\uffab\066\uffab\001\002\000\004\055\uffac\001" +
    "\002\000\006\060\uffa8\066\016\001\002\000\004\060\uffa9" +
    "\001\002\000\004\060\376\001\002\000\004\055\uffaa\001" +
    "\002\000\026\037\ufffc\040\ufffc\041\ufffc\044\ufffc\057\ufffc" +
    "\066\ufffc\067\ufffc\070\ufffc\071\ufffc\072\ufffc\001\002\000" +
    "\026\037\057\040\066\041\101\044\072\057\116\066\016" +
    "\067\064\070\063\071\100\072\074\001\002\000\042\027" +
    "\140\030\151\031\142\032\147\033\153\034\134\035\137" +
    "\036\150\040\135\041\141\043\133\044\152\045\146\046" +
    "\144\047\143\062\u0102\001\002\000\062\027\ufffb\030\ufffb" +
    "\031\ufffb\032\ufffb\033\ufffb\034\ufffb\035\ufffb\036\ufffb\040" +
    "\ufffb\041\ufffb\042\ufffb\043\ufffb\044\ufffb\045\ufffb\046\ufffb" +
    "\047\ufffb\050\ufffb\051\ufffb\052\ufffb\053\ufffb\054\ufffb\055" +
    "\ufffb\060\ufffb\062\ufffb\001\002\000\054\004\073\010\117" +
    "\012\060\014\104\015\106\020\111\022\120\024\102\025" +
    "\062\026\123\037\057\040\066\041\101\044\072\057\116" +
    "\063\322\066\016\067\064\070\063\071\100\072\074\001" +
    "\002\000\004\024\u0105\001\002\000\004\057\uff8e\001\002" +
    "\000\004\057\350\001\002\000\004\055\uff8d\001\002\000" +
    "\026\037\057\040\066\041\101\044\072\057\116\066\016" +
    "\067\064\070\063\071\100\072\074\001\002\000\050\027" +
    "\uff49\030\uff49\031\uff49\032\uff49\033\uff49\034\uff49\035\uff49" +
    "\036\uff49\040\135\041\141\043\uff49\044\152\045\uff49\046" +
    "\uff49\047\uff49\054\uff49\055\uff49\060\uff49\062\uff49\001\002" +
    "\000\012\042\u010d\054\uffda\055\uffda\061\u010c\001\002\000" +
    "\006\054\u0117\055\uffe8\001\002\000\012\067\uffe0\070\uffe0" +
    "\071\uffe0\072\uffe0\001\002\000\030\037\uffdc\040\uffdc\041" +
    "\uffdc\044\uffdc\057\uffdc\063\uffdc\066\uffdc\067\uffdc\070\uffdc" +
    "\071\uffdc\072\uffdc\001\002\000\006\054\uffdd\055\uffdd\001" +
    "\002\000\030\037\057\040\066\041\101\044\072\057\116" +
    "\063\230\066\016\067\064\070\063\071\100\072\074\001" +
    "\002\000\006\054\uffdb\055\uffdb\001\002\000\012\067\064" +
    "\070\063\071\100\072\074\001\002\000\004\062\u0113\001" +
    "\002\000\012\042\uffdf\054\uffdf\055\uffdf\061\uffdf\001\002" +
    "\000\012\042\u010d\054\uffda\055\uffda\061\u010c\001\002\000" +
    "\006\054\uffde\055\uffde\001\002\000\004\055\uffeb\001\002" +
    "\000\004\066\uffea\001\002\000\004\066\016\001\002\000" +
    "\012\042\u010d\054\uffda\055\uffda\061\u010c\001\002\000\006" +
    "\054\u0117\055\uffe8\001\002\000\004\055\uffe9\001\002\000" +
    "\066\004\uffc4\006\047\007\054\010\uffc4\012\uffc4\014\uffc4" +
    "\015\uffc4\016\052\017\051\020\uffc4\021\053\022\uffc4\024" +
    "\uffc4\025\uffc4\026\uffc4\037\uffc4\040\uffc4\041\uffc4\044\uffc4" +
    "\057\uffc4\064\uffc4\066\uffc4\067\uffc4\070\uffc4\071\uffc4\072" +
    "\uffc4\001\002\000\054\004\uffc5\010\uffc5\012\uffc5\014\uffc5" +
    "\015\uffc5\020\uffc5\022\uffc5\024\uffc5\025\uffc5\026\uffc5\037" +
    "\uffc5\040\uffc5\041\uffc5\044\uffc5\057\uffc5\064\uffc5\066\uffc5" +
    "\067\uffc5\070\uffc5\071\uffc5\072\uffc5\001\002\000\016\006" +
    "\047\007\054\016\052\017\051\021\053\060\uffcc\001\002" +
    "\000\004\066\016\001\002\000\004\060\u0127\001\002\000" +
    "\006\054\u0123\060\uffc9\001\002\000\004\060\uffcd\001\002" +
    "\000\014\006\uffcb\007\uffcb\016\uffcb\017\uffcb\021\uffcb\001" +
    "\002\000\014\006\047\007\054\016\052\017\051\021\053" +
    "\001\002\000\006\054\u0123\060\uffc9\001\002\000\004\060" +
    "\uffca\001\002\000\004\063\uffce\001\002\000\006\054\uffc8" +
    "\060\uffc8\001\002\000\014\006\006\016\011\017\010\021" +
    "\012\023\014\001\002\000\004\002\ufff9\001\002\000\004" +
    "\066\016\001\002\000\014\042\u010d\054\uffda\055\uffda\057" +
    "\020\061\u010c\001\002\000\006\054\u0117\055\uffe8\001\002" +
    "\000\004\002\ufff0\001\002\000\004\063\022\001\002\000" +
    "\020\002\uffd8\006\027\007\033\016\031\017\030\021\032" +
    "\023\034\001\002\000\004\002\uffec\001\002\000\004\055" +
    "\305\001\002\000\016\006\006\007\013\016\011\017\010" +
    "\021\012\023\014\001\002\000\004\002\uffed\001\002\000" +
    "\004\066\016\001\002\000\014\042\u010d\054\uffda\055\uffda" +
    "\057\020\061\u010c\001\002\000\004\002\ufff4\001\002\000" +
    "\004\066\016\001\002\000\014\042\u010d\054\uffda\055\uffda" +
    "\057\020\061\u010c\001\002\000\004\002\ufff2\001\002\000" +
    "\004\066\016\001\002\000\014\042\u010d\054\uffda\055\uffda" +
    "\057\020\061\u010c\001\002\000\004\002\ufff6\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u013c\000\010\002\004\003\003\004\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\070\u013a\001\001" +
    "\000\002\001\001\000\004\072\u0137\001\001\000\004\071" +
    "\u0134\001\001\000\004\073\u012a\001\001\000\004\067\u0128" +
    "\001\001\000\004\074\014\001\001\000\004\007\016\001" +
    "\001\000\002\001\001\000\004\025\020\001\001\000\004" +
    "\103\u011d\001\001\000\004\030\022\001\001\000\004\105" +
    "\042\001\001\000\010\024\025\031\024\032\023\001\001" +
    "\000\002\001\001\000\004\007\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\102\034\001\001\000\002\001" +
    "\001\000\004\032\035\001\001\000\002\001\001\000\004" +
    "\025\037\001\001\000\004\030\040\001\001\000\010\024" +
    "\041\031\024\032\023\001\001\000\002\001\001\000\012" +
    "\017\043\021\044\022\045\033\047\001\001\000\004\006" +
    "\u011b\001\001\000\004\007\u0109\001\001\000\002\001\001" +
    "\000\002\001\001\000\046\007\060\010\121\011\076\012" +
    "\111\035\104\036\070\040\074\041\120\043\064\044\106" +
    "\045\102\046\113\047\112\050\107\053\067\060\075\062" +
    "\114\064\066\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\076\054\001\001\000\004\022" +
    "\055\001\001\000\002\001\001\000\004\165\u0107\001\001" +
    "\000\004\130\u0102\001\001\000\002\001\001\000\004\111" +
    "\367\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\366\001\001\000\004\166\364\001\001\000\002\001" +
    "\001\000\004\006\363\001\001\000\046\007\060\010\121" +
    "\011\076\012\111\035\362\036\070\040\074\041\120\043" +
    "\064\044\106\045\102\046\113\047\112\050\107\053\067" +
    "\060\075\062\114\064\066\001\001\000\004\161\360\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\357" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\167\355\001\001\000\004\132\346\001\001" +
    "\000\004\006\345\001\001\000\004\134\332\001\001\000" +
    "\002\001\001\000\004\114\311\001\001\000\004\006\310" +
    "\001\001\000\002\001\001\000\004\113\306\001\001\000" +
    "\002\001\001\000\004\006\305\001\001\000\004\006\303" +
    "\001\001\000\002\001\001\000\004\146\300\001\001\000" +
    "\002\001\001\000\004\120\251\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\106\123\001\001\000\004\054" +
    "\125\001\001\000\006\107\127\110\126\001\001\000\002" +
    "\001\001\000\004\013\213\001\001\000\012\007\060\010" +
    "\130\011\131\012\111\001\001\000\002\001\001\000\004" +
    "\055\135\001\001\000\004\157\211\001\001\000\004\154" +
    "\207\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\155\204\001\001\000\004\147\202\001\001\000\002\001" +
    "\001\000\004\151\200\001\001\000\004\164\176\001\001" +
    "\000\004\163\174\001\001\000\014\007\060\010\130\011" +
    "\171\012\111\013\167\001\001\000\004\162\165\001\001" +
    "\000\004\152\163\001\001\000\004\156\161\001\001\000" +
    "\004\150\157\001\001\000\004\160\155\001\001\000\004" +
    "\153\153\001\001\000\012\007\060\010\130\011\154\012" +
    "\111\001\001\000\002\001\001\000\012\007\060\010\130" +
    "\011\156\012\111\001\001\000\002\001\001\000\012\007" +
    "\060\010\130\011\160\012\111\001\001\000\002\001\001" +
    "\000\012\007\060\010\130\011\162\012\111\001\001\000" +
    "\002\001\001\000\012\007\060\010\130\011\164\012\111" +
    "\001\001\000\002\001\001\000\012\007\060\010\130\011" +
    "\166\012\111\001\001\000\002\001\001\000\004\055\173" +
    "\001\001\000\002\001\001\000\004\055\172\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\007\060\010\130" +
    "\011\175\012\111\001\001\000\002\001\001\000\012\007" +
    "\060\010\130\011\177\012\111\001\001\000\002\001\001" +
    "\000\012\007\060\010\130\011\201\012\111\001\001\000" +
    "\002\001\001\000\012\007\060\010\130\011\203\012\111" +
    "\001\001\000\002\001\001\000\012\007\060\010\130\011" +
    "\205\012\111\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\007\060\010\130\011\210\012\111\001\001\000" +
    "\002\001\001\000\012\007\060\010\130\011\212\012\111" +
    "\001\001\000\002\001\001\000\004\055\214\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\140\247\001\001" +
    "\000\004\143\245\001\001\000\004\142\243\001\001\000" +
    "\004\141\241\001\001\000\004\137\223\001\001\000\020" +
    "\007\060\010\121\011\225\012\111\014\230\041\224\042" +
    "\226\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\144\231\001\001\000\002\001\001\000" +
    "\004\012\232\001\001\000\004\015\233\001\001\000\002" +
    "\001\001\000\004\145\235\001\001\000\004\012\236\001" +
    "\001\000\004\015\237\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\007\060\010\121\011\225\012\111\014" +
    "\230\041\224\042\242\001\001\000\002\001\001\000\020" +
    "\007\060\010\121\011\225\012\111\014\230\041\224\042" +
    "\244\001\001\000\002\001\001\000\020\007\060\010\121" +
    "\011\225\012\111\014\230\041\224\042\246\001\001\000" +
    "\002\001\001\000\020\007\060\010\121\011\225\012\111" +
    "\014\230\041\224\042\250\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\121\253\001\001\000\006\007\060" +
    "\010\254\001\001\000\002\001\001\000\004\122\256\001" +
    "\001\000\004\052\260\001\001\000\004\123\261\001\001" +
    "\000\002\001\001\000\004\051\262\001\001\000\002\001" +
    "\001\000\004\126\273\001\001\000\004\124\265\001\001" +
    "\000\004\012\266\001\001\000\002\001\001\000\004\125" +
    "\270\001\001\000\046\007\060\010\121\011\076\012\111" +
    "\035\271\036\070\040\074\041\120\043\064\044\106\045" +
    "\102\046\113\047\112\050\107\053\067\060\075\062\114" +
    "\064\066\001\001\000\004\051\272\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\127\275\001\001\000\046" +
    "\007\060\010\121\011\076\012\111\035\276\036\070\040" +
    "\074\041\120\043\064\044\106\045\102\046\113\047\112" +
    "\050\107\053\067\060\075\062\114\064\066\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\007\060\010\130" +
    "\011\301\012\111\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\007\060\010\130\011\307\012\111\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\115\313\001\001\000\016\007\060\010\121\011\076\012" +
    "\111\040\314\041\120\001\001\000\002\001\001\000\004" +
    "\116\316\001\001\000\046\007\060\010\121\011\076\012" +
    "\111\036\317\037\320\040\074\041\120\043\064\044\106" +
    "\045\102\046\113\047\112\050\107\053\067\060\075\062" +
    "\114\064\066\001\001\000\002\001\001\000\004\061\325" +
    "\001\001\000\004\136\322\001\001\000\046\007\060\010" +
    "\121\011\076\012\111\035\323\036\070\040\074\041\120" +
    "\043\064\044\106\045\102\046\113\047\112\050\107\053" +
    "\067\060\075\062\114\064\066\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\117\327\001" +
    "\001\000\046\007\060\010\121\011\076\012\111\036\317" +
    "\037\330\040\074\041\120\043\064\044\106\045\102\046" +
    "\113\047\112\050\107\053\067\060\075\062\114\064\066" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\065" +
    "\334\001\001\000\004\135\336\001\001\000\046\007\060" +
    "\010\121\011\076\012\111\036\317\037\335\040\074\041" +
    "\120\043\064\044\106\045\102\046\113\047\112\050\107" +
    "\053\067\060\075\062\114\064\066\001\001\000\002\001" +
    "\001\000\016\007\060\010\121\011\076\012\111\040\337" +
    "\041\120\001\001\000\004\006\340\001\001\000\016\007" +
    "\060\010\121\011\076\012\111\040\341\041\120\001\001" +
    "\000\004\006\342\001\001\000\016\007\060\010\121\011" +
    "\076\012\111\040\343\041\120\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\063\350\001" +
    "\001\000\004\133\352\001\001\000\046\007\060\010\121" +
    "\011\076\012\111\036\317\037\351\040\074\041\120\043" +
    "\064\044\106\045\102\046\113\047\112\050\107\053\067" +
    "\060\075\062\114\064\066\001\001\000\002\001\001\000" +
    "\016\007\060\010\121\011\076\012\111\040\353\041\120" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\007" +
    "\060\010\130\011\356\012\111\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\007\060\010\130\011\361\012" +
    "\111\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\007\060\010\130\011\365\012\111\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\056\371" +
    "\001\001\000\004\112\372\001\001\000\002\001\001\000" +
    "\010\007\060\010\373\057\374\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\066\377\001" +
    "\001\000\012\007\060\010\130\011\u0100\012\111\001\001" +
    "\000\002\001\001\000\002\001\001\000\046\007\060\010" +
    "\121\011\076\012\111\036\317\037\u0103\040\074\041\120" +
    "\043\064\044\106\045\102\046\113\047\112\050\107\053" +
    "\067\060\075\062\114\064\066\001\001\000\002\001\001" +
    "\000\004\131\u0105\001\001\000\004\063\u0106\001\001\000" +
    "\002\001\001\000\012\007\060\010\130\011\u0108\012\111" +
    "\001\001\000\002\001\001\000\006\016\u010a\023\u010d\001" +
    "\001\000\004\020\u0115\001\001\000\004\077\u0110\001\001" +
    "\000\004\101\u010e\001\001\000\002\001\001\000\020\007" +
    "\060\010\121\011\225\012\111\014\230\041\224\042\u010f" +
    "\001\001\000\002\001\001\000\004\012\u0111\001\001\000" +
    "\002\001\001\000\004\100\u0113\001\001\000\006\016\u0114" +
    "\023\u010d\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\075\u0117\001\001\000\004\007\u0118\001\001\000\006" +
    "\016\u0119\023\u010d\001\001\000\004\020\u011a\001\001\000" +
    "\002\001\001\000\012\017\043\021\044\022\045\033\u011c" +
    "\001\001\000\002\001\001\000\012\021\u011e\022\045\026" +
    "\u011f\034\u0120\001\001\000\004\007\u0127\001\001\000\002" +
    "\001\001\000\004\027\u0121\001\001\000\002\001\001\000" +
    "\004\104\u0123\001\001\000\010\021\u011e\022\045\034\u0124" +
    "\001\001\000\004\027\u0125\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\u0129\001\001" +
    "\000\002\001\001\000\004\007\u012b\001\001\000\012\005" +
    "\u012d\016\u012c\023\u010d\025\u012e\001\001\000\004\020\u0131" +
    "\001\001\000\002\001\001\000\004\030\u012f\001\001\000" +
    "\010\024\u0130\031\024\032\023\001\001\000\002\001\001" +
    "\000\004\006\u0132\001\001\000\006\003\u0133\004\006\001" +
    "\001\000\002\001\001\000\004\007\u0135\001\001\000\012" +
    "\005\u0136\016\u012c\023\u010d\025\u012e\001\001\000\002\001" +
    "\001\000\004\007\u0138\001\001\000\012\005\u0139\016\u012c" +
    "\023\u010d\025\u012e\001\001\000\002\001\001\000\004\007" +
    "\u013b\001\001\000\012\005\u013c\016\u012c\023\u010d\025\u012e" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("Error sintáctico en la fila " + fila + ", columna " + columna + ": Token inesperado <" + lexema + ">");
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("¡No se pudo recuperar!");
        System.out.println("Terror sintáctico en la fila " + fila + ", columna " + columna + ": Token inesperado <" + lexema + ">");
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {


    private void print(String msg) {
        System.out.println("Parser: " + msg);
    }

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // EXP ::= LITERAL 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // EXP ::= VAR 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // EXP ::= smbmenosmenos NT$65 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$65
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // NT$65 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$65",117, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // EXP ::= EXP smbmenosmenos 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // EXP ::= smbmasmas NT$64 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$64
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // NT$64 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$64",116, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // EXP ::= EXP smbmasmas 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // EXP ::= smbadmiracion NT$63 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$63
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // NT$63 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$63",115, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // EXP ::= EXP smbdivisionentera NT$62 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$62
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // NT$62 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$62",114, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // EXP ::= EXP smbdivision NT$61 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$61
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // NT$61 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$61",113, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // EXP ::= EXP smbmultiplicacion NT$60 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$60
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // NT$60 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$60",112, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // EXP ::= smbmenos NT$59 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$59
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // NT$59 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$59",111, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // EXP ::= EXP smbmenos NT$58 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$58
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // NT$58 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$58",110, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // EXP ::= EXP smbmas NT$57 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$57
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // NT$57 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$57",109, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // EXP ::= EXP smband NT$56 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$56
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // NT$56 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$56",108, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // EXP ::= EXP smbor NT$55 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$55
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // NT$55 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$55",107, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // EXP ::= EXP smbdiferente NT$54 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$54
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // NT$54 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$54",106, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // EXP ::= EXP smbmenor NT$53 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$53
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // NT$53 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$53",105, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // EXP ::= EXP smbmenorigual NT$52 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$52
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // NT$52 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$52",104, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // EXP ::= EXP smbmayor NT$51 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$51
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // NT$51 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$51",103, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // EXP ::= EXP smbmayorigual NT$50 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$50
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // NT$50 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$50",102, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // EXP ::= EXP smbigualigual NT$49 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$49
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // NT$49 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$49",101, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // EXP ::= smbparentabrir NT$48 EXP smbparentcerrar 
            {
              String RESULT =null;
              // propagate RESULT from NT$48
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // NT$48 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$48",100, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // STRING ::= smbstring 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STRING",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // ARRAYLIST2 ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARRAYLIST2",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // ARRAYLIST2 ::= smbcoma NT$47 LITERAL ARRAYLIST2 
            {
              String RESULT =null;
              // propagate RESULT from NT$47
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARRAYLIST2",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // NT$47 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$47",99, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // ARRAYLIST ::= smbllaveabrir NT$46 LITERAL ARRAYLIST2 smbllavecerrar 
            {
              String RESULT =null;
              // propagate RESULT from NT$46
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARRAYLIST",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // NT$46 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$46",98, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // LITERAL ::= smboct 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // LITERAL ::= smbhex 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // LITERAL ::= smbdec 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // LITERAL ::= smbcharlit 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // EXPASIARR ::= EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPASIARR",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // EXPASIARR ::= ASIGN 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPASIARR",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // EXPASIARR ::= ARRAYLIST 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPASIARR",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // ASIGN ::= VAR smbdivisionigual NT$45 EXPASIARR 
            {
              String RESULT =null;
              // propagate RESULT from NT$45
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGN",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // NT$45 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$45",97, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // ASIGN ::= VAR smbmultiplicacionigual NT$44 EXPASIARR 
            {
              String RESULT =null;
              // propagate RESULT from NT$44
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGN",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // NT$44 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$44",96, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // ASIGN ::= VAR smbmenosigual NT$43 EXPASIARR 
            {
              String RESULT =null;
              // propagate RESULT from NT$43
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGN",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // NT$43 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$43",95, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // ASIGN ::= VAR smbmasigual NT$42 EXPASIARR 
            {
              String RESULT =null;
              // propagate RESULT from NT$42
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGN",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // NT$42 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$42",94, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // ASIGN ::= VAR smbigual NT$41 EXPASIARR 
            {
              String RESULT =null;
              // propagate RESULT from NT$41
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGN",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // NT$41 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$41",93, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // ASIGOEXP ::= EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGOEXP",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // ASIGOEXP ::= ASIGN 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGOEXP",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // GENBLOCK ::= INSTRUC 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GENBLOCK",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // GENBLOCK ::= smbllaveabrir NT$40 INSTLIST smbllavecerrar 
            {
              String RESULT =null;
              // propagate RESULT from NT$40
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GENBLOCK",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // NT$40 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$40",92, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // FORPARAM ::= smbparentabrir NT$39 ASIGOEXP PUCOMA ASIGOEXP PUCOMA ASIGOEXP smbparentcerrar 
            {
              String RESULT =null;
              // propagate RESULT from NT$39
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FORPARAM",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // NT$39 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$39",91, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // FOR ::= smbfor NT$38 FORPARAM GENBLOCK 
            {
              String RESULT =null;
              // propagate RESULT from NT$38
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // NT$38 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$38",90, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // WHLPARAM ::= smbparentabrir NT$37 ASIGOEXP smbparentcerrar 
            {
              String RESULT =null;
              // propagate RESULT from NT$37
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WHLPARAM",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // NT$37 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$37",89, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // WHILE ::= smbwhile NT$36 WHLPARAM GENBLOCK 
            {
              String RESULT =null;
              // propagate RESULT from NT$36
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WHILE",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // NT$36 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$36",88, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // DOWHILE ::= smbdo NT$34 GENBLOCK smbwhile NT$35 WHLPARAM 
            {
              String RESULT =null;
              // propagate RESULT from NT$35
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DOWHILE",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // NT$35 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$35",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // NT$34 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$34",86, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // SWTHCS ::= smbdefault NT$32 smbdospuntos NT$33 INSTLIST 
            {
              String RESULT =null;
              // propagate RESULT from NT$33
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWTHCS",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // NT$33 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$33",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // NT$32 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$32",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // SWTHCS ::= smbcase NT$30 LITERAL smbdospuntos NT$31 INSTLIST SWTHCS 
            {
              String RESULT =null;
              // propagate RESULT from NT$31
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWTHCS",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // NT$31 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$31",83, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // NT$30 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$30",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // SWTHBLOCK ::= smbllaveabrir NT$29 SWTHCS smbllavecerrar 
            {
              String RESULT =null;
              // propagate RESULT from NT$29
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWTHBLOCK",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // NT$29 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$29",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // SWITCH ::= smbswitch NT$26 smbparentabrir NT$27 VAR smbparentcerrar NT$28 SWTHBLOCK 
            {
              String RESULT =null;
              // propagate RESULT from NT$28
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCH",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // NT$28 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$28",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // NT$27 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$27",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // NT$26 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$26",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // IFELSE ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IFELSE",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // IFELSE ::= smbelse NT$25 GENBLOCK 
            {
              String RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IFELSE",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // NT$25 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$25",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // IF ::= smbif NT$22 smbparentabrir NT$23 ASIGOEXP smbparentcerrar NT$24 GENBLOCK IFELSE 
            {
              String RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // NT$24 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$24",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // NT$23 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$23",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // NT$22 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$22",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CONTINUE ::= smbcontinue 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTINUE",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // BREAK ::= smbbreak 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BREAK",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // RETURN ::= smbreturn NT$21 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // NT$21 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$21",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // RETURN ::= smbreturn 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // RDPARAM1 ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RDPARAM1",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // RDPARAM1 ::= VAR 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RDPARAM1",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // RDPARAM ::= smbparentabrir NT$20 RDPARAM1 smbparentcerrar 
            {
              String RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RDPARAM",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // NT$20 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$20",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // READ ::= smbread NT$19 RDPARAM 
            {
              String RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // NT$19 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$19",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // WRTPARAM1 ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WRTPARAM1",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // WRTPARAM1 ::= smbcoma STRING WRTPARAM1 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WRTPARAM1",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // WRTPARAM1 ::= smbcoma EXP WRTPARAM1 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WRTPARAM1",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // WRTPARAM ::= smbparentabrir NT$18 STRING WRTPARAM1 smbparentcerrar 
            {
              String RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WRTPARAM",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$18 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$18",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // WRTPARAM ::= smbparentabrir NT$17 EXP WRTPARAM1 smbparentcerrar 
            {
              String RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WRTPARAM",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$17 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$17",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // WRITE ::= smbwrite NT$16 WRTPARAM 
            {
              String RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WRITE",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$16 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$16",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // INSTRUC ::= IF 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUC",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // INSTRUC ::= SWITCH 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUC",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // INSTRUC ::= DOWHILE PUCOMA 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUC",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // INSTRUC ::= WHILE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUC",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // INSTRUC ::= FOR 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUC",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // INSTRUC ::= WRITE PUCOMA 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUC",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // INSTRUC ::= READ PUCOMA 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUC",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // INSTRUC ::= RETURN PUCOMA 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUC",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // INSTRUC ::= BREAK PUCOMA 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUC",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // INSTRUC ::= CONTINUE PUCOMA 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUC",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // INSTRUC ::= ASIGOEXP PUCOMA 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUC",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // INSTLIST ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTLIST",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // INSTLIST ::= INSTRUC INSTLIST 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTLIST",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FUNVARDEC ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNVARDEC",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // FUNVARDEC ::= VARDECL PUCOMA FUNVARDEC 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNVARDEC",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // FUNCBLOCK ::= smbllaveabrir NT$15 FUNVARDEC INSTLIST smbllavecerrar 
            {
              String RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCBLOCK",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NT$15 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$15",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // FUNPARDEC ::= VARTIPO IDENTIF 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNPARDEC",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // FUNPARAM1 ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNPARAM1",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // FUNPARAM1 ::= smbcoma NT$14 FUNPARDEC FUNPARAM1 
            {
              String RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNPARAM1",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$14 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$14",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FUNPARAM ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNPARAM",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FUNPARAM ::= FUNPARDEC FUNPARAM1 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNPARAM",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FUNCPARAM ::= smbparentabrir NT$13 FUNPARAM smbparentcerrar 
            {
              String RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCPARAM",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$13 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$13",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FUNCTIPO1 ::= smbvoid 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTIPO1",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FUNCTIPO1 ::= smbshort 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTIPO1",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FUNCTIPO1 ::= smblong 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTIPO1",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FUNCTIPO1 ::= smbint 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTIPO1",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FUNCTIPO1 ::= smbchar 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTIPO1",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // FUNCTIPO ::= FUNCTIPO1 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTIPO",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // FUNCTIPO ::= smbconst NT$12 FUNCTIPO1 
            {
              String RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTIPO",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$12 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$12",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // FUNCDEFIN ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCDEFIN",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FUNCDEFIN ::= FUNCTIPO IDENTIF FUNCPARAM FUNCBLOCK FUNCDEFIN 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCDEFIN",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // VARASIG ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARASIG",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // VARASIG ::= smbigual NT$11 EXPASIARR 
            {
              String RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARASIG",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$11 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$11",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // VARARRAY ::= VARASIG 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARARRAY",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VARARRAY ::= smbcuadradoabrir NT$9 LITERAL smbcuadradocerrar NT$10 VARARRAY 
            {
              String RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARARRAY",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$10 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$10",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$9 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$9",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // VARTIPO1 ::= smbshort 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARTIPO1",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // VARTIPO1 ::= smblong 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARTIPO1",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // VARTIPO1 ::= smbint 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARTIPO1",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // VARTIPO1 ::= smbchar 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARTIPO1",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // VARTIPO ::= VARTIPO1 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARTIPO",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // VARTIPO ::= smbconst NT$8 VARTIPO1 
            {
              String RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARTIPO",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$8 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$8",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VARDECL2 ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARDECL2",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VARDECL2 ::= smbcoma NT$7 IDENTIF VARARRAY VARDECL2 
            {
              String RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARDECL2",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$7 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$7",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VARDECL ::= VARTIPO IDENTIF VARARRAY VARDECL2 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARDECL",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VAROFUNC2 ::= FUNCPARAM FUNCBLOCK FUNCDEFIN 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAROFUNC2",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VAROFUNC2 ::= VARARRAY VARDECL2 PUCOMA VAROFUNC 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAROFUNC2",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VAROFUNC1 ::= smbvoid NT$6 IDENTIF FUNCPARAM FUNCBLOCK FUNCDEFIN 
            {
              String RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAROFUNC1",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$6 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$6",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VAROFUNC1 ::= smbshort NT$5 IDENTIF VAROFUNC2 
            {
              String RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAROFUNC1",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$5 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$5",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VAROFUNC1 ::= smblong NT$4 IDENTIF VAROFUNC2 
            {
              String RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAROFUNC1",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$4 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // VAROFUNC1 ::= smbint NT$3 IDENTIF VAROFUNC2 
            {
              String RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAROFUNC1",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$3 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VAROFUNC1 ::= smbchar NT$2 IDENTIF VAROFUNC2 
            {
              String RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAROFUNC1",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$2 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VAROFUNC ::= VAROFUNC1 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAROFUNC",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VAROFUNC ::= smbconst NT$1 VAROFUNC1 
            {
              String RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAROFUNC",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$1 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // VAR ::= IDENTIF smbcuadradoabrir NT$0 EXP smbcuadradocerrar 
            {
              String RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$0 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // VAR ::= IDENTIF 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // IDENTIF ::= smbidentificador 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDENTIF",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PUCOMA ::= smbpuntocoma 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PUCOMA",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= VAROFUNC 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

